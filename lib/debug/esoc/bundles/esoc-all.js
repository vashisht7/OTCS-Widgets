/**
 * emojiarea - A rich textarea control that supports emojis, WYSIWYG-style.
 * Copyright (c) 2012 DIY Co
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@diy.org>
 */
csui.define('esoc/lib/jquery.emojiarea/jquery.emojiarea.custom',['module', 'csui/lib/jquery', 'i18n'],
    function (module, $, i18n) {
        (function ($, window, document) {

            var ELEMENT_NODE = 1;
            var TEXT_NODE = 3;
            var TAGS_BLOCK = ['p', 'div', 'pre', 'form'];
            var KEY_ESC = 27;
            var KEY_TAB = 9;
            var getElementOffset = function (ele) {
                return ele.is(':visible') ? ele.offset() : {top: 0, left: 0};
              };
        

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            $.emojiarea = {
                path: '',
                util: {},
                icons: {},
                widget: '',
                defaults: {
                    button: null,
                    buttonLabel: 'Emojis',
                    buttonPosition: 'after'
                }
            };

            $.fn.emojiarea = function (options) {
                $.emojiarea.path = options.path;
                $.emojiarea.widget = options.widget;
                options = $.extend({}, $.emojiarea.defaults, options);
                return this.each(function () {
                    var $textarea = $(this);
                    if ('contentEditable' in document.body && options.wysiwyg !== false) {
                        new EmojiArea_WYSIWYG($textarea, options);
                    } else {
                        new EmojiArea_Plain($textarea, options);
                    }
                });
            };

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            var util = {};

            util.restoreSelection = (function () {
                if (window.getSelection) {
                    return function (savedSelection) {
                        var sel = window.getSelection();
                        sel.removeAllRanges();
                        for (var i = 0, len = savedSelection.length; i < len; ++i) {
                            sel.addRange(savedSelection[i]);
                        }
                    };
                } else if (document.selection && document.selection.createRange) {
                    return function (savedSelection) {
                        if (savedSelection) {
                            savedSelection.select();
                        }
                    };
                }
            })();

            util.saveSelection = (function () {
                if (window.getSelection) {
                    return function () {
                        var sel = window.getSelection(), ranges = [];
                        if (sel.rangeCount) {
                            for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                                ranges.push(sel.getRangeAt(i));
                            }
                        }
                        return ranges;
                    };
                } else if (document.selection && document.selection.createRange) {
                    return function () {
                        var sel = document.selection;
                        return (sel.type.toLowerCase() !== 'none') ? sel.createRange() : null;
                    };
                }
            })();

            util.replaceSelection = (function () {
                if (window.getSelection) {
                    return function (content) {
                        var range, sel = window.getSelection();
                        var node = typeof content === 'string' ? document.createTextNode(content) : content;
                        if (sel.getRangeAt && sel.rangeCount) {
                            range = sel.getRangeAt(0);
                            range.deleteContents();
                            //range.insertNode(document.createTextNode(' '));
                            range.insertNode(node);
                            range.setStart(node, 0);

                            window.setTimeout(function () {
                                range = document.createRange();
                                range.setStartAfter(node);
                                range.collapse(true);
                                sel.removeAllRanges();
                                sel.addRange(range);
                            }, 0);
                        }
                    }
                } else if (document.selection && document.selection.createRange) {
                    return function (content) {
                        var range = document.selection.createRange();
                        if (typeof content === 'string') {
                            range.text = content;
                        } else {
                            range.pasteHTML(content.outerHTML);
                        }
                    }
                }
            })();

            util.insertAtCursor = function (text, el) {
                text = ' ' + text;
                var val = el.value, endIndex, startIndex, range;
                if (typeof el.selectionStart != 'undefined' && typeof el.selectionEnd != 'undefined') {
                    startIndex = el.selectionStart;
                    endIndex = el.selectionEnd;
                    el.value = val.substring(0, startIndex) + text + val.substring(el.selectionEnd);
                    el.selectionStart = el.selectionEnd = startIndex + text.length;
                } else if (typeof document.selection != 'undefined' &&
                    typeof document.selection.createRange != 'undefined') {
                    el.trigger('focus');
                    range = document.selection.createRange();
                    range.text = text;
                    range.select();
                }
            };

            util.extend = function (a, b) {
                if (typeof a === 'undefined' || !a) {
                    a = {};
                }
                if (typeof b === 'object') {
                    for (var key in b) {
                        if (b.hasOwnProperty(key)) {
                            a[key] = b[key];
                        }
                    }
                }
                return a;
            };

            util.escapeRegex = function (str) {
                return (str + '').replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
            };

            util.htmlEntities = function (str) {
                return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g,
                    '&gt;').replace(/"/g, '&quot;');
            };

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            var EmojiArea = function () {
            };

            EmojiArea.prototype.setup = function () {
                var self = this;

                this.$editor.on('focus', function () {
                    self.hasFocus = true;
                });
                this.$editor.on('blur', function () {
                    self.hasFocus = false;
                });

                this.setupButton();
            };

            EmojiArea.prototype.setupButton = function () {
                var self = this;
                var $button;

                if (this.options.button) {
                    $button = $(this.options.button);
                } else if (this.options.button !== false) {
                    $button = $('<a href="javascript:void(0)">');
                    $button.html(this.options.buttonLabel);
                    $button.addClass('emoji-button');
                    $button.attr({title: this.options.buttonLabel});
                    this.$editor[this.options.buttonPosition]($button);
                } else {
                    $button = $('');
                }

                $button.on('click', function (e) {
                    EmojiMenu.show(self);
                });

                this.$button = $button;
            };

            EmojiArea.createIcon = function (emoji) {
                var filename = $.emojiarea.icons[emoji];
                var path = $.emojiarea.path || '';
                if (path.length && path.charAt(path.length - 1) !== '/') {
                    path += '/';
                }
                var emojiTitle = $.emojiarea.iconsTitle;
                var iconTitle = emojiTitle[emoji];
                var imageIcon = $("<img/>");
                imageIcon.attr("src", (path + filename));
                imageIcon.attr("title", util.htmlEntities(iconTitle));
                imageIcon.attr("alt", util.htmlEntities(emoji));
                return imageIcon.prop("outerHTML");
            };

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            /**
             * Editor (plain-text)
             *
             * @constructor
             * @param {object} $textarea
             * @param {object} options
             */

            var EmojiArea_Plain = function ($textarea, options) {
                this.options = options;
                this.$textarea = $textarea;
                this.$editor = $textarea;
                this.setup();
            };

            EmojiArea_Plain.prototype.insert = function (emoji) {
                if (!$.emojiarea.icons.hasOwnProperty(emoji)) {
                    return;
                }
                util.insertAtCursor(emoji, this.$textarea.eq(0));
                this.$textarea.trigger('change');
            };

            EmojiArea_Plain.prototype.val = function () {
                return this.$textarea.val();
            };

            util.extend(EmojiArea_Plain.prototype, EmojiArea.prototype);

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            /**
             * Editor (rich)
             *
             * @constructor
             * @param {object} $textarea
             * @param {object} options
             */

            var EmojiArea_WYSIWYG = function ($textarea, options) {
                var self = this;

                this.options = options;
                this.$textarea = $textarea;
                this.$editor = $('<div>').addClass('emoji-wysiwyg-editor');
                this.$editor.text($textarea.val());
                this.$editor.attr({contenteditable: 'true'});
                this.$editor.on('blur keydown keyup paste', function (e) {
                    if (e.originalEvent && e.originalEvent.type === 'paste') {
                        if (window.clipboardData && window.getSelection) {
                            var range = window.getSelection().getRangeAt(0);
                            if (range.endOffset - range.startOffset > 0) {
                                range.deleteContents();
                            }
                        }
                    }
                    return self.onChange.apply(self, arguments);
                });

                //for scrolling inside the textarea using mousewheel
                this.$editor.on('wheel', function (e) {

                    if (e.originalEvent.deltaY > 0) {
                        //scroll down
                        self.$editor.animate({scrollTop: '+=100px'}, 10);

                    } else {
                        //scroll up
                        self.$editor.animate({scrollTop: '-=100px'}, 10);
                    }
                    //prevent page fom scrolling
                    return false;
                });

                if (navigator.appVersion && navigator.appVersion.indexOf("MSIE 10") === -1) {
                    this.$editor.on('mousedown focus keydown', function () {
                        document.execCommand("AutoUrlDetect", false, false);
                        document.execCommand('enableObjectResizing', false, false);
                    });
                    this.$editor.on('blur', function () {
                        document.execCommand('enableObjectResizing', true, true);
                    });
                }

                var html = this.$editor.text(),
                    spanRegEx = /<span data-userid=.*?>\(@.*?\)<\/span>/gi,
                    userNamematch = html.match(spanRegEx),
                    emojis = $.emojiarea.icons;
                for (var key in emojis) {
                    if (emojis.hasOwnProperty(key)) {
                        html = html.replace(new RegExp(util.escapeRegex(key), 'g'),
                            EmojiArea.createIcon(key));
                    }
                }
                var matches = html.match(spanRegEx);
                if (matches !== null && matches.length > 0) {
                    for (var ids in matches) {
                        html = html.replace(matches[ids], userNamematch[ids]);
                    }
                }
                this.$editor.html(html);

                $textarea.hide().after(this.$editor);

                this.setup();
                $(document.body).on('mousedown touchstart keyup', function () {
                    if (self.hasFocus) {
                        self.selection = util.saveSelection();
                    }
                });
            };
            EmojiArea_WYSIWYG.prototype.onChange = function (e) {
                this.$textarea.val(this.val(e)).trigger('change');
            };

            EmojiArea_WYSIWYG.prototype.insert = function (emoji) {
                var content;
                var $img = $(EmojiArea.createIcon(emoji));
                $img.attr("tabindex", -1);
                if ($img[0].attachEvent) {
                    $img[0].attachEvent('onresizestart', function (e) {
                        e.returnValue = false;
                    }, false);
                }

                if (this.selection) {
                    util.restoreSelection(this.selection);
                }
                try {
                    util.replaceSelection($img[0]);
                } catch (e) {
                }
                this.onChange();
                $("#esoc-social-comment-container").find(".esoc-social-comment-list-item").removeClass(
                    "esoc-edit-init-min-height");
            };

            EmojiArea_WYSIWYG.prototype.val = function (e) {
                var lines = [];
                var line = [];

                var flush = function () {
                    lines.push(line.join(''));
                    line = [];
                };

                var sanitizeNode = function (node, event) {
                    if (node.nodeType === TEXT_NODE) {
                        line.push(node.nodeValue);
                    } else if (node.nodeType === ELEMENT_NODE) {
                        var tagName = node.tagName.toLowerCase();
                        var isBlock = TAGS_BLOCK.indexOf(tagName) !== -1;

                        if (isBlock && line.length) {
                            flush();
                        }

                        if (tagName === 'input') {
                            if (!event) {
                                var alt = node.value || '';
                                if (alt) {
                                    line.push(alt);
                                }
                            } else {
                                if (event.keyCode != 8) {
                                    var alt = node.value || '';
                                    if (alt) {
                                        line.push(alt);
                                    }
                                }
                            }
                            return;
                        }

                        if (tagName === 'img') {
                            var alt = node.getAttribute('alt') || '';
                            if (alt) {
                                line.push(alt);
                            }
                            return;
                        } else if (tagName === 'br') {
                            flush();
                        } else if (navigator.appVersion && navigator.appVersion.indexOf("MSIE 10") === -1 &&
                            tagName === 'p' && !node.hasChildNodes()) {
                            flush();
                        }

                        var children = node.childNodes;
                        for (var i = 0; i < children.length; i++) {
                            sanitizeNode(children[i], event);
                        }

                        if (isBlock && line.length) {
                            flush();
                        }
                    }
                };

                var children = this.$editor[0].childNodes;
                for (var i = 0; i < children.length; i++) {
                    sanitizeNode(children[i], e);
                }

                if (line.length) {
                    flush();
                }

                return lines.join('\n');
            };

            util.extend(EmojiArea_WYSIWYG.prototype, EmojiArea.prototype);

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            /**
             * Emoji Dropdown Menu
             *
             * @constructor
             * @param {object} emojiarea
             */
            var EmojiMenu = function () {
                var self = this;
                var $body = $(document.body);
                var $window = $(window);

                this.visible = false;
                this.emojiarea = null;
                this.$menu = $('<div>');
                this.$menu.addClass('binf-popover binf-bottom emoji-menu');
                this.$menu.hide();
                $('<div class="binf-arrow"></div>').appendTo(this.$menu);
                this.$items = $('<div class="myemoji">').appendTo(this.$menu);

                //$body.append(this.$menu);
                $("#esoc-social-comment-container").append();

                $.emojiarea.widget.off('keydown').on('keydown',
                    function (e) {
                        var emojiButton = self.emojiarea ? self.emojiarea.$button : '';
                        if (e.keyCode === KEY_ESC || e.keyCode === KEY_TAB) {
                            self.hide();
                            if (!!emojiButton) {
                                emojiButton.trigger("focus");
                            }
                        }
                    });
                $.emojiarea.widget.off('mouseup').on('mouseup',
                    function (e) {
                        if ($(e.target).parents(".esoc-social-attachment-popover").length === 0) {
                            if (self.visible === true) {
                                self.hide();
                            }
                        } else {
                            if (self.visible === true) {
                                self.hide();
                            }
                        }
                    });

                $window.off('resize').on('resize', function () {
                    if (self.visible) {
                        self.reposition();
                    }
                });

                this.$menu.on('mouseup', 'a', function (e) {
                    e.stopPropagation();
                    return false;
                });

                this.$items.on('keydown', function (e) {
                    switch (e.which) {
                        case $.ui.keyCode.LEFT:
                            if (!!e.target.previousSibling) {
                                $(e.target.previousSibling).trigger("focus");
                            }
                            e.preventDefault();
                            break;

                        case $.ui.keyCode.UP:
                            if (!!$(e.target).prevAll().eq(4)) {//Honor number of emoticons displayed per line(0-4)
                                $(e.target).prevAll().eq(4).trigger("focus");
                            }
                            e.preventDefault();
                            break;

                        case $.ui.keyCode.RIGHT:
                            if (!!e.target.nextSibling) {
                                $(e.target.nextSibling).trigger("focus");
                            }
                            e.preventDefault();
                            break;

                        case $.ui.keyCode.DOWN:
                            if (!!$(e.target).nextAll().eq(4)) {//Honor number of emoticons displayed per line(0-4)
                                $(e.target).nextAll().eq(4).trigger("focus");
                            }
                            e.preventDefault();
                            break;
                        case $.ui.keyCode.ESCAPE:
                            self.emojiarea.$button.first().trigger("focus");
                            if (self.emojiarea.options && self.emojiarea.options.util) {
                                self.emojiarea.options.util.emojiObj = self;
                            }
                            e.preventDefault();
                            e.stopPropagation();
                        default:
                            return; // allow other keys to be handled
                    }
                });

                this.$menu.on('click keydown', 'a', function (e) {
                    if (e.type === 'click' || (e.keyCode || e.which) === 32) {
                        var emoji = $('.binf-label', $(this)).text();
                        window.setTimeout(function () {
                            self.onItemSelected.apply(self, [emoji]);
                        }, 0);
                        e.stopPropagation();
                        return false;
                    }
                });

                this.load();
            };

            EmojiMenu.prototype.onItemSelected = function (emoji) {
                this.emojiarea.insert(emoji);
                this.emojiarea.$editor.first().trigger("focus");
                this.hide();
            };

            EmojiMenu.prototype.load = function () {
                var html = [];
                var options = $.emojiarea.icons;
                var emojiTitle = $.emojiarea.iconsTitle;
                var path = $.emojiarea.path;
                if (path.length && path.charAt(path.length - 1) !== '/') {
                    path += '/';
                }
                //html.push(' <div class="emoji-arrow-up"></div>');
                for (var key in options) {
                    if (options.hasOwnProperty(key)) {
                        var iconTitle = emojiTitle[key];
                        html.push('<a href="javascript:void(0)" title="' + iconTitle + '">' +
                            EmojiArea.createIcon(key) + '<span class="binf-label">' +
                            util.htmlEntities(key) + '</span></a>');
                    }
                }

                this.$items.html(html.join(''));
            };

            EmojiMenu.prototype.reposition = function () {
                if (this.emojiarea !== null && this.emojiarea.options !== undefined &&
                    $(this.emojiarea.options.parent).find(".emoji-menu").length === 0) {
                    this.emojiarea.options.parent.append(this.$menu);
                }

                if (this.emojiarea !== null) {
                    var $button = this.emojiarea.$button;
                    var position = $button.position();
                    if (!!this.emojiarea.options.container) {
                        var buttonHeight = this.emojiarea.$button.outerHeight(),
                            containerHeight = getElementOffset(this.emojiarea.options.container).top,
                            emojiHeight = getElementOffset(this.emojiarea.$button).top,
                            emojiAreaLength = this.$menu.height();
                        // align pop-up menu in the top
                        if (emojiHeight - containerHeight > emojiAreaLength + buttonHeight) {
                            position.top = $button.outerHeight() - (emojiAreaLength + buttonHeight / 2);
                            //removing previously added class
                            this.$menu.removeClass('binf-bottom');
                            this.$menu.addClass('binf-top');
                        }
                        // align pop-up menu in the bottom (default)
                        else {
                            //removing previously added class
                            this.$menu.removeClass('binf-top');
                            this.$menu.addClass('binf-bottom');
                            position.top += $button.outerHeight();
                        }
                    }
                    // if the container is not provided alignment.(default i.e., bottom)
                    else {
                        position.top += $button.outerHeight();
                    }
                    position.left += Math.round($button.outerWidth() / 2);
                    if (i18n.settings.rtl) {
                        var right = $button.parent().outerWidth() - position.left;
                        this.$menu.css({
                            top: position.top,
                            right: right
                        });
                    }
                    else {
                        this.$menu.css({
                            top: position.top,
                            left: position.left
                        });
                    }

                }
            };

            EmojiMenu.prototype.hide = function (callback) {
                var util;
                if (this.emojiarea) {
                    util = this.emojiarea.options.util;
                    isStatus = this.emojiarea.options.isStatus;
                    this.emojiarea.menu = null;
                    this.emojiarea.$button.removeClass('on');
                    this.emojiarea = null;
                }
                //this.visible = false;
                //this.$menu.hide(100);
                this.$menu.remove();
                $(".esoc-social-comment-dialog-minheight").removeClass(
                    "esoc-social-comment-dialog-minheight");
                if (!isStatus) {
                    if (!!util) {
                        util.setCommentDialogPointer();
                    }
                }
                new myfunc();
            };

            EmojiMenu.prototype.show = function (emojiarea) {
                if (this.emojiarea && this.emojiarea === emojiarea) {
                    return;
                }
                this.emojiarea = emojiarea;
                this.emojiarea.menu = this;

                this.reposition();
                this.$menu.show();
                this.$menu.find('a:first').trigger("focus");
                this.visible = true;
            };

            var myfunc = function () {
                EmojiMenu.show = (function () {
                    var menu = null;
                    return function (emojiarea) {
                        menu = menu || new EmojiMenu();
                        menu.show(emojiarea);
                    };
                })();
            };
            new myfunc();

        })($, window, document);
        return $;
    });

csui.define('esoc/lib/jquery.emojiarea/packs/custom/emojis',['module', 'csui/lib/jquery', 'esoc/lib/jquery.emojiarea/jquery.emojiarea.custom'],
    function (module, $, emojiarea) {

      $.emojiarea.icons = {
        ':)': 'smile32.svg',
        ':D': 'grin32.svg',
        ':(': 'sad32.svg',
        'x(': 'angry32.svg',
        ';)': 'wink32.svg',
        ':-o': 'surprise32.svg',
        ':p': 'tounge32.svg',
        ':-s': 'worried32.svg',
        ':-/': 'confused32.svg',
        ':/)': 'eyebrows_raised32.svg',
        '(o)': 'oops32.svg',
        '(y)': 'thumbsup32.svg',
        '(n)': 'thumbsdown32.svg',
        '(*)': 'star32.svg',
        '(c)': 'coffee_break32.svg',
        '(q)': 'question32.svg',
        '(!)': 'exclamation32.svg'
      };
      //Below json is used to set the titles to Emoji icons.
      $.emojiarea.iconsTitle = {
        ':)': 'Smile    :)',
        ':D': 'Grin    :D',
        ':(': 'Sad    :(',
        'x(': 'Angry    x(',
        ';)': 'Wink    ;)',
        ':-o': 'Surprise    :-o',
        ':p': 'Tounge    :p',
        ':-s': 'Worried    :-s',
        ':-/': 'Confused    :-/',
        ':/)': 'Raised Eyebrow   :/)',
        '(o)': 'Oops    (o)',
        '(y)': 'Thumbs Up    (y)',
        '(n)': 'Thumbs Down    (n)',
        '(*)': 'Star    (*)',
        '(c)': 'Coffee    (c)',
        '(q)': 'Question    (q)',
        '(!)': 'Exclamation    (!)'
      }
});
csui.define('esoc/widgets/socialactions/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('esoc/widgets/socialactions/nls/root/lang',{
  comments: 'Comments',
  commentCount: 'comments',
  oneComment: 'comment',
  reply: 'Reply',
  replyCount: 'Reply ({0})',
  attachFile: 'Attach file',
  modifiedAt: 'Modified',
  update: 'Update',
  cancel: 'Cancel',
  commentBlank: '<strong>Oops.</strong> The comment field was blank.',
  post: 'Post',
  posting: 'Posting...',
  writeAComment: 'Write a comment',
  loadingComments: 'Loading comments...',
  deleteComment: 'Delete',
  edit: 'Edit',
  hide: 'Hide',
  confirmationText1: 'Are you sure that you want to delete this comment?',
  confirmationText2: 'All replies to the comment will also be deleted.',
  deleteCommentheader: 'Delete Comment',
  seeMoreReplies: 'Show more replies',
  fromContentServer: 'From Content Server',
  fromYourDesktop: 'From your desktop',
  attachmentPopoverTitle: 'Attachment',
  attachmentDeleteTitle: 'Delete Attachment',
  editAttachmentTitle: 'Edit Attachment',
  attachmentDeleteDescription: 'Are you sure you want to delete the attachment?',
  close: 'Close',
  uploadAttachment: 'Uploading Attachment',
  deleteReplyheader: 'Delete Reply',
  confirmationTextforReplyDelete: 'Are you sure that you want to delete this reply?',
  emoticon: 'Insert Emoji',
  errorOK: 'OK',
  Smile: 'Smile',
  Grin: 'Grin',
  Sad: 'Sad',
  Angry: 'Angry',
  Wink: 'Wink',
  Surprise: 'Surprise',
  Tounge: 'Tounge',
  Worried: 'Worried',
  Confused: 'Confused',
  RaisedEyebrow: 'Raised Eyebrow',
  Oops: 'Oops',
  ThumbsUp: 'Thumbs Up',
  ThumbsDown: 'Thumbs Down',
  Star: 'Star',
  Coffee: 'Coffee',
  Question: 'Question',
  Exclamation: 'Exclamation',
  targetPickerTitle: 'Select a Shortcut',
  versionMsg: "Added a new version ",
  version: "Version -",
  addMsg: "Added ",
  defaultErrorMessageForUpdateComment: 'Server Error: Unable to perform the action',
  defaultErrorMessageForUpdateWithAttachment: 'Server Error: Unable to perform the action',
  defaultErrorMessageForCreateRemoteObject: 'Server Error: Unable to perform the action',
  defaultErrorMessageForReply: 'Server Error: Unable to perform the action',
  defaultErrorMessageCommentsFetch: 'Server Error: Unable to perform the action',
  defaultErrorMessageUpdatePhoto: 'Server Error: Unable to perform photo update',
  defaultErrorMessageCommentSubmit: 'Server Error: Unable to post comment',
  more: 'more',
  less: 'less',
  noResults: 'No results found',
  itemNotExist: 'Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.'
});


csui.define('esoc/widgets/socialactions/socialemoticons',['module', 'csui/lib/jquery'],
    function(module, $) {
    
    $.socialEmoticons = {"icons":
        [{"shortcut":":)","image":"smile32.svg","key":"Smile","defaulttitle":"Smile    :)"},
        {"shortcut":":D","image":"grin32.svg", "key":"Grin", "defaulttitle":"Grin    :D"},
        {"shortcut":":(","image":"sad32.svg","key":"Sad", "defaulttitle":"Sad    :("},
        {"shortcut":"x(","image":"angry32.svg","key":"Angry", "defaulttitle":"Angry    x("},
        {"shortcut":";)","image":"wink32.svg","key":"Wink", "defaulttitle":"Wink    ;)"},
        {"shortcut":":-o","image":"surprise32.svg","key":"Surprise", "defaulttitle":"Surprise    :-o"},
        {"shortcut":":p","image":"tounge32.svg","key":"Tounge", "defaulttitle":"Tounge    :p"},
        {"shortcut":":-s","image":"worried32.svg","key":"Worried", "defaulttitle":"Worried    :-s"},
        {"shortcut":":-/","image":"confused32.svg","key":"Confused", "defaulttitle":"Confused    :-/"},
        {"shortcut":":/)","image":"eyebrows_raised32.svg","key":"RaisedEyebrow", "defaulttitle":"Raised Eyebrow   :/)"},
        {"shortcut":"(o)","image":"oops32.svg","key":"Oops", "defaulttitle":"Oops    (o)"},
        {"shortcut":"(y)","image":"thumbsup32.svg","key":"ThumbsUp", "defaulttitle":"Thumbs Up    (y)"},
        {"shortcut":"(n)","image":"thumbsdown32.svg","key":"ThumbsDown", "defaulttitle":"Thumbs Down    (n)"},
        {"shortcut":"(*)","image":"star32.svg","key":"Star", "defaulttitle":"Star    (*)"},
        {"shortcut":"(c)","image":"coffee_break32.svg","key":"Coffee", "defaulttitle":"Coffee    (c)"},
        {"shortcut":"(q)","image":"question32.svg","key":"Question", "defaulttitle":"Question    (q)"},
        {"shortcut":"(!)","image":"exclamation32.svg","key":"Exclamation", "defaulttitle":"Exclamation    (!)"}]
    }
});
csui.define('esoc/widgets/activityfeedwidget/impl/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

csui.define('esoc/widgets/activityfeedwidget/impl/nls/root/lang',{
  dialogTitle: 'Activity Feed',
  searchPlaceholder: 'Search in ActivityFeed',
  expandTitle:'Expand',

  // Note: use the exact 'column_key' for the client-side column titles
  name: "Step or task name",
  parent_id: "Workflow or task list name",
  versionMsg: "Added version ",
  modifiedAt: 'Modified',
  addMsg: "Added ",
  commentMsg: "Commented ",
  replyMsg: "Replied ",
  commentLabel: "Comment",
  status: "\u2019s status",
  version: "version",
  contentupdates: 'Content updates',
  statusupdates: 'Status updates',
  attributeupdates: 'Attribute updates',
  allusers: 'All users',
  iamfollowing: 'Users I am following',
  myfollowers: 'My followers',
  myupdates: 'My own updates',
  mentions: '@Mentions',
  myfavorites: 'My Favorites',
  activitytypes: 'Activity types',
  refineby: 'Refine by',
  updatesfrom: 'Updates from',
  allselectedlabel: 'Activity types (All)',
  emptyactivityfeed: "No activities found.",
  emptyactivityfeedforuserprofile: "No activities",
  more: "more",
  less: "less",
  comments: "Comments",
  newupdates: "New updates",
  statusfeed: "Status post",
  cancel: "Cancel",
  userProfileLink: "User Profile Link"
});



/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/impl/newupdates',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.newupdates : stack1), depth0))
    + "\" class=\""
    + this.escapeExpression(((helper = (helper = helpers.newUpdatesWrapperClass || (depth0 != null ? depth0.newUpdatesWrapperClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"newUpdatesWrapperClass","hash":{}}) : helper)))
    + "\" tabindex=\"0\" data-cstabindex=\"0\">\r\n  <span class=\"esoc-activityfeeed-new-updates\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.newupdates : stack1), depth0))
    + "</span>\r\n  <span title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "\" class=\"esoc-activityfeed-close\"></span>\r\n</div>";
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_impl_newupdates', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/common/util',['module',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'csui/lib/backbone',
      'esoc/lib/jquery.emojiarea/packs/custom/emojis',
      'csui/models/node/node.model',
      'csui/models/nodechildren',
      'csui/utils/log',
      'csui/utils/commands',
      'csui/utils/contexts/factories/connector',
      'csui/utils/contexts/factories/user',
      'csui/utils/contexts/factories/member',
      'i18n!esoc/widgets/socialactions/nls/lang',
      'csui/dialogs/modal.alert/modal.alert',
      'esoc/widgets/socialactions/socialemoticons', 'csui/utils/namedsessionstorage',
      'csui/utils/url',
      'csui/behaviors/keyboard.navigation/tabable.region.behavior',
      'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
      'hbs!esoc/widgets/activityfeedwidget/impl/newupdates',
      'csui/lib/jquery.binary.ajax'

    ],
    function (module, $, _, Backbone, Emojis, NodeModel, NodeChildrenCollection, Log,
        Commands, ConnectorFactory, UserModelFactory, MemberModelFactory, Lang, ModalAlert,
        SocialEmoji,
        NamedSessionStorage, Url, TabableRegionBehavior, afLang, NewUpdatesButtonTemplate) {

      var Utils = {

        globalConstants: {
          MAX_ID: "max_id",
          SINCE_ID: "since_id",
          MAX_CHAR_LIMIT: 1000,
          REPLY_COUNT: 'reply_count',
          REQUEST_TYPE_ATTACHMENT_DELETE: 'AttachmentDelete',
          FETCH_NEXT_PAGE_MODELS_LENGTH: 5,
          SHOW_SEE_MORE_MODELS_LENGTH: 4,
          DOCUMENT_ATTACHMENT_SUBTYPE: 144,
          SHORTCUT_ATTACHMENT_SUBTYPE: 1,
          ROI_OBJECT_TYPE: 952,
          MEMBERS: "/members/",
          PHOTO: "/photo",
          USERID: "userid",
          USERDETAILS: "userdetails",
          ESOCIAL_USER_INFO: "esoc-user-info",
          EMOJI_URL: "/socialfeed/app/lib/jquery.emojiarea/packs/custom",
          PULSE_RESOURCE_COUNT: 10,
          FRIENDS: "friends",
          FOLLOWERS: "followers",
          INCLUDES: "includes",
          EXTENDEDINFO: "extendedInfo",
          CHAT_SEETING: "chatSetting",
          CHAT_SEETINGS: "chatSettings",
          FIELD_MAX_CHAR_LIMIT: "maxCharLimit",
          UPDATE_EXTENDED_INFO: "updateExtendedInfo",
          FIELDS: "fields",
          COUNT: "count",
          SETTINGS: "settings",
          USER_PRIVACY_SETTINGS: ["everyone", "follow", "nobody"],
          FOLLOW: "follow",
          UNFOLLOW: "unfollow",
          ACTION: "action",
          UPDATE_SETTINGS_ACTION: "updateSettings",
          CONTENT_PRIVACY: "contentPrivacy",
          STATUS_PRIVACY: "statusPrivacy",
          EXPAND: "expand",
          MEMBER: "member",
          HTTP_LINK: "http://",
          event_bus: _.extend({}, Backbone.Events),
          URI_DELIMITER: ":",
          AT_SIGN_SYMBOL: "@",
          URI_PREFIX: "sip"

        },

        REST_URLS: {
          csGetCommentRESTUrl: '/pulse/statuses/public_timeline?includes=actions,reply_count,user_info&excludes=replies&count=5&',
          csPostCommentRESTUrl: '/pulse/statuses/update',
          csGetROI: '/objectsocialinfo?',
          csCreateROI: '/remote_objects',
          csGetAFSinceId: '/pulse/statuses/socialactivity?where_feedtype=',
          membersRESTUrl: '/members?where_type=0',
          chatHistoryUrl: '/members/',
          pulseRestUrl: '/pulse/members/',
          pulseInfoRestUrl: "/pulse_info",
          updatePhotoUrl: "/pulse/upload_profile_photo",
          pulseSettingsUrl: "/pulse/settings",
          searchUsersUrl: '/pulse/searchUsers',
          deletePhotoUrl: '/pulse/members/photo'
        },

        config_settings: {
          'feedsAutoRefreshWait': 60000,
          'maxMessageLength': 1000,
          'maxNumOfEntries': 20,
          'visibility': "on"
        },
        lang: Lang,
        log: Log,

        /**
         * This method will change the http link in the message into clickable URL
         * @param args = {message}
         */
        onClickableUrl: function (message, showLink) {
          message = message.replace(/<img/gi, ' <img');
          message = message.replace(/&nbsp;/gi, ' ');
          var regexp      = /(https?:\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?)/gi,
              imgUrlRegEx = /https?:\/\/\S+\.(svg)/gi,
              imgMatch    = message.match(imgUrlRegEx);

          if (!!imgMatch && imgMatch.length > 0) {
            message = message.replace(/.svg"/gi, '.svg" ');
          }
          var matches    = message.match(regexp),
              tmp        = message,
              newMessage = '',
              ids        = 0, replaceIds = 1, matchIndex = 0;

          if (matches !== null && matches.length > 0) {
            for (ids = 0; ids < matches.length; ids++) {
              matchIndex = tmp.indexOf(matches[ids]);

              if (matchIndex > 0) {
                newMessage += tmp.substring(0, matchIndex);
              }
              var urlMessageContent = matches[ids].split("&lt;");
              if (urlMessageContent[0].indexOf($.emojiarea.path) !== 0 || !!showLink) {
                if (urlMessageContent[0].length > 30) {
                  urlMessageContent[0] = this.revHtmlEntities(urlMessageContent[0]);
                  newMessage += '<a href=\"' + urlMessageContent[0] +
                                '\" onclick=\"window.open(this.href,\'_blank\');return false;\" >' +
                                this.decodeHtmlEntities(urlMessageContent[0].substring(0, 30)) +
                                '...</a>';
                }
                else {
                  newMessage += '<a href=\"' + urlMessageContent[0] +
                                '\" onclick=\"window.open(this.href,\'_blank\');return false;\" >' +
                                urlMessageContent[0] + '</a>'
                }

                for (replaceIds = 1; replaceIds < urlMessageContent.length; replaceIds++) {
                  newMessage += '&lt;' + urlMessageContent[replaceIds];
                }

              } else {
                newMessage += urlMessageContent[0];
              }

              tmp = tmp.substring(matchIndex + matches[ids].length);
            }

            newMessage += tmp;
          }
          else {
            newMessage = message;
          }

          return newMessage;
        },

        getEmojiPath: function (connector) {
          var self          = this,
              connObj       = connector.connection,
              connectionUrl = new Url(connObj.url),
              prefixUrl     = connectionUrl.getOrigin(),
              emojiUrl      = prefixUrl + connObj.supportPath +
                              self.globalConstants.EMOJI_URL;
          return emojiUrl;
        },

        //Our own emoji's
        createEmojiIcons: function () {
          var iconObj  = new Object({}),
              that     = this,
              titleObj = new Object({});
          $.each($.socialEmoticons.icons, function (key, value) {
            iconObj[value.shortcut] = value.image;
            if (that.lang[value.key]) {
              titleObj[value.shortcut] = that.lang[value.key] + "  " + value.shortcut;
            } else {
              titleObj[value.shortcut] = value.defaulttitle;
            }
          });
          $.emojiarea.icons = iconObj;
          $.emojiarea.iconsTitle = titleObj;
        },
        addEmoji: function (_element, isUrlElipse, connector) {
          var commentContent = _element.html();
          var emojis = $.emojiarea.icons;
          for (var key in emojis) {
            if (emojis.hasOwnProperty(key)) {
              commentContent = commentContent.replace(
                  new RegExp((key + '').replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1'), 'g'),
                  this.createIcon(key, connector));
            }
          }
          if (isUrlElipse) {
            _element[0].innerHTML = this.onClickableUrl(commentContent);
          } else {
            _element[0].innerHTML = commentContent;
          }
        },
        preventDrop: function (_element) {
          _element.on('drop', function (event) {
            event.preventDefault();
            return false;
          });
        },
        createIcon: function (emoji, connector) {
          $.emojiarea.path = this.getEmojiPath(connector);
          var filename = $.emojiarea.icons[emoji];
          var path = $.emojiarea.path || '';
          if (path.length && path.charAt(path.length - 1) !== '/') {
            path += '/';
          }
          var emojiTitle = $.emojiarea.iconsTitle;
          var displayIconTitle = emojiTitle[emoji];
          return "<img src='" + path + filename + "' title='" +
                 this.htmlEntities(displayIconTitle) + "' alt='" + this.htmlEntities(emoji) + "'>";
        },
        htmlEntities: function (str) {
          var txt = document.createElement("textarea");
          txt.innerHTML = str;
          return String(txt.value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g,
              '&gt;').replace(/"/g, '&quot;');
        },
        /**
         * Opens the warning dialog based on the arguments.
         * on clicking ok button, hides the dialog
         * @param args = {parent, errorContent}
         */
        openWarningDialog: function (args) {
          $(args.parent).append($("#mdAlert"));
          ModalAlert.showWarning(this.replaceBreakTagWithNewLine(args.errorContent));
          $("#mdAlert .btn-close, #mdAlert .binf-close").on("click", function () {
            $("body").append($("#mdAlert"));
          });
        },

        /**
         * Opens the error dialog based on the arguments.
         * on clicking ok button, hides the dialog
         * @param args = {parent, errorContent}
         */
        openErrorDialog: function (args) {
          $(args.parent).append($("#mdAlert"));
          ModalAlert.showError(this.replaceBreakTagWithNewLine(args.errorContent));
          $("#mdAlert .btn-close, #mdAlert .binf-close").on("click", function () {
            $("body").append($("#mdAlert"));
          });
        },

        /**
         * This method replaces break tags with new line for the given string.
         * @param args = {content}
         */
        replaceBreakTagWithNewLine: function (content) {
          if (content) {
            var breakTagRegEx = /<br\s*[\/]?>/gi;
            return content.replace(breakTagRegEx, '\n');
          } else {
            return "";
          }
        },
        /**
         * Checks if the current browser is Chrome or not
         * @return: boolean
         */
        isChrome: function () {
          var isChrome = false,
              ua       = window.navigator.appVersion;
          isChrome = ua.indexOf('Chrome') > 0;
          return isChrome;
        },
        /**
         * Checks if the current browser is IE or not
         * @return: boolean
         */
        isIE: function () {
          var isIE = false,
              ua   = window.navigator.userAgent;
          isIE = ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;
          return isIE;
        },
        onCommentFormPaste: function (e, existingLength, maxChars) {
          var content;
          e.preventDefault();
          if (e.originalEvent.clipboardData) {
            content = (e.originalEvent || e).clipboardData.getData('text/plain');
            if (content.length + existingLength > maxChars) {
              content = content.substr(0, (maxChars - existingLength));
            }
            document.execCommand('insertText', false, content);
          } else if (window.clipboardData) { // for IE
            content = window.clipboardData.getData('Text');
            if (content.length + existingLength > maxChars) {
              content = content.substr(0, (maxChars - existingLength));
            }
            document.execCommand("AutoUrlDetect", false, false);
            if (window.getSelection) {
              window.getSelection().getRangeAt(0).insertNode(document.createTextNode(content));
              window.getSelection().removeAllRanges();
            }
          }
        },
        /**
         * Used to fill default options for activityfeed widgets
         * Keep update this function when new default options adds
         * @param options
         */
        fillDefaultActivityOptions: function (options) {
          var defalutOpt = options.data ? options.data : options;
          if (defalutOpt) {
            if (defalutOpt.feedtype === undefined) {
              defalutOpt.feedtype = "all";
            }
            if (defalutOpt.feedsource === undefined) {
              defalutOpt.feedsource = {"source": "all"};
            }
            if (defalutOpt.feedSettings === undefined) {
              defalutOpt.feedSettings = {"enableComments": true};
            }
            if (defalutOpt.updatesfrom === undefined) {
              defalutOpt.updatesfrom = {"from": "all"};
            }

          }
          options = defalutOpt;
        },
        /**
         * Used to build unique id to differentiate between activityfeeds
         * @param options
         */
        getActivityWidgetId: function (options) {
          var activityFeedUID = "";
          var activityOptions = options.data ? options.data : options;
          if (activityOptions) {
            if (activityOptions.feedtype !== undefined) {
              activityFeedUID = "ft";
              if (activityOptions.feedtype.indexOf("all") > -1) {
                activityFeedUID += "_a";
              }
              if (activityOptions.feedtype.indexOf("content") > -1) {
                activityFeedUID += "_c";
              }
              if (activityOptions.feedtype.indexOf("status") > -1) {
                activityFeedUID += "_s";
              }
              if (activityOptions.feedtype.indexOf("attributes") > -1) {
                activityFeedUID += "_at";
              }
            }
            if (activityOptions.feedsource !== undefined) {
              activityFeedUID += "_fs_";
              if (activityOptions.feedsource.source !== undefined) {
                activityFeedUID += activityOptions.feedsource.source;
              }
              if (activityOptions.feedsource.id !== undefined) {
                activityFeedUID += activityOptions.feedsource.id;
              }
            }
            activityFeedUID += "_fst_";
            if (activityOptions.feedSettings !== undefined &&
                activityOptions.feedSettings.enableComments) {
              activityFeedUID += "ec";
            }
            if (activityOptions.feedSettings !== undefined &&
                activityOptions.feedSettings.enableFilters) {
              activityFeedUID += "ef";
            }
            if (activityOptions.enableComments !== undefined && activityOptions.enableComments) {
              activityFeedUID += "ec";
            }
            if (activityOptions.enableFilters !== undefined && activityOptions.enableFilters) {
              activityFeedUID += "ef";
            }
            if (activityOptions.updatesfrom !== undefined) {
              activityFeedUID += "_uf_";
              if (activityOptions.updatesfrom.from !== undefined) {
                activityFeedUID += activityOptions.updatesfrom.from;
              }
              if (activityOptions.updatesfrom.id !== undefined) {
                activityFeedUID += activityOptions.updatesfrom.id;
              }
            }
            if (activityOptions.wrapperClass !== undefined) {
              activityFeedUID += "_hr_";
            }
            if (activityOptions.origin !== undefined) {
              activityFeedUID += "_org_" + activityOptions.origin;
            }
            if (activityOptions.honorfeedsource !== undefined) {
              activityFeedUID += "_hfs_" + activityOptions.honorfeedsource;
            }
          }
          return activityFeedUID;
        },

        navigationWithArrowKeys: function (view, className) {
          var allAnchorElems, firstAnchorElement, focusables, activeElement, self = this;

          allAnchorElems = view.$el.find(".esoc-activityfeed-list-item a").filter(
              ":visible");
          allAnchorElems.prop("tabindex", "-1").attr("data-cstabindex", "-1");
          firstAnchorElement = view.$el.find(".esoc-activityfeed-list-item:first div a:first");
          if (firstAnchorElement && firstAnchorElement.length) {
            firstAnchorElement.prop("tabindex", "0").attr("data-cstabindex", "0");
            activeElement = firstAnchorElement
          }

          focusables = view.$el.find('*[data-cstabindex=0]');
          if (focusables.length) {
            focusables.prop('tabindex', 0);
          }

          view.$el.find(className).on("keydown", ".esoc-activityfeed-list-item",
              function (event) {
                var parentElement   = event.currentTarget,
                    sourceElement   = event.target,
                    childrens       = $(parentElement).find("div a:not(.esoc-hide-element)"),
                    childrensLength = childrens.length,
                    requiredEle, i, nextElement;

                if (event.keyCode === 9) {
                  var userProfileView = view.options.userProfileView
                  if (userProfileView) {
                    nextElement = userProfileView.$el.find(
                        "ul.esoc-user-profile-tabcontainer li").eq(
                        userProfileView.options.tabIndex + 1);
                    if (nextElement.children() && nextElement.children().eq(0)) {
                      event.preventDefault();
                      event.stopPropagation();
                      nextElement.children().eq(0).trigger("focus");
                    }
                    view.$el.find("[tabindex=" + (userProfileView.options.tabIndex) + "]").filter(
                        ":visible").prop("tabindex", "-1");
                  }
                }

                if (event.keyCode === $.ui.keyCode.DOWN) {
                  for (i = 0; i < childrensLength; i++) {
                    if (childrens[i] === sourceElement) {
                      requiredEle = childrens[i + 1];
                      break;
                    }
                  }
                  if (i === childrensLength - 1 && !requiredEle) {
                    nextElement = $(parentElement).next()
                    requiredEle = $(nextElement).find("div a:first");
                  }
                  /* Below if statement is required for activityfeed expanded view.  There will be one new div tag
                   (<div class="activityfeed-expand-invisiblebutton-ft_a_fs_all_fst_ecef_uf_all"></div>)
                   added before new ".esoc-activityfeed-list-item" class div's
                   which loaded dynamically , So skipped that one div here using again next or prev.
                   */
                  if (requiredEle && !$(requiredEle).length) {
                    nextElement = $(nextElement).next()
                    requiredEle = $(nextElement).find("div a:first");
                  }
                } else if (event.keyCode === $.ui.keyCode.UP) {
                  for (i = 0; i < childrensLength; i++) {
                    if (childrens[i] === sourceElement) {
                      requiredEle = childrens[i - 1];
                      break;
                    }
                  }
                  if (i === 0 && !requiredEle) {
                    nextElement = $(parentElement).prev()
                    requiredEle = $(nextElement).find("div a:not(.esoc-hide-element):last");
                  }
                  if (requiredEle && !$(requiredEle).length) {
                    nextElement = $(nextElement).prev()
                    requiredEle = $(nextElement).find("div a:not(.esoc-hide-element):last");
                  }
                }
                if ($(requiredEle).length) {
                  self.moveFocusFromSrcToDest(view, $(sourceElement), $(requiredEle));
                  activeElement = $(requiredEle);
                  event.preventDefault();
                }
              }
          );

          var firstFilterClass = '.csui-facet:first [data-cstabindex="0"],.csui-facet:first [data-cstabindex="-1"]';
          var lastFilterClass = '.csui-facet:last [data-cstabindex="0"],.csui-facet:last [data-cstabindex="-1"]';
          var filterArr = [];
          if (view.options.origin !== "userwidget") {
            filterArr.push(firstFilterClass);
            filterArr.push(lastFilterClass);
          } else {
            filterArr.push(firstFilterClass);
          }

          filterArr.forEach(function (filterClass) {
            view.$el.find(filterClass).on('focus',
                function (event) {
                  var target = $(event.target), sourceElement;
                  if (target.is(":visible")) {
                    if (event.hasOwnProperty('originalEvent') &&
                        target.attr("data-cstabindex") === "-1") {
                      sourceElement = view.$el.find('.csui-facet:first input[data-cstabindex="0"]')
                      self.moveFocusFromSrcToDest(view, sourceElement, target, true);
                    } else {
                      self.addTabableClass(view, $(event.target));
                    }
                  }
                }
            );
          });

          view.$el.find(className).on("focus", ".esoc-activityfeed-list-item",
              function (event) {
                var target = $(event.target)
                if (target.is(":visible")) {
                  if (!activeElement) {
                    activeElement = view.$el.find(
                        '.esoc-activityfeed-list-item [data-cstabindex="0"]')
                  }
                  if (event.hasOwnProperty('originalEvent') &&
                      target.attr("data-cstabindex") === "-1") {
                    self.moveFocusFromSrcToDest(view, activeElement, target, true);
                  } else {
                    self.addTabableClass(view, target);
                  }
                  activeElement = target;
                }
              }
          );
        },

        moveFocusFromSrcToDest: function (view, sourceEle, destEle, isFocus) {
          if (sourceEle[0] === destEle[0]) {
            this.addTabableClass(view, destEle);
            return;
          }
          if (sourceEle.prop("tabindex") === -1) {
            destEle.prop("tabindex", "0").attr("data-cstabindex", "0");
          } else {
            destEle.prop("tabindex", sourceEle.prop("tabindex")).attr("data-cstabindex", "0");
          }
          sourceEle.prop("tabindex", "-1").attr("data-cstabindex", "-1");

          this.addTabableClass(view, destEle);
          if (!isFocus) {
            destEle.trigger("focus");
          }
        },
        addTabableClass: function (view, destEle) {
          var tempView;
          var userProfileView = view.options.userProfileView
          if (userProfileView) {
            tempView = userProfileView.options;
          } else {
            tempView = view;
          }
          tempView.focusedElement &&
          tempView.focusedElement.removeClass(
              TabableRegionBehavior.accessibilityActiveElementClass);
          destEle.addClass(TabableRegionBehavior.accessibilityActiveElementClass);
          tempView.focusedElement = destEle;
        },

        getUserProfileRestApiURL: function (connectionURL, userId) {
          var url = connectionURL + this.globalConstants.MEMBERS + userId +
                    this.globalConstants.PHOTO;
          return url;
        },
        getUserPhotoURL: function (options) {
          var dfd                 = $.Deferred(),
              getAbsolutePhotoUrl = function (userModel) {
                return Url.combine(new Url(options.connectionURL).getCgiScript(),
                    userModel.attributes.photo_url);
              };
          // if user model contains `photo_url` attribute, let's not trigger REST API, make use it.
          if (options.userModel && options.userModel.attributes.hasOwnProperty('photo_url')) {
            var url = !!options.userModel.get('photo_url') ?
                      getAbsolutePhotoUrl(options.userModel) : '';
            dfd.resolve(url);
          } else {
            var userWidgetModel = this.getUserWidgetModel(options);
            if (options.noCache) {
              userWidgetModel.fetch().done(function () {
                dfd.resolve(getAbsolutePhotoUrl(userWidgetModel));
              });
            } else {
              userWidgetModel.ensureFetched().done(function () {
                dfd.resolve(getAbsolutePhotoUrl(userWidgetModel));
              });
            }
          }
          return dfd;
        },
        updateQueryStringValues: function (uri, key, value) {
          var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i"); // Alternate RegEx Patter/([?&]z)=([^#&]*)/g
          var separator = uri.indexOf('?') !== -1 ? "&" : "?";
          if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
          }
          else {
            return uri + separator + key + "=" + value;
          }
        },
        decodeHtmlEntities: function (str) {
          return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g,
              '&gt;').replace(/"/g, '&quot;');
        },
        revHtmlEntities: function (str) {
          return String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g,
              '>').replace(/&quot;/g, '"');
        },
        updateAjaxCall: function (args) {
          var self                = this,
              that                = args.itemview,
              url                 = args.url,
              currentNodeModel    = args.currentNodeModel,
              requestType         = args.requestType,
              photoUserId         = args.userId || (that && that.model.get('id')),
              targetElement       = args.targetElement,
              photoElement        = args.photoElement,
              defaultPhotoElement = args.defaultPhotoElement,
              data                = args.data,
              type                = args.type,
              imageElement        = args.imageElement,
              clearBlobContent    = function () {
                var userFactories = that.options.context &&
                                    that.options.context.getFactory(UserModelFactory);
                if (that && userFactories) {
                  userFactories.options[photoUserId] && (userFactories.options[photoUserId] = "");
                  userFactories.options[photoUserId + "_blob_content"] &&
                  (userFactories.options[photoUserId + "_blob_content"] = "");
                }
              },
              connector           = args.connector;
          connector.authenticator.syncStorage();
          $.ajax(connector.extendAjaxOptions({
            url: url,
            type: type,
            data: data,
            contentType: false,
            crossDomain: true,
            processData: false,
            success: function (response, status, jXHR) {
              switch (requestType) {
              case "updatePhoto":
                clearBlobContent();
                that.$el.find(
                    ".esoc-userprofile-actions .esoc-profile-img-load-container").removeClass(
                    "esoc-progress-display");
                that.$el.find(".esoc-userprofile-actions .esoc-full-profile-avatar").removeClass(
                    "esoc-profile-opacity");
                that.$el.find($("#esoc-profilepic-desktop-attachment")).val("");
                var userProfilePicOptions = {
                  noCache: true,
                  connector: connector,
                  userid: that.options.userid,
                  context: that.options.context
                }
                self.setProfilePic(userProfilePicOptions);
                var user = that.options.context.getModel(UserModelFactory);
                var dfd = self.getUserPhotoURL({
                  "context": userProfilePicOptions.context,
                  "noCache": userProfilePicOptions.noCache,
                  "connectionURL": connector.connection.url,
                  "userid": userProfilePicOptions.userid
                });
                dfd.promise().done(function (url) {
                  user.attributes.photo_url = url.replace(
                      new Url(connector.connection.url).getCgiScript(), "");
                  if (that.$el.find('.esoc-simple-user-widget').length > 0 && !!that.model) {
                    that.model.attributes.photo_url = url.replace(
                        new Url(connector.connection.url).getCgiScript(), "");
                  }
                  user.trigger("change");
                  $(".esoc-simple-profile-img-load-container").removeClass(
                      "esoc-simple-profile-img-load-icon");
                });
                that.$el.find($("#esoc-profilepic-desktop-attachment")).val("");
                break;
              case "deletePhoto":
                clearBlobContent();
                userProfilePicOptions = {
                  noCache: true,
                  connector: connector,
                  userid: that.options.userid,
                  context: that.options.context
                }
                self.setProfilePic(userProfilePicOptions);
                user = that.options.context.getModel(UserModelFactory);
                dfd = self.getUserPhotoURL({
                  "context": userProfilePicOptions.context,
                  "noCache": userProfilePicOptions.noCache,
                  "connectionURL": connector.connection.url,
                  "userid": userProfilePicOptions.userid
                });
                dfd.promise().done(function (url) {
                  user.attributes.photo_url = url.replace(
                      new Url(connector.connection.url).getCgiScript(), "");
                  that.$el.find(".esoc-userprofile-default-avatar").css("display", "inline-flex");
                  if (that.$el.find('.esoc-simple-user-widget').length > 0 && !!that.model) {
                    that.model.attributes.photo_url = url.replace(
                        new Url(connector.connection.url).getCgiScript(), "");
                  }
                  user.trigger("change");
                });
                break;
              case "updateCommentCount":
                var nodeProperties = response.results && response.results.data &&
                                     response.results.data.properties;
                if (!!nodeProperties) {
                  self.updateCommentCount({
                    currentNodeModel: currentNodeModel,
                    commentCount: nodeProperties.wnd_comments
                  });
                }
                break;
              case "getCommentCount":
                var properties = response.results && response.results[0] &&
                                 response.results[0].data && response.results[0].data.properties;
                if (!!properties) {
                  self.updateCommentCount({
                    currentNodeModel: currentNodeModel,
                    commentCount: properties.wnd_comments
                  });
                }
                break;
              default :
                break;
              }
            },
            error: function (xhr, status, text) {
              switch (requestType) {
              case "updatePhoto":
                that.$el.find(
                    ".esoc-userprofile-actions .esoc-profile-img-load-container").removeClass(
                    "esoc-progress-display");
                that.$el.find(".esoc-userprofile-actions .esoc-full-profile-avatar").removeClass(
                    "esoc-profile-opacity");
                that.$el.find("#esoc-profilepic-desktop-attachment").val("");
                var photoErrorArgs = {
                  parent: targetElement,
                  errorContent: xhr.responseJSON ?
                                ( xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                  xhr.responseJSON.error) : self.lang.defaultErrorMessageUpdatePhoto
                };
                self.openErrorDialog(photoErrorArgs);
                break;
              default :
                break;
              }
            }
          }));
        },
        /**
         * Updates the comment count in table cell widget
         *
         * @param args - currentNodeModel table cell model
         *             - commentCount count to be updated
         *
         */
        updateCommentCount: function (args) {
          var currentNodeModel = args.currentNodeModel,
              commentCount     = args.commentCount;
          currentNodeModel.attributes.wnd_comments = commentCount;
          if (commentCount !== undefined) {
            var commentNumberSpan = $(
                ".wnd_comments_validated[data-csid='" + currentNodeModel.attributes.id + "']");
            var commentSpan = $(
                ".esoc-socialactions-comment[data-value='" + currentNodeModel.attributes.id + "']");
            if (commentCount > 1) {
              commentNumberSpan.attr("title", commentCount + " " + Lang.commentCount);
              commentSpan.attr("aria-label", commentCount + " " + Lang.commentCount);
            } else {
              if (commentCount === 1) {
                commentNumberSpan.attr("title", commentCount + " " + Lang.oneComment);
                commentSpan.attr("aria-label", commentCount + " " + Lang.oneComment);
              } else {
                commentNumberSpan.attr("title", "");
                commentSpan.attr("aria-label", Lang.comments);
              }
            }
            if (commentCount > 0) {
              commentCount = commentCount > 99 ? '99' + '+' : commentCount;
              commentNumberSpan.html(commentCount);
            } else {
              commentNumberSpan.html("");
            }
          }
        },
        /**
         * Sets the profile picture for the given photoElement if it is passed otherwise sets the
         * profile picture for all the elements whose classname is $(".esoc-userprofile-img-"+userId)
         * @param options *userId
         *                *context
         *                defaultPhotElement
         *                photoElement
         *                photoUrl
         */
        setProfilePic: function (options) {
          var context       = options.context,
              connector     = options.context.getObject(ConnectorFactory),
              connObj       = connector.connection,
              connectionUrl = new Url(connObj.url),
              dfd           = this.getUserPhotoURL({
                "context": options.context,
                "noCache": options.noCache,
                "connectionURL": connObj.url,
                "userid": options.userid,
                "userModel": options.userModel
              });

          dfd.promise().done(function (url) {
            var photoElement       = !!options.photoElement ? options.photoElement :
                                     $(".esoc-userprofile-img-" + options.userid),
                defaultPhotElement = !!options.defaultPhotElement ? options.defaultPhotElement :
                                     $(".esoc-user-default-avatar-" + options.userid);
            if (url && url.match(/v=/)) {

              var _resolvePhoto = function (photoUrl) {
                var dfdPhoto          = $.Deferred(),
                    userid            = options.userid,
                    userFactories     = context && context.getFactory(UserModelFactory),
                    userFactoriesId   = userFactories && userFactories.options[userid];
                if (!userFactoriesId || !userFactoriesId.length) {
                  // Profile pic not available.
                  userFactories.options[userid] = [];
                  userFactories.options[userid].push(function(photo) {
                    dfdPhoto.resolve(photo, photoElement, defaultPhotElement);
                  });
                  connector.makeAjaxCall({
                    url: photoUrl,
                    dataType: 'binary',
                    connection: connObj
                  }).done(function (response) {
                    var userIdBlobContent = URL.createObjectURL(response);
                    userFactories.options[userid + "_blob_content"] = userIdBlobContent;
                    _.each(userFactories.options[userid], function(photoCallback){
                      photoCallback(userIdBlobContent);
                    });
                    userFactories.options[userid] = [];
                  }).fail(dfdPhoto.reject);
                } else if (!userFactories.options[userid + "_blob_content"]) {
                  // Profile Pic requested. Wait in queue for response
                  userFactories.options[userid].push(function(photo) {
                    dfdPhoto.resolve(photo, photoElement, defaultPhotElement);
                  });
                } else {
                  // Profile pic available
                  dfdPhoto.resolve(userFactories.options[userid + "_blob_content"],
                      photoElement, defaultPhotElement);
                }
                return dfdPhoto.promise();
              };

              _resolvePhoto(url).done(function (photoBlob, photoElement, defaultPhotElement) {
                defaultPhotElement.hide();
                photoElement.show();
                photoElement.removeClass("binf-hidden");
                photoElement.attr("src", photoBlob);
                if (options.viewShownEvent) {
                  options.parentView && options.parentView.trigger("view:shown");
                }
              }).fail(function () {
                photoElement.hide();
                photoElement.removeClass("binf-hidden");
                defaultPhotElement.addClass("esoc-user-show-profilepic");
                defaultPhotElement.css("display", "inline-flex");
                defaultPhotElement.removeClass("binf-hidden");
                if (options.viewShownEvent) {
                  options.parentView && options.parentView.trigger("view:shown");
                }
              });

            } else {
              photoElement.hide();
              photoElement.removeClass("binf-hidden");
              defaultPhotElement.addClass("esoc-user-show-profilepic");
              defaultPhotElement.css("display", "inline-flex");
              defaultPhotElement.removeClass("binf-hidden");
              if (options.viewShownEvent) {
                options.parentView && options.parentView.trigger("view:shown");
              }
            }
          });
        },
        setUserColor: function (options) {
          var defaultPhotElement = !!options.defaultPhotElement ? options.defaultPhotElement :
                                   $(".esoc-user-default-avatar-" + options.userid);
          (options.userbackgroundcolor && defaultPhotElement) ?
          defaultPhotElement.css("background", options.userbackgroundcolor) : "";
        },
        /**
         * Triggers the default action on the given object
         *  if type document it will open/download
         *  if type is container opens the container in nodes table view
         * @param objectArgs
         *        node   node model object
         *        callingViewInstance  reference from where openItem is called
         */
        openItem: function (objectArgs) {
          var that       = this,
              node       = objectArgs.node,
              currentObj = objectArgs.callingViewInstance;
          var isShortcut = !!node.original && node.original.get("id") > 0;
          if (node.get("container") || (node.get("type") === 5574) ||
              isShortcut && (node.original.get("container") ||
                             node.original.get("type") === 258)) {
            // close the user widget if in open state
            $(".esoc-user-widget-dialog .cs-close").trigger("click");
            // close the commenting widget if in open state
            that.unbindWidget();
            // close the  activity feed maximised view if in open state
            $(".activityfeed-expand .cs-close").trigger('click');
          }
          currentObj.triggerMethod('execute:defaultAction', node);
        },
        getV2Url: function (url) {
          return url.replace('/v1', '/v2');
        },
        /**
         * this method removes the comment dialog from dom.
         * @param args = {input, pos}
         */
        unbindWidget: function (commentDialogOptions) {
          if (commentDialogOptions && commentDialogOptions.activityfeeditem) {
            if (commentDialogOptions.commentAction) {
              delete commentDialogOptions["commentAction"];
              commentDialogOptions.activityfeeditem.trigger("commentdialog:action");
            } else {
              commentDialogOptions.activityfeeditem.trigger("start:notification");
            }
          }
          $("[id*=esoc-social-comment-widget]").remove();
          $("[id*=esoc-social-comment-widget-pointer]").remove();
          $("[id*=esoc-social-comment-widget-mask]").remove();
          $(".cs-expanded.activityfeed-expand.esoc").prop("disabled", false);
        },
        isTextOverflown: function (ele) {
          var el  = ele[0] || ele, // send only DOM element if its jquery.
           curOverflow = el.style.overflow;
          if (!curOverflow || curOverflow === "visible") {
            el.style.overflow = "hidden";
          }
          var isOverflowing = (el.clientWidth + 5) < el.scrollWidth
                              || (el.clientHeight + 5) < el.scrollHeight;
          el.style.overflow = curOverflow;
          return isOverflowing;
        },

        showMoreContent: function (e, moreView, _textEle) {
          var _lessEle     = $(moreView.$el.find(".esoc-see-less").eq(0)),
              _moreEle     = $(moreView.$el.find(".esoc-see-more").eq(0)),
              _textElement = $(_textEle).eq(0);
          /* Generally .show() method appends the default style
          of the element's DISPLAY property as a inline css. If the element is set to DISPLAY:NONE
          it will append DISPLAY:BLOCK as a inline css, which will make the element
          wraps to next line, so removing style attribute which has DISPLAY: NONE property
          and allowing external css take charge with DISPLAY : INLINE. */
          $(_lessEle).removeAttr("style");
          $(_lessEle).show().removeClass("esoc-hide-element").trigger("focus");
          $(_moreEle).hide().addClass("esoc-hide-element");
          $(_textElement).removeClass("esoc-see-more-content");
          moreView.options.parentCollectionView.triggerMethod('update:scrollbar');
          $(_textElement).removeClass("esoc-see-more-activity");
          $(_textElement).addClass("esoc-see-less-activity");
        },

        showLessContent: function (e, lessView, _textEle) {
          var _lessEle     = $(lessView.$el.find(".esoc-see-less").eq(0)),
              _moreEle     = $(lessView.$el.find(".esoc-see-more").eq(0)),
              _textElement = $(_textEle).eq(0);
          $(_lessEle).hide().addClass("esoc-hide-element");
          /* Generally .show() method appends the default style
          of the element's DISPLAY property as a inline css. If the element is set to DISPLAY:NONE
          it will append DISPLAY:BLOCK as a inline css, which will make the element
          wraps to next line, so removing style attribute which has DISPLAY: NONE property
          and allowing external css take charge with DISPLAY : INLINE. */
          $(_moreEle).removeAttr("style");
          $(_moreEle).show().removeClass("esoc-hide-element").trigger("focus");
          $(_textElement).addClass("esoc-see-more-content");
          lessView.options.parentCollectionView.triggerMethod('update:scrollbar');
          $(_textElement).addClass("esoc-see-more-activity");
          $(_textElement).removeClass("esoc-see-less-activity");
        },
        alignUpdateButton: function (afwId, create) {
          var afwListEle = $(".esoc-activityfeed-list.esoc-activityfeed-list-" + afwId),
              autoReloadEle, hiddenEle;
          if (create) {
            autoReloadEle = $('<div />', {
              'class': 'esoc-activityfeed-new-updates-wrapper',
              'html': NewUpdatesButtonTemplate({
                'messages': afLang,
                'newUpdatesWrapperClass': 'esoc-activityfeed-getnewupdates' +
                                          ' esoc-activityfeed-getnewupdates-' + afwId
              })
            });
            if (afwListEle.closest(".esoc-afw-newupdates").parent().find(
                    '.esoc-activityfeed-getnewupdates-' + afwId).length === 0) {
              afwListEle.closest(".esoc-afw-newupdates").parent().append(autoReloadEle);
              hiddenEle = $('<div />', {
                'class': 'esoc-activityfeed-invisiblebutton'
              });
              afwListEle.append(hiddenEle);
            }
          } else {
            autoReloadEle = $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
                              afwId);
          }
          if (afwListEle.length > 0) {
            autoReloadEle.css({
              'position': 'absolute',
              'top': '15px',
              'left': '50%',
              'transform': 'translate(-50%, -50%)'
            });
          }
        },
        /**
         * Adds and removes checkbox/radio button classes based on selection
         * @param event   event
         * @param view    view where the input elements are present
         * @param radioBtnGroupName  name of the input radio buttons group
         **/
        updateSelection: function (event, view, radioBtnGroupName) {
          if (event.target.type === "checkbox") {
            var checkboxSpanElement = view.$el.find("#" + event.target.id + "_checkbox");
            if (event.target.checked) {
              checkboxSpanElement.addClass('icon-checkbox-selected').removeClass('icon-checkbox');
            } else {
              checkboxSpanElement.addClass('icon-checkbox').removeClass('icon-checkbox-selected');
            }
          } else if (event.target.type === "radio") {
            var currentTargetId = event.target.id;
            view.$el.find('input[type="radio"]').each(function() {
              var id = $(this).attr('id');
              if(id !== currentTargetId) {
                $(this).prop('checked', false);
                view.$el.find($('#' + id + '_radio'))
                    .addClass('icon-radiobutton').removeClass('icon-radiobutton-selected');
              } else {
                $(this).prop('checked', true);
                view.$el.find($('#' + id + '_radio'))
                    .addClass('icon-radiobutton-selected').removeClass('icon-radiobutton');
              }
            });


          }
        },
        getUserWidgetModel: function (widgetOptions) {
          var userwidgetModel = widgetOptions.context.getModel(MemberModelFactory, {
                attributes: {id: widgetOptions.userid},
                options: {
                  id: widgetOptions.userid,
                  connector: widgetOptions.connector
                },
                temporary: true
              }
          );
          userwidgetModel.setExpand("member");
          return userwidgetModel;
        },

        /**
         * Returns Nodel Model based on the options
         *
         * @param objModel  the attributes of this are used to construct node model
         * @param connector  connector
         * @param isAttachment  differentiates attachement model from sgm model
         * @returns {*}
         */
        buildNodeModel: function (objModel, connector, isAttachment) {
          var objModelAttributes = _.extend({}, objModel.attributes),
              objNodeModel;
          delete objModelAttributes.actions;
          if (isAttachment) {
            objModelAttributes = _.extend(
                {commands: objModel.attributes.attachmentCommands}, objModelAttributes);
            objModelAttributes.id = objModel.attributes.extended_info &&
                                    objModel.attributes.extended_info.attachment_original_data_id ?
                                    parseInt(
                                        objModel.attributes.extended_info.attachment_original_data_id,
                                        10) :
                                    parseInt(objModel.attributes.extended_info.attachment_id, 10);
          } else {
            objModelAttributes = _.extend(
                {commands: objModel.attributes.sgmCommands}, objModelAttributes);
            objModelAttributes.id = objModel.attributes.extended_info.subtype === 1 ?
                                    objModel.attributes.extended_info.sgm_original_data_id :
                                    objModel.attributes.data_id;
          }
          objNodeModel = new NodeModel(objModelAttributes, {
            connector: connector,
            parse: true
          });
          return objNodeModel;
        },
        /**
         * The below function is used to place the cursor position at the end of content editable DIV
         * @param args = {el}
         */
        placeCaretAtEnd: function (el) {
          if (typeof window.getSelection !== "undefined"
              && typeof document.createRange !== "undefined") {
            el.trigger("focus");
            var textVal = window.getSelection().focusNode.textContent;
            var selectedItem = window.getSelection();
            if (selectedItem.rangeCount) {
              var range = selectedItem.getRangeAt(0);
              range = range.cloneRange();
              range.selectNodeContents(el[0]);
              range.collapse(false);
              selectedItem.removeAllRanges();
              selectedItem.addRange(range);
            }
            el.trigger("focus");
          } else if (typeof document.body.createTextRange !== "undefined") {
            var textRange = document.body.createTextRange();
            textRange.moveToElementText(el);
            textRange.collapse(false);
            textRange.select();
          }
        }
      };
      return Utils;
    });

csui.define('esoc/widgets/userwidget/model/userwidget.model',[
  'csui/lib/backbone',
  'csui/utils/url',
  'csui/utils/namedsessionstorage',
  'esoc/widgets/common/util'
], function (Backbone, Url, NamedSessionStorage, CommonUtil) {
  var UserWidgetModel = Backbone.Model.extend({
    defaults: {
      userid: "",
      firstname: "",
      lastname: "",
      username: ""
    },
    connector: "",
    namedSessionStorage: new NamedSessionStorage(CommonUtil.globalConstants.ESOCIAL_USER_INFO),
    constructor: function UserWidgetModel(attributes, options) {
      if (attributes !== undefined) {
        this.attributes = attributes;
      }
      this.defaults.userid = options.userid;
      Backbone.Model.prototype.constructor.apply(this, arguments);
      if (options && options.connector) {
        options.connector.assignTo(this);
      }
    },
    url: function () {
      var restUrl = CommonUtil.updateQueryStringValues(Url.combine(this.connector.connection.url,
          "members" , this.attributes.userid ),CommonUtil.globalConstants.EXPAND,CommonUtil.globalConstants.MEMBER);
      return restUrl;
    },
    parse: function (response) {
      var user_info = {},
          resp      = response.data;
      user_info.display_name = resp.display_name;
      user_info.id = resp.id;
      user_info.department_name = resp.group_id ? resp.group_id["name"]: "";
      user_info.office_location = resp.office_location;
      user_info.business_email = resp.business_email;
      user_info.title = resp.title;
      user_info.business_fax = resp.business_fax;
      user_info.business_phone = resp.business_phone;
      user_info.time_zone = resp.time_zone;
      user_info.photo_url = resp.photo_url;
      user_info.deleted = resp.deleted;
      if (this.attributes.userid !== "") {
        this.namedSessionStorage.set(CommonUtil.globalConstants.USERDETAILS +
                                     this.attributes.userid, user_info);
      }
      return user_info;
    }
  });
  return UserWidgetModel;
});

csui.define('esoc/widgets/userwidget/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('esoc/widgets/userwidget/nls/root/lang',{
  comments: 'Comments',
  viewprofile: 'View profile',
  unfollow: 'Unfollow',
  follow: 'Follow',
  chat: 'Chat',
  chatlabeltext: 'Chat with {0}',
  general: 'General',
  extended: 'Extended',
  personal: 'Personal',
  following: 'Following',
  followers: 'Followers',
  followingTooltip: 'Following {0}',
  followersTooltip: 'Followers {0}',
  activity: 'Activity',
  settings: 'Settings',
  notification: 'Notifications',
  notifyMentions: 'Notify me when I am mentioned',
  notifyNewFollower: 'Notify me when I have a new follower',
  notifyCommentsMyPosts: 'Notify me when someone comments on my content',
  notifyCommentsMyThreads: 'Notify me when someone comments on a thread I have participated in',
  notifyPrivateMessages: 'Notify me when I am sent a private message',
  privacySettings: 'Privacy settings for content messages',
  privacySettingsForStatusMessages: 'Privacy settings for status messages',
  privacyEveryOne: 'Everyone',
  privacyFollow: 'Only the people I follow',
  privacyNone: 'Only me',
  notifyMyUpdatesTo: 'Show my updates to:',
  myProfile: 'My profile',
  othersProfile: '{0}\'s profile',
  phone: 'Phone:',
  fax: 'Fax:',
  timezone: 'Time zone:',
  facebookLink: 'Facebook profile link',
  linkedinLink: 'Linkedin profile link',
  twitterLink: 'Twitter profile link',
  manager: 'Manager\'s name',
  defaultManagerMessage: 'Enter the name of your manager.',
  languagesSpoken: 'Languages spoken',
  aboutMe: 'About me',
  jobDescription: 'Job description',
  expertiseAreas: 'Areas of expertise',
  pastPositions: 'Past positions',
  degrees: 'Degrees / Certifications',
  awards: 'Awards / Honors',
  defaultLanguagesMessage: 'List the languages that you speak.',
  defaultAboutMeMessage: 'Write a brief description about yourself.',
  defaultfacebookMessage: 'Provide a link to your Facebook profile.',
  defaultLinkedInMessage: 'Provide a link to your LinkedIn profile.',
  defaulttwitterLinkMessage: 'Provide a link to your Twitter profile.',
  defaultJobDesc: 'Summarize your job responsibilities.',
  defaultExpertise: 'Describe your areas of expertise.',
  defaultPastPositions: 'List your relevant past positions.',
  defaultDegreeMessage: 'List your degrees or certifications.',
  defaultAwardMessage: 'List your awards or honors.',
  noFollowersMessage: 'List is empty. No one is following you',
  noFriendsMessage: 'You are not following anyone yet. To begin following, search for a user and, on their profile page, click Follow.',
  updatePic: 'Update picture',
  edit: 'Edit',
  update: 'Update',
  cancel: 'Cancel',
  more: 'more',
  less: 'less',
  userpickerplaceholder: 'Search Users',
  defaultErrorMessageForMiniProfilePopup: 'Server Error: Unable to display miniprofile',
  defaultErrorMessageForRelation: 'Server Error: Unable to perform operation',
  defaultErrorMessageForUpdateSettings: 'Server Error: Unable to update settings',
  defaultErrorMessageForUpdateExtentedField: 'Server Error: Unable to update field',
  defaultErrorMessageForUpdateExtentedLink: 'Server Error: Unable to update link',
  defaultErrorMessageForUserProfileActionLink: 'Server Error: Unable to follow/unfollow a deleted user',
  previous: 'Previous',
  next: 'Next',
  emoticon: 'Insert Emoji',
  defaultStatusPost: 'Post your status here',
  statusPost: 'My status',
  defaultErrorMessageForStatusPost: 'Server Error: Unable to post status',
  presenceTooltipTextFormat: '{0} {1}',
  presenceUnknownTooltipText: 'Unknown',
  presenceBeRightBackTooltipText: 'Be Right Back',
  presenceBusyTooltipText: 'Busy',
  presenceAwayTooltipText: 'Away',
  presenceOfflineTooltipText: 'Offline',
  presenceOnlineTooltipText: 'Online',
  presenceInaConferenceCallTooltipText: 'In a Conference Call',
  presencePresentingTooltipText: 'Presenting',
  presenceDoNotDisturbTooltipText: 'Do Not Disturb',
  presenceInaMeetingTooltipText: 'In a Meeting',
  presenceInaCallTooltipText: 'In a Call',
  presenceIdleOnlineTooltipText: 'Inactive',
  presenceIdleBusyTooltipText: 'Inactive Busy',
  presenceOutOfOfficeTooltipText: 'Out of Office',
  goBackTo: 'Go Back to',
  othersProfileTooltip: '\'{0}\'s\' profile',
  simpleUserProfileManagerLabel : 'Manager',
  simpleUserProfileOfficeLocation: 'Office location',
  simpleUserProfileEmail: 'Email',
  simpleUserProfileLabel: 'Update profile picture',
  simpleUserProfileMobile: 'Mobile',
  simpleUserProfilePhoneLabel: 'Phone',
  profile: 'Profile',
  uploadProfilePicture: 'Upload profile picture',
  deleteProfilePicture: 'Delete profile picture',
  dialogCloseButtonTooltip: 'Close',
  closeDialogLabel: 'Close Dialog',
  chatLabel: 'Chat',
  image: 'User Picker Image'
});



/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/miniprofile',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "    <div class=\"esoc-mini-profile-user binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-simple-mini-profile-user\">\r\n        <div\r\n            class=\"esoc-mini-profile-userinfo binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n          <div class=\"esoc-mini-profile-user-displayname\">\r\n            <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-user-name binf-line-clamp\"\r\n               title=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "</a>\r\n          </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.title : depth0),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.office_location : depth0),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.business_email : depth0),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.business_phone : depth0),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.cell_phone : depth0),{"name":"if","hash":{},"fn":this.program(10, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n      </div>\r\n      <div class=\"esoc-simple-mini-profile-user-img\">\r\n\r\n        <div class=\"esoc-mini-profile-img\">\r\n        <span class=\"esoc-mini-profile-avatar\">\r\n           <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-pic\">\r\n             <span class=\"image_user_placeholder esoc-miniprofile-default-avatar\r\n                esoc-user-default-avatar-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n             <img id=\"esoc-mini-profile-pic-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-userprofile-img-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\r\n                binf-img-circle\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\" alt=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\" src=\"#\">\r\n           </a>\r\n        </span>\r\n        </div>\r\n        <div id=\"esoc-mini-profile-chat-comment\" class=\"esoc-miniprofile-chat-action-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\r\n        esoc-mini-profile-chat-comment\"></div>\r\n        <div id=\"esoc-mini-profile-presence-indicator\" class=\"esoc-mini-profile-presence-indicator binf-col-lg-12 binf-col-md-12 binf-col-sm-12\r\n      binf-col-xs-12\"></div>\r\n      </div>\r\n\r\n    </div>\r\n";
},"2":function(depth0,helpers,partials,data) {
    var helper;

  return "            <div class=\"esoc-mini-profile-user-title\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "</div>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var helper;

  return "            <div class=\"esoc-mini-profile-user-location\"\r\n                 title=\""
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + "\r\n            </div>\r\n";
},"6":function(depth0,helpers,partials,data) {
    var helper;

  return "            <div class=\"esoc-mini-profile-user-displayemail\">\r\n              <a class=\"esoc-mini-profile-user-email\" href=\"mailto:"
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "\"\r\n                 title=\""
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "</a>\r\n            </div>\r\n";
},"8":function(depth0,helpers,partials,data) {
    var helper;

  return "            <div class=\"esoc-mini-profile-user-phone-data\">\r\n              <div class=\"esoc-mini-profile-user-phone-label\">"
    + this.escapeExpression(((helper = (helper = helpers.business_phone_label || (depth0 != null ? depth0.business_phone_label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_phone_label","hash":{}}) : helper)))
    + "</div>\r\n              <div class=\"esoc-mini-profile-user-phone\"\r\n                   title=\""
    + this.escapeExpression(((helper = (helper = helpers.business_phone || (depth0 != null ? depth0.business_phone : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_phone","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.business_phone || (depth0 != null ? depth0.business_phone : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_phone","hash":{}}) : helper)))
    + "</div>\r\n            </div>\r\n";
},"10":function(depth0,helpers,partials,data) {
    var helper;

  return "            <div class=\"esoc-mini-profile-user-mobile-data\">\r\n              <div class=\"esoc-mini-profile-user-mobile-label\">"
    + this.escapeExpression(((helper = (helper = helpers.cell_phone_label || (depth0 != null ? depth0.cell_phone_label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"cell_phone_label","hash":{}}) : helper)))
    + "</div>\r\n              <div class=\"esoc-mini-profile-user-mobile\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.cell_phone || (depth0 != null ? depth0.cell_phone : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"cell_phone","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.cell_phone || (depth0 != null ? depth0.cell_phone : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"cell_phone","hash":{}}) : helper)))
    + "</div>\r\n            </div>\r\n";
},"12":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <div class=\"esoc-mini-profile-user binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n          <div class=\"esoc-mini-profile-img\">\r\n        <span class=\"esoc-mini-profile-avatar\">\r\n           <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-pic\">\r\n             <span class=\"image_user_placeholder esoc-miniprofile-default-avatar\r\n                esoc-user-default-avatar-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n             <img id=\"esoc-mini-profile-pic-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-userprofile-img-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\r\n                binf-img-circle\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\" alt=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\">\r\n           </a>\r\n        </span>\r\n          </div>\r\n          <div id=\"esoc-mini-profile-presence-indicator\"\r\n               class=\"esoc-mini-profile-presence-indicator binf-col-lg-12 binf-col-md-12 binf-col-sm-12\r\n      binf-col-xs-12\"></div>\r\n          <div class=\"esoc-mini-profile-userinfo binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n              <div class=\"esoc-mini-profile-user-displayname\">\r\n                  <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-user-name binf-line-clamp\"\r\n                     title=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "</a>\r\n              </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.business_email : depth0),{"name":"if","hash":{},"fn":this.program(13, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.title : depth0),{"name":"if","hash":{},"fn":this.program(15, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.office_location : depth0),{"name":"if","hash":{},"fn":this.program(17, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "          </div>\r\n\r\n          <div class=\"esoc-mini-profile-actions binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.deleted : depth0),{"name":"if","hash":{},"fn":this.program(19, data, 0),"inverse":this.program(21, data, 0)})) != null ? stack1 : "")
    + "          </div>\r\n          <div class=\"esoc-mini-profile-loading-img binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n              <span class=\"esoc-mini-profile-progress-icon\" />\r\n          </div>\r\n          <div class=\"esoc-mini-profile-following-error binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"></div>\r\n      </div>\r\n      <div id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-social-users-load-more\"></div>\r\n";
},"13":function(depth0,helpers,partials,data) {
    var helper;

  return "                  <div class=\"esoc-mini-profile-user-displayemail\">\r\n                      <a class=\"esoc-mini-profile-user-email\" href=\"mailto:"
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "\"\r\n                         title=\""
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "</a>\r\n                  </div>\r\n";
},"15":function(depth0,helpers,partials,data) {
    var helper;

  return "                  <div class=\"esoc-mini-profile-user-title\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "</div>\r\n";
},"17":function(depth0,helpers,partials,data) {
    var helper;

  return "                  <div class=\"esoc-mini-profile-user-location\"\r\n                       title=\""
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + "</div>\r\n";
},"19":function(depth0,helpers,partials,data) {
    var stack1;

  return "                  <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n                      <div class=\"esoc-mini-profile-selfuser-actions\">\r\n                          <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n                      </div>\r\n                  </a>\r\n";
},"21":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.program(22, data, 0),"inverse":this.program(29, data, 0)})) != null ? stack1 : "");
},"22":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "                      <div class=\"esoc-chat-action-enabled esoc-chat-action-enabled-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + " binf-hidden\">\r\n"
    + ((stack1 = helpers.unless.call(depth0,(depth0 != null ? depth0.hideFollow : depth0),{"name":"unless","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "                          <div class=\"esoc-mini-profile-otheruser-actions-spacing \"></div>\r\n                          <a href=\"javascript:void(0);\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.chat : stack1), depth0))
    + "\">\r\n                              <div class=\"esoc-miniprofile-chat-action-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\r\n                     esoc-miniprofile-otheruser-actions-withchat esoc-miniprofile-chat-action\"></div>\r\n                          </a>\r\n\r\n                          <div class=\"esoc-mini-profile-otheruser-actions-spacing \"></div>\r\n                          <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n                              <div class=\"esoc-miniprofile-otheruser-actions-withchat\">\r\n                                  <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n                              </div>\r\n                          </a>\r\n                      </div>\r\n\r\n                      <div class=\"esoc-chat-action-disabled esoc-chat-action-disabled-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + " binf-hidden\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.hideFollow : depth0),{"name":"if","hash":{},"fn":this.program(25, data, 0),"inverse":this.program(27, data, 0)})) != null ? stack1 : "")
    + "                      </div>\r\n";
},"23":function(depth0,helpers,partials,data) {
    var stack1;

  return "                              <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-following-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.following : stack1), depth0))
    + "\">\r\n                                  <div class=\"esoc-miniprofile-otheruser-actions-withchat\">\r\n                                      <div class=\"esoc-miniprofile-followingaction "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.followingClass : stack1), depth0))
    + "\"\r\n                                           title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.following : stack1), depth0))
    + "\"></div>\r\n                                  </div>\r\n                              </a>\r\n";
},"25":function(depth0,helpers,partials,data) {
    var stack1;

  return "                              <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\">\r\n                                  <div class=\"esoc-mini-profile-selfuser-actions\">\r\n                                      <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n                                  </div>\r\n                              </a>\r\n";
},"27":function(depth0,helpers,partials,data) {
    var stack1;

  return "                              <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-following-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.followingClass : stack1), depth0))
    + "\">\r\n                                  <div class=\"esoc-mini-profile-otheruser-actions-without-chat\">\r\n                                      <div class=\"esoc-miniprofile-followingaction "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.followingClass : stack1), depth0))
    + "\"\r\n                                           title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.following : stack1), depth0))
    + "\"></div>\r\n                                  </div>\r\n                              </a>\r\n                              <div class=\"esoc-mini-profile-otheruser-actions-spacing \"></div>\r\n                              <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n                                  <div class=\"esoc-mini-profile-otheruser-actions-without-chat\">\r\n                                      <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n                                  </div>\r\n                              </a>\r\n";
},"29":function(depth0,helpers,partials,data) {
    var stack1;

  return "                      <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n                          <div class=\"esoc-mini-profile-selfuser-actions\">\r\n                              <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n                          </div>\r\n                      </a>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div class=\""
    + this.escapeExpression(((helper = (helper = helpers.className || (depth0 != null ? depth0.className : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"className","hash":{}}) : helper)))
    + " esoc-mini-profile-widget binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.enableSimpleSettingsModel : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(12, data, 0)})) != null ? stack1 : "")
    + "</div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_miniprofile', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/utils/chat/impl/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('esoc/widgets/utils/chat/impl/nls/root/lang',{
  labeltext: 'Chat'
});


csui.define('esoc/widgets/utils/chat/impl/util',['module',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'i18n!esoc/widgets/utils/chat/impl/nls/lang',
      'esoc/widgets/common/util'
    ],
    function (module, $, _, Lang, CommonUtil) {
      var Utils = {
        lang: Lang,
        commonUtil: CommonUtil,
        launchChatWindow: function (options) {
          var uriPrefix = options.uriPrefix ? options.uriPrefix :
                          CommonUtil.globalConstants.URI_PREFIX,
              uri       = uriPrefix +
                          CommonUtil.globalConstants.URI_DELIMITER + options.tguser +
                          CommonUtil.globalConstants.AT_SIGN_SYMBOL + options.domain;
          window.location = uri;
        }
      }
      return Utils;
    });


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/utils/chat/impl/chatbutton',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<a class='esoc-social-chat-icon' title='"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.labeltext : stack1), depth0))
    + "'></a>";
}});
Handlebars.registerPartial('esoc_widgets_utils_chat_impl_chatbutton', t);
return t;
});
/* END_TEMPLATE */
;

csui.define('css!esoc/widgets/utils/chat/impl/chat',[],function(){});
csui.define('esoc/widgets/utils/chat/chat.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'i18n!esoc/widgets/utils/chat/impl/nls/lang',
  'esoc/widgets/utils/chat/impl/util',
  'hbs!esoc/widgets/utils/chat/impl/chatbutton',
  "css!esoc/widgets/utils/chat/impl/chat.css"
], function ($, _, Handlebars, Marionette, lang, ChatUtil, ChatBtnTemplate) {
  var self = null;
  var ChatView = Marionette.ItemView.extend({
    className: 'esoc-social-chat-control',
    template: function (options) {
      return options.messages.customtemplate ? options.messages.customtemplate :
             ChatBtnTemplate(options);
    },
    templateHelpers: function () {
      return {
        messages: {
          tguser: this.options.tguser,
          labeltext: lang.labeltext,
          customtemplate: this.options.customtemplate
        }
      };
    },
    events: {
      "click": "launchChatWindow"
    },
    launchChatWindow: function (e) {
      ChatUtil.launchChatWindow(this.options);
    },
    constructor: function ChatView(options) {
      options = options || {};
      this.options = options;
      Marionette.ItemView.prototype.constructor.call(this, options);
    }
  });
  return ChatView;
});


csui.define('css!esoc/widgets/userwidget/chat/chat',[],function(){});
csui.define('esoc/widgets/userwidget/chat/chatutil',['module',
      'require',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'i18n!esoc/widgets/userwidget/nls/lang',
      'css!esoc/widgets/userwidget/chat/chat.css'
    ],
    function (module, _require, $, _, Lang) {
      // 0 - Online 1 - Offline  2 - Away 3 - Busy 4 - Be Right Back 5 - On the Phone
      // 6 - Out to Lunch 7- In Meeting 9-Do not Disturb
      var ChatUtil = {

        updatePresenceModel: function (options, presence) {
          options.model.attributes.status = "Unknown";
          var presenceOptions = this.getPresenceStatus(presence);
          options.model.attributes.status = presenceOptions.statusCode;
          options.model.attributes.tooltipText = presenceOptions.status;
          options.model.trigger("change.presencestatus");
        },
        setIconColor: function (presence, presenceEle) {
          presenceEle.removeClass("esoc-chat-presence-Away");
          presenceEle.removeClass("esoc-chat-presence-Online");
          presenceEle.removeClass("esoc-chat-presence-Busy");
          presenceEle.removeClass("esoc-chat-presence-IdleBusy");
          presenceEle.removeClass("esoc-chat-presence-Offline");
          presenceEle.removeClass("esoc-chat-presence-donotdisturb");
          presenceEle.removeClass("esoc-user-profile-default-presence");

          var presenceOptions = this.getPresenceStatus(presence);
          presenceEle.addClass(presenceOptions.statusIconClass).attr("title",
              presenceOptions.status);
        },
        getPresenceStatus: function (presence) {
          var presenceOptions = {
            status: "",
            statusIconClass: "",
            statusCode: ""
          };
          var status;
          if (_.isNumber(presence.status)) {
            status = presence.status;
          } else {
            status = !!presence.activity ? presence.activity : presence.status;
          }
          switch (status) {
          case 0 :
          case "Online":
            presenceOptions.status = Lang.presenceOnlineTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Online";
            presenceOptions.statusCode = "Online";
            break;
          case 1:
          case "Offline":
            presenceOptions.status = Lang.presenceOfflineTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Offline";
            presenceOptions.statusCode = "Offline";
            break;
          case 2:
          case "Off work":
          case "Away":
            presenceOptions.status = Lang.presenceAwayTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Away";
            presenceOptions.statusCode = "Away";
            break;
          case 3:
          case "Busy":
            presenceOptions.status = Lang.presenceBusyTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Busy";
            presenceOptions.statusCode = "Busy";
            break;
          case 4:
          case "BeRightBack":
            presenceOptions.status = Lang.presenceBeRightBackTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Away";
            presenceOptions.statusCode = "Away";
            break;
          case 5:
          case "on-the-phone":
            presenceOptions.status = Lang.presenceInaCallTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Busy";
            presenceOptions.statusCode = "Busy";
            break;
          case 7:
          case "in-a-meeting":
            presenceOptions.status = Lang.presenceInaMeetingTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Busy";
            presenceOptions.statusCode = "Busy";
            break;
          case 8:
          case "out-of-office":
            presenceOptions.status = Lang.presenceOutOfOfficeTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Away";
            presenceOptions.statusCode = "Away";
            break;
          case 9:
          case "DoNotDisturb":
            presenceOptions.status = Lang.presenceDoNotDisturbTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-donotdisturb";
            presenceOptions.statusCode = "DoNotDisturb";
            break;
          case 10:
          case "in-a-conference":
            presenceOptions.status = Lang.presenceInaConferenceCallTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Busy";
            presenceOptions.statusCode = "Busy";
            break;
          case 18:
          case "Presenting":
            presenceOptions.status = Lang.presencePresentingTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-donotdisturb";
            presenceOptions.statusCode = "DoNotDisturb";
            break;
          case 16:
          case "IdleOnline":
            presenceOptions.status = Lang.presenceIdleOnlineTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Away";
            presenceOptions.statusCode = "Away";
            break;
          case "IdleBusy":
            presenceOptions.status = Lang.presenceIdleBusyTooltipText;
            presenceOptions.statusIconClass = "esoc-chat-presence-Busy";
            presenceOptions.statusCode = "Busy";
            break;
          default:
            presenceOptions.status = Lang.presenceUnknownTooltipText;
            presenceOptions.statusIconClass = "esoc-user-profile-default-presence";
            presenceOptions.statusCode = "Unknown";
          }
          return presenceOptions;
        },
        getNameCtrl: function () {
          var nameCtrl = null;
          var ActiveXObject = {};
          try {
            try {
              if (this.isCompatibleMSIEVersion()) {
                nameCtrl = new ActiveXObject("Name.NameCtrl");
              }
            } catch (ex) {
              nameCtrl = null
            }

            if (nameCtrl == null) {
              var a = "application/x-sharepoint-uc";
              nameCtrl = Boolean(navigator.mimeTypes) && navigator.mimeTypes[a] &&
                         navigator.mimeTypes[a].enabledPlugin;
            }

          } catch (ex) {
            nameCtrl = null
          }

          return nameCtrl;
        },
        getMessageId: function () {
          var endpointId = ('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx').replace(/[xy]/g,
              function (c) {
                var r = Math.random() * 16 | 0,
                    v = c === 'x' ? r : r & 0x3 | 0x8;

                return v.toString(16);
              }
          );
          return endpointId;
        },
        addHandler: function (method) {
          if (window.attachEvent) {
            window.attachEvent("onmessage", method)
          } else {
            window.addEventListener("message", method);
          }
        },
        removeHandler: function (method) {
          if (window.detachEvent) {
            window.detachEvent("onmessage", method);
          } else {
            window.removeEventListener("message", method);
          }
        }
      };
      return ChatUtil;
    });
/* Copyright (C) Microsoft 2014. All rights reserved. */

csui.define('esoc/widgets/userwidget/chat/skype/lib/GeneralHelper',['module', 'require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/marionette',
      'csui/lib/backbone'],
    function (module, _require, $, _, Marionette, Backbone) {

      // var GeneralHelper = {};

      /// <summary>
      /// GeneralHelper contains functions common across several modules.
      /// </summary>
      /// <remarks>
      /// The functions can be used for these purposes:
      /// * create namespaces (to prevent collisions with other JavaScript objects)
      /// * check for null and undefined objects
      /// * generate UUIDs
      /// * check if an object is an Array and empty
      /// * process Data URIs
      /// * Extract Origin from URL
      /// * Extract domain from URL
      /// * Convert Join URL to Conference URI
      /// * Log Error objects
      /// * Method to reject deferred objects
      /// * Safe callback execution
      /// * Default value fallback
      /// * Parse header string into JSON object
      /// </remarks>
      // GeneralHelper = (function ($) {
      var GeneralHelper = new Backbone.Model({

        /// <summary>
        /// Generates a namespace object based on the supplied string.
        /// </summary>
        /// <param name="namespaceString">Namespace to generate.</param>
        /// <remarks>
        /// Namespaces are used to prevent collisions with other JavaScript objects.
        /// Split the namespace on '.' and begin iterating over the parts,
        /// creating a new object if necessary.
        /// </remarks>
        /// <returns>JSON object representing the namespace.</returns>

        namespace: function (namespaceString) {
          var parts       = namespaceString.split('.'),
              parent      = window,
              currentPart = '';

          for (var i = 0, length = parts.length; i < length; i++) {
            currentPart = parts[i];

            if (!parent[currentPart]) {
              parent[currentPart] = parent[currentPart] || {};
            }

            parent = parent[currentPart];
          }

          return parent;
        },

        /// <summary>
        /// Generates a Universally Unique Identifier (UUID) based on the RFC 4122 specification.
        /// </summary>
        /// <remarks>
        /// For more information see RFC 4122, at
        ///     http://tools.ietf.org/html/rfc4122
        /// </remarks>
        /// <returns>UUID that can be used as a unique object.</returns>
        generateUUID: function () {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
              function (c) {
                var r = Math.random() * 16 | 0,
                    v = (c === 'x' ? r : r & 0x3 | 0x8);

                return v.toString(16);
              }
          );
        },
        /// <summary>
        /// Determines whether object is empty.
        /// </summary>
        /// <param name="object">Object to check.</param>
        /// <returns>Boolean indicating whether the object is empty.</returns>
        isEmpty: function (object) {
          if (object) {
            if ($.isArray(object)) {
              return object.length === 0;
            } else {
              return false;
            }
          } else {
            return true;
          }
        },

        /// <summary>
        /// Extracts textual data from a Data URI.
        /// </summary>
        /// <param name="uri">Object containing data to extract.</param>
        /// <param name="options">Object used to determine if the output will be escaped</param>
        /// <remarks>
        /// In UCWA 1.0, Data URIs are used to transmit instant message bodies.
        /// For more information about Data URIs see the RFC:
        ///     http://tools.ietf.org/html/rfc2397
        /// </remarks>
        /// <returns>String extracted from the Data URI.</returns>
        extractDataFromDataUri: function (uri, options) {
          var regex  = /^data:([^,;]+)(?:;charset=([^,;]+))?(;base64)?,(.*)$/i,
              result = regex.exec(uri);

          // Check for base64 and browser support of atob
          if (result[3] && window.atob) {
            var data = window.escape(window.atob(result[4]));
            return (options && options.unescape) ? decodeURI(data) : data;
          } else {
            // A necessary fix based on browser differences on space representation in Data URI
            var fixPlus = result[4].replace(/\+/g, "%20");
            return (options && options.unescape) ? window.unescape(fixPlus) : fixPlus;
          }
        },

        /// <summary>
        /// Extracts the Origin from an Absolute URL.
        /// </summary>
        /// <param name="url">Object to extract Origin from.</param>
        /// <remarks>
        /// An Origin consists of SCHEME + "://" + HOST + (optional) ":" + (optional) PORT + "/".
        /// Extract the Origin portion of the URL (shown in [] below).
        ///     [https://example.com:8080/]some/long/path
        /// For more information see RFC 6454, at
        ///     http://tools.ietf.org/html/rfc6454#section-3.2.1
        /// </remarks>
        /// <returns>The Origin as a string or an empty string.</returns>
        extractOriginFromAbsoluteUrl: function (url) {
          if (url && typeof(url) === "string") {
            var index = url.indexOf("://");
            if (index !== -1) {
              index += 3;
              var endOfFqdn = url.indexOf("/", index);
              return url.slice(0, endOfFqdn);
            } else {
              return "";
            }
          } else {
            return "";
          }
        },

        /// <summary>
        /// Extracts the Host from a URL.
        /// </summary>
        /// <param name="uri">Object to extract domain from.</param>
        /// <remarks>
        /// Extract the Host portion of the URL (shown in [] below).
        ///     https://[example.com]:8080/some/long/path
        /// </remarks>
        /// <returns>The domain as a string or an empty string.</returns>
        determineDomain: function (url) {
          var domain = "",
              temp   = url.match(/^(?:(?:f|ht)tps?:\/\/)?([^\/:]+)/);

          if (temp.length !== 0) {
            temp = temp[0];

            domain = temp.slice(temp.indexOf(".") + 1);
          }

          return domain;
        },

        /// <summary>
        /// Converts a Join URL into a Conference URI.
        /// </summary>
        /// <param name="joinUrl">Object convert into a conference URI.</param>
        /// <remarks>
        /// A Join URL comes in the form of:
        ///     https://meet.domain.com/username/unique_id
        /// A Conference URI comes in the form of:
        ///     sip:username@domain.com;gruu;opaque=app:conf:focus:id:unique_id
        /// </remarks>
        /// <returns>A formatted Conference URI or an empty string.</returns>
        convertJoinUrlToUri: function (joinUrl) {
          var domain = this.determineDomain(joinUrl),
              temp   = joinUrl.split(domain),
              uri    = "";

          if (temp.length >= 2) {
            temp = temp[1];
            temp = temp.split("/");

            uri = "sip:" + temp[1] + "@" + domain + ";gruu;opaque=app:conf:focus:id:" +
                  temp[2];
          }

          return uri;
        },

        /// <summary>
        /// Logs an the message part of an Error object to the Console log.
        /// </summary>
        /// <param name="error">Error object to log.</param>
        logError: function (error) {
          if (error && error instanceof Error && error.message) {
            window.console.log(error.message);
          }
        },

        /// <summary>
        /// Fails a deferred/callback.
        /// </summary>
        /// <param name="object">Object containing a callback and deferred object.</param>
        /// <param name="message">Error message to log.</param>
        /// <remarks>
        /// object comes in the form of:
        /// {
        ///     callback - method to execute
        ///     deferred - deferred object to reject and if not defined only will be created
        /// }
        /// </remarks>
        /// <returns>Promise object that has been rejected.</returns>
        genericRejectAction: function (object, message) {
          window.console.log(message);

          var deferred = null;

          if (object) {
            this.logError(object);

            try {
              if ($.isFunction(object.callback)) {
                object.callback(null);
              }
            } catch (e) {
              window.console.log(
                  "GeneralHelper: Encountered error executing callback");
              this.logError(object);
            }

            if (object.deferred) {
              deferred = object.deferred;
            }
          }

          if (!deferred) {
            deferred = $.Deferred();
          }

          deferred.reject(null);

          return deferred.promise();
        },

        /// <summary>
        /// Attempts to execute a callback safely (try/catch) and log errors when errors are
        /// encountered.
        /// </summary>
        /// <param name="object">Object containing information to execute a callback.</param>
        /// <remarks>
        /// object comes in the form of:
        /// {
        ///     callback - method to execute
        ///     params - parameters used by callback
        ///     this - scope resolution
        ///     error - message to log if an error occurs
        /// }
        /// </remarks>
        safeCallbackExec: function (object) {
          if (object) {
            if ($.isFunction(object.callback)) {
              try {
                if ($.isArray(object.params) || !object.params) {
                  // TODO pgade object.callback.apply(object.this, object.params);
                  object.callback.apply(this, object.params);
                } else {
                  window.console.log(
                      "object.params not in correct format: should be [] or null: unable to safe execute callback");
                }
              } catch (e) {
                if (object.error) {
                  window.console.log(object.error);
                } else {
                  window.console.log("Encountered error safe executing callback");
                }

                this.logError(e);
              }
            } else if (object.callback) {
              window.console.log(
                  "object.callback is not a Function: unable to safe execute callback");
            }
          } else {
            window.console.log("object not defined: unable to safe execute callback");
          }
        },

        /// <summary>
        /// Tests and returns a value (if not null/undefined) or a default.
        /// </summary>
        /// <param name="defaultValue">Object to return when other is null/undefined.</param>
        /// <param name="value">Object to return if not null/undefined.</param>
        /// <returns>Value if not null/undefined or default.</returns>
        getValue: function (defaultValue, value) {
          return value || defaultValue;
        },

        /// <summary>
        /// Parses a header string into a JSON object.
        /// </summary>
        /// <param name="headers">String representation of headers.</param>
        /// <returns>JSON object containing headers.</returns>
        parseHeaders: function (headers) {
          var obj   = {},
              split = headers.split("\r\n");

          for (var i = 0; i < split.length; i++) {
            if (split[i] !== "") {
              var index = split[i].indexOf(":");

              if (index !== -1) {
                var key   = $.trim(split[i].slice(0, index)),
                    value = $.trim(split[i].slice(index + 1)),
                    match = value.match(/\=".*?"/g);

                if (match && match.length !== 0) {
                  index = value.indexOf(match[0]);

                  var temp      = value.slice(0, index),
                      tempMatch = temp.match(/\W/g),
                      splitChar = tempMatch ? tempMatch[0] : null,
                      root      = splitChar ? $.trim(temp.split(splitChar)[0]) :
                                  $.trim(temp),
                      child     = value.slice(root.length + 1),
                      j         = 0;

                  if (!obj[key]) {
                    obj[key] = {};
                  }

                  while (j < match.length) {
                    if (!obj[key][root]) {
                      obj[key][root] = {};
                    }

                    for (j; j < match.length; j++) {
                      var skip = 0;

                      if (child.indexOf(",") === 0 ||
                          child.indexOf(splitChar) === 0) {
                        skip += 1;
                      }

                      if (child.indexOf(",") === 1 ||
                          child.indexOf(splitChar) === 1) {
                        skip += 1;
                      }

                      child = child.slice(skip);
                      index = child.indexOf(match[j]);

                      var item = $.trim(child.slice(0, index));
                      index = item.lastIndexOf(splitChar);

                      if (index !== -1) {
                        root = $.trim(item.slice(0, index));
                        child = child.slice(root.length + 1);
                        break;
                      }

                      child = child.slice(item.length + match[j].length);

                      var valueSplit = match[j].slice(1).replace(/"/g,
                          "").split(",");

                      if (valueSplit.length === 1) {
                        obj[key][root][item] = valueSplit[0];
                      } else {
                        obj[key][root][item] = [];

                        for (var k = 0; k < valueSplit.length; k++) {
                          obj[key][root][item].push(valueSplit[k]);
                        }
                      }
                    }
                  }
                } else {
                  obj[key] = value.replace(/"/g, "");
                }
              } else {
                window.console.log("Not a header?");
              }
            }
          }

          return obj;
        }

      });

      return GeneralHelper;

      // Chrome needs this so that the GeneralHelper is available everywhere...
      // window["GeneralHelper"] = GeneralHelper;
    });
/* Copyright (C) Microsoft 2014. All rights reserved. */
csui.define('esoc/widgets/userwidget/chat/skype/lib/MemoryStorage',['module', 'require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/backbone',
      'esoc/widgets/userwidget/chat/skype/lib/GeneralHelper'],
    function (module, _require, $, _, Backbone, GeneralHelper) {

      var _generalHelper = GeneralHelper.attributes;

      /// <summary>
      /// MemoryStorage is an in-memory implementation of a storage object.
      /// </summary>
      var MemoryStorage = new Backbone.Model({
        _data: {},

        /*var obj = function MemoryStorage() {
            if (!(this instanceof MemoryStorage)) {
                return new MemoryStorage();
            }

            var _scope = this,
                this._data  = {};*/

        /// <summary>
        /// Initialize data.
        /// </summary>
        /// <param name="object">Object to init the storage.</param>
        /// <returns>Promise object related to this init.</returns>
        init: function (object) {
          var deferred = $.Deferred();
          this._data = {};
          deferred.resolve();

          return deferred.promise();
        },

        /// <summary>
        /// Create data in storage based on id.
        /// </summary>
        /// <param name="data">Information.</param>
        /// <param name="id">Identifier to data.</param>
        /// <param name="callback">Method to execute upon completion.</param>
        /// <returns>Promise object related to this create.</returns>
        create: function (data, id, callback) {
          var deferred = $.Deferred();

          this._data[id] = data;

          deferred.resolve(id);

          _generalHelper.safeCallbackExec({
            callback: callback,
            params: [
              id
            ]
          });

          return deferred.promise();
        },

        /// <summary>
        /// Read data in storage based on id.
        /// </summary>
        /// <param name="id">Identifier to data.</param>
        /// <param name="callback">Method to execute upon completion.</param>
        /// <returns>Promise object related to this read.</returns>
        read: function (id, callback) {
          var deferred = $.Deferred();

          deferred.resolve(this._data[id]);

          _generalHelper.safeCallbackExec({
            callback: callback,
            params: [
              this._data[id]
            ]
          });

          return deferred.promise();
        },

        /// <summary>
        /// Update data in storage based on id.
        /// </summary>
        /// <param name="data">Information.</param>
        /// <param name="id">Identifier to data.</param>
        /// <param name="callback">Method to execute upon completion.</param>
        /// <returns>Promise object related to this update.</returns>
        update: function (data, id, callback) {
          var deferred = $.Deferred();

          this._data[id] = data;

          deferred.resolve(id);

          _generalHelper.safeCallbackExec({
            callback: callback,
            params: [
              id
            ]
          });

          deferred.promise();
        },

        /// <summary>
        /// Delete data in storage based on id.
        /// </summary>
        /// <param name="id">Identifier to data.</param>
        /// <param name="callback">Method to execute upon completion.</param>
        /// <returns>Promise object related to this delete.</returns>
        deleteVal: function (id, callback) {
          var deferred = $.Deferred();

          delete this._data[id];

          deferred.resolve(id);

          _generalHelper.safeCallbackExec({
            callback: callback,
            params: [
              id
            ]
          });

          return deferred.promise();
        }
      });

      return MemoryStorage;

    });

/* Copyright (C) Microsoft 2014. All rights reserved. */

csui.define('esoc/widgets/userwidget/chat/skype/lib/Cache',['module', 'require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/backbone',
      'esoc/widgets/userwidget/chat/skype/lib/GeneralHelper',
      'esoc/widgets/userwidget/chat/skype/lib/MemoryStorage'],
    function (module, _require, $, _, Backbone, GeneralHelper, MemoryStorage) {

      var _generalHelper = GeneralHelper.attributes,

          //_generalHelper.namespace("microsoft.rtc.ucwa.samples");

          /// <summary>
          /// Cache is responsible for managing storage based on a supplied storage object.
          /// </summary>
          /// <param name="storage">Storage object for the Cache to use.</param>
          /// <remarks>
          /// If no storage object is supplied Cache will default to using MemoryStorage.
          // A storage object used by the cache must implement init, create, read, update, and delete.
          /// </remarks>
          _ids           = [],

          storage        = MemoryStorage.attributes;

      var Cache = new Backbone.Model({
        // Check storage for appropriate methods

        /// <summary>
        /// Initialize the storage object.
        /// </summary>
        /// <param name="object">Object to init the storage.</param>
        /// <remarks>
        /// object does not have a prescribed format due to differing needs of storage objects
        /// </remarks>
        /// <returns>Promise object related to this init.</returns>
        init: function (object) {
          if (storage) {
            try {
              return storage.init(object);
            } catch (e) {
              return _generalHelper.genericRejectAction(e,
                  "Encountered error during init");
            }
          } else {
            return _generalHelper.genericRejectAction(null,
                "storage object is not defined: unable to init");
          }
        },

        /// <summary>
        /// Create data in storage based on object.
        /// </summary>
        /// <param name="object">Object to create in storage.</param>
        /// <remarks>
        /// object comes in the form of:
        /// {
        ///     data - information
        ///     id - identifier to data (optional)
        ///     callback - method to execute upon completion
        /// }
        /// Callback/Promise object will be called with id
        /// </remarks>
        /// <returns>Promise object related to this create.</returns>
        create: function (object) {
          if (storage && object && object.data) {
            try {
              // TODO need to revisit
              /*if (object.id && _ids.indexOf(object.id) !== -1) {
                return _generalHelper.genericRejectAction(object,
                    "_ids does contain an entry for " + object.id +
                    ": unable to create");
              }

              while (!object.id) {
                var id = _generalHelper.generateUUID();

                if (_ids.indexOf(id) === -1) {
                  object.id = id;
                }
              }*/

              return storage.create(object.data, object.id, object.callback).done(
                  function () {
                    _ids.push(object.id);
                  });
            } catch (e) {
              _generalHelper.logError(e);
              return _generalHelper.genericRejectAction(object,
                  "Encountered error during create");
            }
          } else {
            return _generalHelper.genericRejectAction(object,
                "storage object or object.data not defined: unable to create");
          }
        },

        /// <summary>
        /// Read data in storage based on object.
        /// </summary>
        /// <param name="object">Object to read in storage.</param>
        /// <remarks>
        /// object comes in the form of:
        /// {
        ///     id - identifier to data
        ///     callback - method to execute upon completion
        /// }
        /// Callback/Promise object will be called with data
        /// </remarks>
        /// <returns>Promise object related to this read.</returns>
        read: function (object) {
          if (storage && object.id) {
            try {
              if (_ids.indexOf(object.id) !== -1) {
                return storage.read(object.id, object.callback);
              } else {
                return _generalHelper.genericRejectAction(object,
                    "_ids does not contain an entry for " + object.id +
                    ": unable to read");
              }
            } catch (e) {
              _generalHelper.logError(e);
              return _generalHelper.genericRejectAction(object,
                  "Encountered error during read");
            }
          } else {
            return _generalHelper.genericRejectAction(object,
                "storage object or object.id not defined: unable to read");
          }
        },

        /// <summary>
        /// Update data in storage based on object.
        /// </summary>
        /// <param name="object">Object to update in storage.</param>
        /// <remarks>
        /// object comes in the form of:
        /// {
        ///     data - information
        ///     id - identifier to data
        ///     callback - method to execute upon completion
        /// }
        /// Callback/Promise object will be called with id
        /// </remarks>
        /// <returns>Promise object related to this update.</returns>
        update: function (object) {
          if (storage && object.id && object.data) {
            try {
              if (_ids.indexOf(object.id) !== -1) {
                return storage.update(object.data, object.id, object.callback);
              } else {
                return _generalHelper.genericRejectAction(object,
                    "_ids does not contain an entry for " + object.id +
                    ": unable to update");
              }
            } catch (e) {
              _generalHelper.logError(e);
              return _generalHelper.genericRejectAction(object,
                  "Encountered error during update");
            }
          } else {
            return _generalHelper.genericRejectAction(object,
                "storage object, object.id, or object.data not defined: unable to update");
          }
        },

        /// <summary>
        /// Delete data in storage based on object.
        /// </summary>
        /// <param name="object">Object to delete in storage.</param>
        /// <remarks>
        /// object comes in the form of:
        /// {
        ///     id - identifier to data
        ///     callback - method to execute upon completion
        /// }
        /// Callback/Promise object will be called with id
        /// </remarks>
        /// <returns>Promise object related to this delete.</returns>
        deleteVal: function (object) {
          if (storage && object.id) {
            try {
              var index = _ids.indexOf(object.id);

              if (index !== -1) {
                return storage.deleteVal(object.id, object.callback).done(
                    function () {
                      _ids.splice(index, 1);
                    });
              } else {
                return _generalHelper.genericRejectAction(object,
                    "_ids does not contain an entry for " + object.id +
                    ": unable to delete");
              }
            } catch (e) {
              _generalHelper.logError(e);
              return _generalHelper.genericRejectAction(object,
                  "Encountered error during delete");
            }
          } else {
            return _generalHelper.genericRejectAction(object,
                "storage object or object.id not defined: unable to delete");
          }
        }
      });

      return Cache;

    });
/* Copyright (C) Microsoft 2014. All rights reserved. */
csui.define('esoc/widgets/userwidget/chat/skype/lib/Transport',['module', 'require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/backbone',
      'esoc/widgets/userwidget/chat/skype/lib/GeneralHelper'],
    function (module, _require, $, _, Backbone, GeneralHelper) {

      var _generalHelper = GeneralHelper.attributes;

      /// <summary>
      /// Transport is responsible for handling HTTP traffic between an application and UCWA.
      /// </summary>
      /// <param name="targetOrigin">Origin to be used for postMessage.</param>
      /// <remarks>
      /// Transport leverages iframes and HTML5's postMessage for cross-domain
      /// communication. If necessary, it will also handle cases where the domain changes by
      /// injecting a new iframe into a container element.
      /// For more information about postMessage, see:
      ///     http://ucwa.lync.com/documentation/GettingStarted-CrossDomain
      ///     http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html#web-messaging
      ///     http://msdn.microsoft.com/en-us/library/ie/cc197015(v=vs.85).aspx
      /// </remarks>
      var Transport = Backbone.Model.extend({

        // The domain of the UCWA server
        _domain: null,
        // The last xframe link provided by the server
        _xframe: null,
        // The default accept and content type to use for requests
        _defaultType: "application/json",
        // DOM element where the postMessage iframe resides.
        _container: null,
        // The iframe used for postMessage
        _element: null,
        // OAuth token attached to requests
        _accessToken: null,
        // The OAuth token type (also attached to requests)
        _tokenType: null,
        // Callback to execute when a request has started
        _requestStart: null,
        // Callback to execute when a request has stopped
        _requestStop: null,
        // A count of the number of outstanding requests
        _requestCounter: 0,
        // Array out outstanding handlers attached to window's message/onmessage
        _methods: [],
        // Boolean to indicate transport has failed the allowed list previously
        _failedAllowedList: false,
        // An internal reference to the current object. Used in case of changing scope.
        _scope: this,

        constructor: function Transport(targetOrigin) {
          this.targetOrigin = targetOrigin;
          Backbone.Model.prototype.constructor.apply(this, arguments);
        },

        /// <summary>
        /// Prepares the supplied request object for transport via postMessage.
        /// </summary>
        /// <param name="request">Request object to process.</param>
        /// <remarks>
        /// Begin building the results object by setting basic data that is
        /// uniform across HTTP Requests (type, url, basic headers). Check
        /// to see if messageId is supplied and attach. Check to see if
        /// accessToken exists otherwise delete the header as it will cause
        /// conflicts if incorrectly used. Now begin handling the various type
        /// states (get, post/put, delete). Ensure that JSON data is stringified
        /// and the correct content length is used. Ensure that delete requests
        /// only contain a header with authorization credentials. Stringify the
        /// results so they can be passed to postMessage.
        /// </remarks>
        /// <returns>String representing the Request object.</returns>
        createClientTransportData: function (request) {
          var accessToken = request.accessToken || this._accessToken,
              result      = {
                type: request.type,
                url: request.url,
                headers: {
                  Accept: request.acceptType,
                  Authorization: this._tokenType + " " + accessToken
                }
              };

          if (request.messageId) {
            result.messageId = request.messageId;
          }

          if (!accessToken) {
            delete result.headers.Authorization;
          }

          switch (request.type) {
          case "get":
            // get is handled by the above code...
            break;
          case "post":
              // intentional fall-through to "put"
          case "put":
            if (request.data && request.data.etag) {
              result.headers["If-Match"] = '"' + request.data.etag + '"';
            }

            if (request.data) {
              if (request.contentType.indexOf("json") !== -1) {
                request.data = JSON.stringify(request.data);
              }

              result.headers["Content-Type"] = request.contentType;
            } else {
              request.data = "";
              result.headers["Content-Type"] = "";
            }

            result.data = request.data;
            break;
          case "delete":
            result.headers = {
              Authorization: this._tokenType + " " + accessToken
            };
            break;
          }

          return JSON.stringify(result);
        },

        /// <summary>
        /// Checks a URL to see if it contains enough information to be used as
        /// the HTTP request URL.
        /// </summary>
        /// <param name="url">URL to check.</param>
        /// </param>
        /// <remarks>
        /// Check if supplied URL is an absolute path; if true the URL supplied is the
        /// final URL. If not check if the URL is defined and prepend the internal
        /// domain. If it is not defined use the internal domain.
        /// </remarks>
        /// <returns>String representing the HTTP request url.</returns>
        handleUrl: function (url) {
          var targetUrl,
              index          = url ? url.indexOf("://") : "",
              isAbsolutePath = index !== -1;

          if (isAbsolutePath) {
            targetUrl = url;
          } else {
            if (url) {
              targetUrl = this._domain + url;
            } else {
              targetUrl = this._domain;
            }
          }

          return targetUrl;
        },

        /// <summary>
        /// Checks for a reason string in the headers of a response.
        /// </summary>
        /// <param name="headerString">The headers as a single string.</param>
        /// <remarks>
        /// The reason string is used to convey important information, such as
        /// the absence of the request's origin from the allowed list.
        /// </remarks>
        /// <returns>The reason string or null.</returns>
        findReasonString: function (headerString) {
          var obj = _generalHelper.parseHeaders(headerString);

          for (var item in obj["X-Ms-diagnostics"]) {
            return obj["X-Ms-diagnostics"][item].reason;
          }

          return null;
        },

        /// <summary>
        /// Checks to see if the request's origin domain is on the allowed list.
        /// </summary>
        /// <param name="result">A Transport result object.</param>
        /// <remarks>
        /// If the request's origin domain is not on the allowed list, the
        /// application will be unable to proceed.
        /// </remarks>
        handleAllowedList: function (result) {
          if (result.status === 403 && !this._failedAllowedList) {
            var reasonString = this.findReasonString(result.headers);

            if (reasonString !== null) {
              window.console.log(reasonString);
              console.log(reasonString);
              this._failedAllowedList = true;
            }
          }
        },

        /// <summary>
        /// Handles callback logic for a specific message ID.
        /// </summary>
        /// <param name="callback">Callback to execute.</param>
        /// <param name="messageId">Unique identifier for this callback.</param>
        /// <remarks>
        /// Create a temporary method which has access to messageId to check the
        /// incoming response data to see if messageIds match. This temporary
        /// method will be added as a handler for window.onmessage. Upon
        /// completion of execution of the temporary method it will remove itself
        /// as a handler. Handle stopping the request display if no requests are
        /// outstanding.
        /// </remarks>
        /// <returns>Method to be executed upon error/completion.</returns>
        handleCallback: function (callback, messageId, requestUrl) {
          var that = this;
          var method = function (data) {
            var result = JSON.parse(data.data);
            that.handleAllowedList(result);
            if (result.messageId === messageId) {
              if (that._requestStop) {
                that._requestCounter--;

                if (that._requestCounter <= 0) {
                  that._requestStop();
                }
              }

              try {
                var headers = _generalHelper.parseHeaders(result.headers);

                if (headers["Content-Type"] && headers["Content-Type"].length &&
                    headers["Content-Type"].indexOf(this._defaultType) !== -1) {
                  try {
                    result.results = JSON.parse(result.responseText);

                    var changed = that.testForDomainChanges(result.results, function () {
                      _generalHelper.safeCallbackExec({
                        callback: callback,
                        params: [
                          result
                        ],
                        error: "Encountered error executing transport callback"
                      });

                      that.removeHandler(method);
                    });

                    if (changed) {
                      return;
                    }
                  } catch (e) {
                    window.console.error("Encountered error parsing response: " + e.message);
                  }
                }
              } catch (e) {
                window.console.error("Encountered error handling response: " + e.message);
              }

              _generalHelper.safeCallbackExec({
                callback: callback,
                params: [
                  result
                ],
                error: "Encountered error executing transport callback"
              });

              that.removeHandler(method);
            }
          }

          that.addHandler(method);

          return method;
        },

        /// <summary>
        /// Adds the supplied method as a handler for onmessage (message).
        /// </summary>
        /// <param name="method">Method to add as a handler.</param>
        /// <remarks>
        /// Depending on the browser, it will add a handler for onmessage
        /// or message. When the cross-domain frame sends the response
        /// back to the client via postMessage, method will be executed.
        /// </remarks>
        addHandler: function (method) {
          if (window.attachEvent) {
            window.attachEvent("onmessage", method)
          } else {
            window.addEventListener("message", method);
          }

          this._methods.push(method);
        },

        /// <summary>
        /// Removes the supplied method as a handler for onmessage (message).
        /// </summary>
        /// <param name="method">Method to remove as a handler.</param>
        /// <remarks>
        /// Depending on the browser it will remove a handler for onmessage
        /// or message.
        /// </remarks>
        removeHandler: function (method) {
          if (window.detachEvent) {
            window.detachEvent("onmessage", method);
          } else {
            window.removeEventListener("message", method);
          }

          var index = this._methods.indexOf(method);

          if (index !== -1) {
            this._methods.splice(index, 1);
          }
        },

        /// <summary>
        /// Checks for frame changes and injects a new frame, if necessary.
        /// </summary>
        /// <param name="request">Data object to check.</param>
        /// <remarks>
        /// Check for the presence of an xframe link and compare it to the last seen
        /// xframe. If the new xframe differs from the stored xframe, inject a new
        /// frame using the new href.
        /// </remarks>
        /// <returns>Boolean indicating whether or not there was a frame change.</returns>
        testForDomainChanges: function (request, callback) {
          if (request._links && request._links.xframe) {
            if (this._xframe !== request._links.xframe.href) {
              this._xframe = request._links.xframe.href;
              this._scope.injectFrame(this._xframe, this._container, callback);

              return true;
            }
          }

          return false;
        },

        /// <summary>
        /// Gets the domain that Transport is currently sending requests to.
        /// </summary>
        /// <returns>String representing the domain.</returns>
        getDomain: function () {
          return this._domain;
        },

        /// <summary>
        /// Sets the element and domain to be used for requests.
        /// </summary>
        /// <param name="element">Element that will receive requests.</param>
        /// <param name="xframe">Absolute URL of the iframe's target.</param>
        /// <remarks>
        /// With these two elements set, the Transport library can attempt
        /// to make HTTP requests using postMessage on the element.
        /// </remarks>
        setElement: function (element, xframe) {
          if (element) {
            this._element = element;
            this._domain = _generalHelper.extractOriginFromAbsoluteUrl(xframe);
          }
        },

        /// <summary>
        /// Sets authorization credentials to be used in requests.
        /// </summary>
        /// <param name="accessToken">Unique identifier.</param>
        /// <param name="tokenType">Type of access token.</param>
        setAuthorization: function (accessToken, tokenType) {
          this._accessToken = accessToken;
          this._tokenType = tokenType;
        },

        /// <summary>
        /// Gets currently stored authorization credentials.
        /// </summary>
        /// <returns>Object containing accessToken and tokenType.</returns>
        getAuthorization: function () {
          return {
            accessToken: this._accessToken,
            tokenType: this._tokenType
          };
        },

        /// <summary>
        /// Sets request callbacks to be executed when requests are started
        /// and stopped.
        /// </summary>
        /// <param name="callbacks">Object containing callbacks.</param>
        /// <remarks>
        /// callbacks should an object in the form of:
        /// {
        ///     start: (may be omitted),
        ///     stop: (may be omitted)
        /// }
        /// </remarks>
        setRequestCallbacks: function (callbacks) {
          if (callbacks) {
            if (callbacks.start) {
              this._requestStart = callbacks.start;
            }

            if (callbacks.stop) {
              this._requestStop = callbacks.stop;
            }
          }
        },

        /// <summary>
        /// Uses HTML5's postMessage to send a Request object to a remote location.
        /// </summary>
        /// <param name="request">Object containing request data.</param>
        /// <remarks>
        /// request should an object in the form of:
        /// {
        ///     url: "myLink" (Http request url),
        ///     type: "get" (get, post, put, delete),
        ///     acceptType: "application/json" (default, can be omitted),
        ///     contentType: "application/json" (default, can be omitted),
        ///     data: "hello world" (any kind of JSON data),
        ///     accessToken: override Transport's current access token for this request
        ///     callback: (may be omitted),
        ///     notifyAction: true/false (may be omitted)
        /// }
        /// Check if an internal element and domain have been set. Otherwise, no
        /// remote communications will be possible. Next check to see if domain
        /// changes have occurred, which might require a new iframe. Generate a UUID
        /// and attach it to the Request object as it will be used to link
        /// the response data to the correct callback. If a requestStart callback
        /// has been set and notifyAction is not false the requestStart callback
        /// will be executed. Finally use the internal element to post a message
        /// by transforming the Request object into a request data.
        /// </remarks>
        clientRequest: function (request) {
          if (this._element && this._domain) {
            var messageId = _generalHelper.generateUUID(),
                handler   = this.handleCallback(request.callback, messageId, request.url);

            if (this._requestStart && request.notifyAction !== false) {
              this._requestStart();
              this._requestCounter++;
            }

            try {
              this._element.postMessage(this.createClientTransportData({
                url: this.handleUrl(request.url),
                type: request.type.toLocaleLowerCase(),
                data: request.data,
                acceptType: _generalHelper.getValue(this._defaultType, request.acceptType),
                contentType: _generalHelper.getValue(this._defaultType, request.contentType),
                messageId: messageId,
                accessToken: request.accessToken
              }), _generalHelper.getValue("*", this.targetOrigin));
            } catch (e) {
              window.console.log("Encountered error with clientRequest: " + e.message);

              var response = {
                messageId: messageId,
                headers: "",
                status: 400
              };

              handler({
                data: JSON.stringify(response)
              });
            }
          }
        },

        /// <summary>
        /// Injects an iframe located on the domain into the supplied container.
        /// </summary>
        /// <param name="xframe">Absolute URL to the iframe's target.</param>
        /// <param name="container">DOM element that will contain the to-be-injected iframe.</param>
        /// <param name="callback">Callback to execute when the frame is loaded into the DOM.</param>
        /// <remarks>
        /// After the iframe is created, an event handler will be set up to run after the iframe is loaded.
        /// This event handler sets the element and domain, and executes the supplied callback,
        /// if defined.
        /// </remarks>
        injectFrame: function (xframe, container, callback) {
          this._container = container;

          var method = function () {
            window.clearTimeout(loadId);

            var id = window.setTimeout(function () {
              window.console.log("Frame location not found within timeout (10000): " + xframe);

              _generalHelper.safeCallbackExec({
                callback: callback,
                params: [
                  {
                    status: 408,
                    link: xframe
                  }
                ],
                error: "Encountered error executing frame injection callback"
              });
            }, 10000);

            this._scope.setElement(frame[0].contentWindow, xframe);
            this._scope.clientRequest({
              url: xframe,
              type: "get",
              acceptType: "text/html",
              notifyAction: false,
              callback: function (data) {
                window.clearTimeout(id);

                _generalHelper.safeCallbackExec({
                  callback: callback,
                  params: [
                    data
                  ],
                  error: "Encountered error executing frame injection callback"
                });
              }
            });
          };

          var frame  = $("<iframe></iframe>").load(method).attr("src", xframe),
              loadId = window.setTimeout(method, 10000);

          this._container.html(frame);
        },

        /// <summary>
        /// Removes outstanding handlers still attached to window's (on)message event.
        /// </summary>
        cleanup: function () {
          for (var i = 0; i < this._methods.length; i++) {
            this.removeHandler(this._methods[i]);
          }
        }

      });
      return Transport;

    });
/* Copyright (C) Microsoft 2014. All rights reserved. */
csui.define('esoc/widgets/userwidget/chat/skype/lib/Mime',['module', 'require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/backbone',
      'esoc/widgets/userwidget/chat/skype/lib/GeneralHelper'],
    function (module, _require, $, _, Backbone, GeneralHelper) {

      var _generalHelper = GeneralHelper.attributes;

      /// <summary>
      /// The functions in Mime.js can be used for processing multipart messages, as used by Batch,
      /// and translating them into Message objects, like those in Transport or JavaScript's XHR.
      /// </summary>
      /// <param name="defaultBoundary">Default value to use as a boundary.</param>
      /// <remarks>
      /// For more information about multipart, see the RFC.
      ///     https://www.ietf.org/rfc/rfc2046
      /// For more information about Message objects, see
      ///     http://msdn.microsoft.com/en-us/library/ie/ms535874(v=vs.85).aspx
      /// </remarks>
      var Mime = new Backbone.Model({

        /// <summary>
        /// Processes the header, looking for the boundary.
        /// </summary>
        /// <param name="header">Header data to process.</param>
        /// <remarks>
        /// Split the header on '\n' and begin searching for "boundary"
        /// After this is found, take the result. If it was not found,
        /// return the default boundary.
        /// </remarks>
        /// <returns>String representation of the boundary.</returns>
        processHeader: function (header) {
          var data = $.trim(header).split("\n");

          for (var line in data) {
            if (data[line].indexOf("boundary") !== -1) {
              var temp = data[line].split(";");

              for (var item in temp) {
                if (temp[item].indexOf("boundary") !== -1) {
                  var result = $.trim(temp[item].split("=")[1]);

                  if (result[0] === '"' && result[result.length - 1] === '"') {
                    return result.slice(1, -1);
                  }

                  return result;
                }
              }
            }
          }

          // No boundary was found in the results...
          //return defaultBoundary;
        },

        /// <summary>
        /// Processes the body using the boundary.
        /// </summary>
        /// <param name="boundary">Boundary to use in processing.</param>
        /// <param name="body">Body data to process.</param>
        /// <remarks>
        /// Split the body on the boundary + "--" and for each part found,
        /// begin building Message objects to hold the data. Add these objects
        /// to an array.
        /// </remarks>
        /// <returns>An array of Message objects.</returns>
        processBody: function (boundary, body) {
          var data     = body.split("--" + boundary),
              parsed   = [],
              messages = [];

          for (var part in data) {
            if ($.trim(data[part]) !== "" && $.trim(data[part]) !== "--") {
              var partData    = $.trim(data[part]).split("\r\n"),
                  message     = {
                    status: null,
                    statusText: null,
                    responseText: "",
                    header: "",
                    messageId: null
                  },
                  contentType = null;

              for (var item in partData) {
                if (contentType === null && partData[item].indexOf("Content-Type") !== -1) {
                  contentType = this.determineContentType(partData[item]);

                  if (contentType !== null && message.header === "") {
                    message.header = this.readHeader(partData, item);
                  }
                } else if (partData[item].indexOf("HTTP/1.1") !== -1) {
                  message.status = partData[item].split(" ")[1];
                  message.header = this.readHeader(partData, ++item);
                } else if (contentType !== null && $.trim(partData[item]) !== "") {
                  message.responseText = partData[item];
                  if (contentType === "json") {
                    message.results = JSON.parse($.trim(partData[item]));
                  }
                }
              }

              messages.push(message);
            }
          }

          return messages;
        },

        /// <summary>
        /// Determines the content type of the supplied data.
        /// </summary>
        /// <param name="data">Data to check.</param>
        /// <remarks>
        /// Search for type (application/json)
        /// and if found, return the type. If not found, attempt to split the result
        /// to get type.
        /// </remarks>
        /// <returns>String representation of the content type.</returns>
        determineContentType: function (data) {
          var contentType  = null,
              expectedType = "json";

          if (data.indexOf("http; msgtype=response") === -1) {
            var index = data.indexOf(expectedType);

            if (index !== -1) {
              contentType = expectedType;
            } else {
              contentType = $.trim(data).split('/')[1];
            }
          }

          return contentType;
        },

        /// <summary>
        /// Reads header data from the parts object based on index.
        /// </summary>
        /// <param name="parts">Array of strings to process.</param>
        /// <param name="index">Index into the parts array.</param>
        /// <remarks>
        /// While not at the end of the parts array, concatenate the
        /// parts into a multi-line header.
        /// </remarks>
        /// <returns>String representation of the complete header.</returns>
        readHeader: function (parts, index) {
          var header = "";
          while ($.trim(parts[index]) !== "" && index < parts.length) {
            header = header.concat(parts[index], "\n");
            index++;
          }

          return header;
        },

        /// <summary>
        /// Begins processing of data into an array of Message objects.
        /// </summary>
        /// <param name="data">Data containing MIME messages.</param>
        /// <returns>Returns an array of Message objects in the form of:
        /// {
        ///     status: 200,
        ///     statusText: "success",
        ///     responseText: "{data: "hello world"}",
        ///     header: "Cache-Control: no-store",
        ///     messageId: null
        /// }
        /// </returns>
        processMessage: function (data) {
          var boundary = this.processHeader(data.headers),
              result   = this.processBody(boundary, data.responseText);

          return result;
        }

      });
      return Mime;

    });
/* Copyright (C) Microsoft 2014. All rights reserved. */
csui.define('esoc/widgets/userwidget/chat/skype/lib/Batch',['module', 'require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/backbone',
      'esoc/widgets/userwidget/chat/skype/lib/GeneralHelper',
      'esoc/widgets/userwidget/chat/skype/lib/Mime'],
    function (module, _require, $, _, Backbone, GeneralHelper, Mime) {

      var _generalHelper = GeneralHelper.attributes,
          mime           = Mime.attributes;

      /// <summary>
      /// Batch is responsible for packaging multiple HTTP requests into a single
      /// request that is sent with a this.transport object.
      /// </summary>
      /// <param name="this.cache">this.cache object used during batching.</param>
      /// <param name="this.transport">this.transport object used during batching.</param>
      /// <param name="timerLimit">Timer limit in milliseconds (ms) until outstanding requests are sent.</param>
      /// <remarks>
      /// For more information about multipart, see the RFC:
      ///     https://www.ietf.org/rfc/rfc2046
      /// It has a queuing mechanism that stores up to 20 requests before sending.
      /// The queue can also be sent as a result of a timer elapsing (defaults to three seconds)
      /// or explicitly with a call.
      /// </remarks>
      var Batch = Backbone.Model.extend({

        // The default content type for each batch part
        _defaultType: "application/json",
        // The current queue of requests to be sent as a batch
        _batchQueue: [],
        // The size of the batch queue
        _batchSize: 20,
        // The ID of the timer object created by setTimeout()
        _timerId: null,
        // The default amount of the time, in ms, before a batch is sent (three seconds)
        _defaultTimerLimit: 3000,

        /// <summary>
        /// Builds an HTTP request based on supplied content.
        /// </summary>
        /// <param name="content">Object containing HTTP request data.</param>
        /// <remarks>
        /// content should be an object in the form of:
        /// {
        ///     url: "myLink" (HTTP request URL),
        ///     type: "get" (get, post, put, delete),
        ///     acceptType: "application/json" (default, can be omitted),
        ///     data: "hello world" (any kind of JSON data),
        /// }
        /// </remarks>
        /// <returns>
        /// Message object based on supplied content in the form of:
        /// {
        ///     request: "GET https://www.example.com HTTP/1.1",
        ///     Host: "https://www.example.com",
        ///     Accept: "application/json",
        ///     data: "hello world" (any kind of JSON data)
        /// }
        ///</returns>
        constructor: function Batch(cache, transport, timerLimit) {
          this.cache = cache;
          this.transport = transport;
          this.timerLimit = timerLimit;
          Backbone.Model.prototype.constructor.apply(this, arguments);
        },
        buildMessage: function (content) {
          var host           = null,
              request        = null,

              // Determine if the URL is absolute or relative
              index          = content.url.indexOf("://"),
              isAbsolutePath = index !== -1;

          if (isAbsolutePath) {
            index += 3;

            // Grab the host portion of the URL - [char 0 to the third slash]
            // [https://example.com/]path/to/file.html
            host = content.url.slice(index).split("/", 1)[0];
            request = content.type.toUpperCase() + " " + content.url.slice(index + host.length) +
                      " " + "HTTP/1.1";
          } else {
            index = this.transport.getDomain().indexOf("://");

            if (index !== -1) {
              host = this.transport.getDomain().slice(index + 3);
            } else {
              host = this.transport.getDomain();
            }

            request = content.type.toUpperCase() + " " + content.url + " " + "HTTP/1.1";
          }

          var message = {
            Request: request,
            Host: host,
            Accept: content.acceptType,
            Data: content.data
          };

          return message;
        },

        /// <summary>
        /// Sends a batch request using the previously supplied this.transport object.
        /// </summary>
        /// <remarks>
        /// Builds up a multipart/batching message to be sent as an HTTP request
        /// using the this.transport library. It creates a listing of callbacks
        /// to be executed when the response is returned from the request by using
        /// Mime.js to parse the response and then passing the specific result to
        /// the correct caller.
        /// </remarks>
        sendBatch: function (url) {
          var boundary    = _generalHelper.generateUUID(),
              contentType = "multipart/batching;boundary=" + boundary,
              parts       = [],
              callbacks   = [];

          for (var item in this._batchQueue) {
            parts.push(this.createDataPart(this._batchQueue[item].message, boundary));
            callbacks.push(this._batchQueue[item].callback);
          }

          var method = function (data) {
            var results = mime.processMessage(data);

            for (var i = 0; i < results.length; i++) {
              _generalHelper.safeCallbackExec({
                callback: callbacks[i],
                params: [
                  results[i]
                ],
                error: "Encountered error executing batch callback"
              });
            }
          }

          var data = parts.join("\r\n"),
              that = this;
          data += "\r\n\r\n--" + boundary + "--\r\n";

          this.cache.read({
            id: "main"
          }).done(function (cacheData) {
            that.transport.clientRequest({
              url: url,
              type: "post",
              data: data,
              acceptType: "multipart/batching",
              contentType: contentType,
              callback: method
            });
          });
        },

        /// <summary>
        /// Creates a multipart message object based on the supplied data
        /// and boundary.
        /// </summary>
        /// <param name="part">Message object containing data.</param>
        /// <param name="boundary">Boundary that separates messages.</param>
        /// <remarks>
        /// Builds a message with the correct line endings so it can be
        /// interpreted correctly as a multipart message.
        /// </remarks>
        /// <returns>String representing the Message object.</returns>
        createDataPart: function (part, boundary) {
          var dataPart = "\r\n--" + boundary;
          dataPart += "\r\nContent-Type: application/http; msgtype=request\r\n";
          dataPart += "\r\n" + part.Request;
          dataPart += "\r\n" + "Host: " + part.Host;
          dataPart += "\r\n" + "Accept: " + part.Accept;

          if (part.Data) {
            dataPart += "\r\n" + "Data: " + JSON.stringify(part.Data);
          }

          dataPart += "\r\n";

          return dataPart;
        },

        /// <summary>
        /// Queues an HTTP request to be sent at a later time.
        /// </summary>
        /// <param name="request">HTTP request object (like that from the this.transport library).</param>
        /// <remarks>
        /// The request parameter should an object in the form of:
        /// {
        ///     url: "myLink" (HTTP request URL),
        ///     type: "get" (get, post, put, delete),
        ///     acceptType: "application/json" (default, can be omitted),
        ///     data: "hello world" (any kind of JSON data),
        ///     callback: function(data) {...} (a callback function)
        /// }
        /// Not all parameters are shown. See Tranport's clientRequest for the
        /// full set of parameters. The request object will be changed into a
        /// Message object and put on the batch queue. If the queue grows past
        /// its limit, it will trigger the immediate processing of the
        /// outstanding requests. If not, a timer will start, helping to facilitate
        /// batch processing.
        /// </remarks>
        queueRequest: function (request) {
          var message = this.buildMessage({
            url: request.url,
            type: request.type,
            acceptType: _generalHelper.getValue(this._defaultType, request.acceptType),
            data: request.data
          });

          if (message) {
            this._batchQueue.push({
              message: message,
              callback: request.callback
            });

            if (this._batchQueue.length >= this._batchSize) {
              this.processBatch();
            } else if (!this._timerId) {
              var scope = this;

              this._timerId = window.setTimeout(function () {
                scope.processBatch();
              }, _generalHelper.getValue(this._defaultTimerLimit, this.timerLimit));
            }
          }
        },

        /// <summary>
        /// Begins immediate processing of the batch queue, regardless of timer or queue size.
        /// </summary>
        /// <remarks>
        /// Checks to see if the batch queue has any outstanding requests.
        /// If so, it begins immediate processing. If a timer was active,
        /// it will be cleared. After the batch request is sent, the queue
        /// is cleared.
        /// </remarks>
        processBatch: function (url) {
          if (this._batchQueue.length !== 0) {
            if (this._timerId) {
              window.clearTimeout(this._timerId);
              this._timerId = null;
            }

            this.sendBatch(url);
            this._batchQueue.length = 0;
          }
        }

      });
      return Batch;

    });
/* Copyright (C) Microsoft 2014. All rights reserved. */
csui.define('esoc/widgets/userwidget/chat/skype/lib/Events',['module', 'require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/backbone'],
    function (module, _require, $, _, Backbone) {
      /// <summary>
      /// Events functions can be used to automatically issue event channel requests and
      /// process the resulting responses.
      /// </summary>
      /// <remarks>
      /// These functions also provide a way for business logic to register event handlers.
      /// These handlers are invoked when relevant data is found during response processing.
      /// </remarks>
      /// <param name="cache">Cache object used during eventing.</param>
      /// <param name="transport">Transport object used during eventing.</param>
      /// <param name="options">Object for configuring rate at which events are polled.</param>
      var Events = Backbone.Model.extend({

        _handlingEvents: false,
        // The handlers registered to listen for events
        _handlers: {},

        // The state of the event processing pipeline

        /// <summary>
        /// Continues the event cycle by requesting the next event response.
        /// </summary>
        /// <param name="data">Data to check for event resources.</param>
        /// <remarks>
        /// Check the supplied data object to see if it is non-null and that
        /// _links exists. If it sees either a resync or next resource on
        /// the _links property, make an HTTP request on it to continue the
        /// event cycle. Note that resync is given precedence over next.
        /// </remarks>
        constructor: function Events(cache, transport, options) {
          this.cache = cache;
          this.transport = transport;
          this.options = options;
          Backbone.Model.prototype.constructor.apply(this, arguments);
        },

        /// <summary>
        /// Normalizes event type for easier processing.
        /// </summary>
        /// <param name="eventType">The type of the event being processed.</param>
        /// <remarks>
        /// Noramlize added to started and deleted to completed.
        /// </remarks>
        normalizeEventType: function (eventType) {
          var normalizedEventType = eventType;

          if (normalizedEventType === 'added') {
            normalizedEventType = 'started';
          }

          if (normalizedEventType === 'deleted') {
            normalizedEventType = 'completed';
          }

          return normalizedEventType;
        },

        /// <summary>
        /// Determines whether there are any listeners for this event.
        /// </summary>
        /// <param name="cachedData">The event being checked.</param>
        /// <remarks>
        /// Check for listeners based on operationId, rel, or href.
        /// Also check the global handler, *.
        /// For ease of use, this will fetch a non-embedded resource
        /// and pass it to the handler. Advanced applications might choose to omit
        /// this behavior and decide to fetch in the business logic.
        /// </remarks>
        checkHrefOrOperationListeners: function (cachedData, parts) {
          var tempEventType = this.normalizeEventType(cachedData.type),
              opId          = null,
              localHandlers = [];

          if (cachedData._embedded) {
            opId = cachedData._embedded[cachedData.link.rel].operationId || null;
          }

          localHandlers.push(this._handlers[opId]);
          localHandlers.push(this._handlers[cachedData.link.rel]);
          localHandlers.push(this._handlers[cachedData.link.href]);
          localHandlers.push(this._handlers['*']);
          for (var i = 0; i < localHandlers.length; i++) {
            if (localHandlers[i] && localHandlers[i][tempEventType]) {
              var handler = localHandlers[i][tempEventType];
              try {
                handler(cachedData, parts);
              } catch (e) {
                window.console.log(
                    "Encountered error executing event handler callback: " + e.message);
              }
            }
          }
        },

        /// <summary>
        /// Process event data and notify any subscribed handlers.
        /// </summary>
        /// <param name="data">Event data to process.</param>
        /// <remarks>
        /// Determine whether event handling is already active. If so, iterate over
        /// each event in the response, caching each and
        /// seeing if any match one or more registered handlers.
        /// </remarks>

        processEvents: function (results) {
          var presenceEventLinks = [],
              handler            = [],
              id                 = 0;

          if (results && results.sender && results.sender.length > 0 && results.sender[0]) {
            for (var item in results.sender) {
              var ref = results.sender[item].events;
              for (var subItem in ref) {
                if (!!ref[subItem].link.rel && ref[subItem].link.rel === "contactPresence") {
                  presenceEventLinks[id] = ref[subItem].link.href;
                  handler[id] = ref[subItem].type;
                  id += 1;
                }
              }
            }
            if (handler.length > 0 && !!this._handlers && !!this._handlers.contactPresence) {
              this._handlers.contactPresence.updated(presenceEventLinks);
            }
          }
        },

        /// <summary>
        /// Determine if events href should include additional query parameters.
        /// </summary>
        /// <param name="href">Initial href to events</param>
        /// <remarks>
        /// Events has an internal options object that describe the rate at which
        /// low and medium events (in seconds, 5 minimum / 1800 maximum), priority
        /// for event requests (0 minimum), and timeout when no events are received
        /// (in seconds, 180 minimum, 1800 maximum).
        /// </remarks>
        /// <returns>Href with the appropriate query parameter additions.</returns>
        getEventsHref: function (href) {
          if (this.options) {
            if (this.options.low) {
              if (this.options.low < 5) {
                this.options.low = 5;
              } else if (this.options.low > 1800) {
                this.options.low = 1800
              }

              href += "&low=" + this.options.low;
            }

            if (this.options.medium) {
              if (this.options.medium < 5) {
                this.options.medium = 5;
              } else if (this.options.medium > 1800) {
                this.options.medium = 1800
              }

              href += "&medium=" + this.options.medium;
            }

            if (this.options.priority) {
              if (this.options.priority < 0) {
                this.options.priority = 0;
              }

              href += "&priority=" + this.options.priority;
            }

            if (this.options.timeout) {
              if (this.options.timeout < 180) {
                this.options.timeout = 180;
              } else if (this.options.timeout > 1800) {
                this.options.timeout = 1800
              }

              href += "&timeout=" + this.options.timeout;
            }
          }

          return href;
        },

        /// <summary>
        /// Starts listening to the event channel.
        /// </summary>
        /// <remarks>
        /// Determines whether event handling is already active. If not, it makes
        /// the initial request to start receiving data via the event channel.
        /// </remarks>
        startEvents: function (url) {
          var that = this;
          if (!that._handlingEvents) {
            that._handlingEvents = true;
          }
          return that._handlingEvents;
        },

        /// <summary>
        /// Stops listening to the event channel.
        /// </summary>
        /// <remarks>
        /// Stops listening to the event channel and clears the event handler array.
        /// </remarks>
        stopEvents: function () {
          this._handlingEvents = false;
          this._handlers.length = 0;
        },

        /// <summary>
        /// Adds an event handler.
        /// </summary>
        /// <param name="raiser">The raiser of the event that will trigger the handlers.</param>
        /// <param name="handlers">The set of handlers, one for each event type.</param>
        /// <remarks>
        /// raiser should be an object containing one of the following:
        /// {
        ///     href: "myLink" (relative URL of the resource provided by the server),
        ///     rel: "people" (relation type),
        ///     operationId: "1918-bf83" (unique, client-supplied ID for tracking operation resources on the event channel)
        /// }
        /// handlers should be an object containing one or more of the following:
        /// {
        ///     started : function(data) {...},
        ///     updated : function(data) {...},
        ///     completed : function(data) {...},
        /// }
        /// </remarks>
        addEventHandlers: function (raiser, handlers) {
          var specificRaiser;

          if (raiser) {
            if (raiser.href) {
              specificRaiser = raiser.href;
            } else if (raiser.rel) {
              specificRaiser = raiser.rel;
            } else {
              specificRaiser = raiser.operationId;
            }
          }

          this._handlers[specificRaiser] = handlers;
        },

        /// <summary>
        /// Removes event handlers.
        /// </summary>
        /// <param name="raiser">The raiser of the event to be removed along with handlers.</param>
        /// <remarks>
        /// If a raiser for the event is not found, a console message will indicate as such.
        /// </remarks>
        removeEventHandlers: function (raiser) {
          if (this._handlers[raiser]) {
            delete this._handlers[raiser];
          } else {
            window.console.log("Event handler not found, unable to remove: " + raiser);
          }
        },

        /// <summary>
        /// Updates the local this.options object with new values.
        /// </summary>
        /// <param name="value">Object to update local this.options with.</param>
        /// <remarks>
        /// value comes in the form of:
        /// {
        ///     low - number in seconds (5 - 1800)
        ///     medium - number in seconds (5 - 1800)
        ///     priority - number indicating event priority
        ///     timeout - number in seconds (180 - 1800)
        /// }
        /// </remarks>
        updateEventOptions: function (value) {
          if (!this.options) {
            this.options = {};
          }

          if (value) {
            if (value.low) {
              this.options.low = value.low;
            }

            if (value.medium) {
              this.options.medium = value.medium;
            }

            if (value.priority) {
              this.options.priority = value.priority;
            }

            if (value.timeout) {
              this.options.timeout = value.timeout;
            }
          }
        }

      });
      return Events;
    });
csui.define('esoc/widgets/userwidget/chat/skype/skype.model',['module', 'require', 'csui/lib/jquery',
      'csui/lib/backbone'],
    function (module, _require, $, Backbone) {
      var SkypeModel = Backbone.Model.extend({
        constructor: function SkypeModel(options) {
          Backbone.Model.prototype.constructor.apply(this, arguments);
        },
        initialize: function () {
        }
      });
      return SkypeModel;
    });

csui.define('esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model',['module', 'require', 'csui/lib/jquery',
      'csui/lib/backbone'],
    function (module, _require, $, Backbone) {
      var SkypeAttributeModel = {
        accessToken: null,
        applicationsURL: null,
        batchURL: null,
        autoDiscoverURL: null,
        iFrameURL: null,
        serverURL: null,
        pluginEnabled: false,
        internalServerURL: null,
        externalServerURL: null,
        nameCtrl: null,
        chatEnabled: false,
        presenceEnabled: false,
        chatDomain: null,
        eventHandling: false,
        loginUserSIP:null,

        setLoginUserSIP:function(sip) {
          this.loginUserSIP = sip;
        },

        getLoginUserSIP:function() {
          return this.loginUserSIP;
        },

        setPluginEnabled: function (pluginEnabled) {
          this.pluginEnabled = pluginEnabled;
        },

        isPluginEnabled: function () {
          return this.pluginEnabled;
        },

        setChatDomain: function (chatDomain) {
          this.chatDomain = chatDomain;
        },

        getChatDomain: function () {
          return this.chatDomain;
        },

        setChatEnabled: function (chatEnabled) {
          this.chatEnabled = chatEnabled;
        },

        getChatEnabled: function () {
          return this.chatEnabled;
        },

        setPresenceEnabled: function (presenceEnabled) {
          this.presenceEnabled = presenceEnabled;
        },

        getPresenceEnabled: function () {
          return this.presenceEnabled;
        },

        setInternalServerURL: function (internalServerURL) {
          this.internalServerURL = internalServerURL;
        },

        getInternalServerURL: function () {
          return this.internalServerURL;
        },

        setExternalServerURL: function (externalServerURL) {
          this.externalServerURL = externalServerURL;
        },

        getExternalServerURL: function () {
          return this.externalServerURL;
        },

        setAccessToken: function (accessToken) {
          this.accessToken = accessToken;
        },

        getAccessToken: function () {
          return this.accessToken;
        },

        setApplicationsURL: function (applicationsURL) {
          this.applicationsURL = applicationsURL;
        },

        getApplicationsURL: function () {
          return this.applicationsURL;
        },

        setBatchURL: function (batchURL) {
          this.batchURL = batchURL;
        },
        getBatchURL: function () {
          return this.batchURL;
        },

        setEventURL: function (eventURL) {
          this.eventURL = eventURL;
        },

        getEventURL: function () {
          return this.eventURL;
        },

        setpresenceSubscriptionURL: function (presenceSubscriptionURL) {
          this.presenceSubscriptionURL = presenceSubscriptionURL;
        },

        getpresenceSubscriptionURL: function () {
          return this.presenceSubscriptionURL;
        },

        setCurrentSubscriptionURL: function (currentSubscriptionURL) {
          this.currentSubscriptionURL = currentSubscriptionURL;
        },
        getCurrentSubscriptionURL: function () {
          return this.currentSubscriptionURL;
        },

        setAutoDiscoverURL: function (autoDiscoverURL) {
          this.autoDiscoverURL = autoDiscoverURL;
        },

        getAutoDiscoverURL: function (autoDiscoverURL) {
          return this.autoDiscoverURL;
        },

        setIFrameURL: function (iFrameURL) {
          this.iFrameURL = iFrameURL;
        },

        getIFrameURL: function () {
          return this.iFrameURL;
        },

        setServerURL: function (serverURL) {
          if (this.internalServerURL.indexOf("https://") > -1) {
            this.serverURL = "https://" + serverURL;
          } else {
            this.serverURL = "http://" + serverURL;
          }
        },

        getServerURL: function () {
          return this.serverURL;
        },

        setNameCtrl: function (nameCtrl) {
          this.nameCtrl = nameCtrl;
        },

        getNameCtrl: function () {
          return this.nameCtrl;
        }
      }
      return SkypeAttributeModel;
    });
csui.define('esoc/widgets/userwidget/chat/skype/skypeucwa.application',['module',
      'require',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'esoc/widgets/common/util',
      'csui/lib/backbone',
      'esoc/widgets/userwidget/chat/skype/lib/Cache',
      'esoc/widgets/userwidget/chat/skype/lib/Transport',
      'esoc/widgets/userwidget/chat/skype/lib/Batch',
      'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model',
      'esoc/widgets/userwidget/chat/chatutil',
      'esoc/widgets/userwidget/chat/skype/lib/GeneralHelper'
    ],
    function (module, _require, $, _, CommonUtil, Backbone, Cache, Transport,
        Batch, skypeAttributeModel, ChatUtil, GeneralHelper) {
      var xFrame  = null,
          xFrameUrl,
          count   = 0,
          batchid = 0,
          _generalHelper = GeneralHelper.attributes,
          targetOrigin = skypeAttributeModel.getAutoDiscoverURL();
      var SkypeUCWAApplication = {
        getXframe: function (xFrameEle, xFrameUrl) {
          xFrameEle.html("");
          var xFrame = $("<iframe></iframe>").attr("src", xFrameUrl).attr("id", "xFrame");
          xFrameEle.html(xFrame);
          $('body').append(xFrameEle);
        },
        getRESTServiceURL: function (options) {
          var messageId = ChatUtil.getMessageId(),
              xFrameVal = document.getElementById("xFrame"),
              that      = this;
          that.handleRESTServiceURL(options);
          that.sendRequest(messageId, xFrameVal, skypeAttributeModel.internalServerURL);
        },
        handleRESTServiceURL: function (options) {
          var that = this,
              iframeURL;
          var handleRESTMethod = function (data) {
            // first time request
            if (skypeAttributeModel.getAutoDiscoverURL() === null) {
              var responseData;
              try {
                responseData = JSON.parse(data.data);
              } catch (e) {}
              if (!!responseData) {
                if (responseData.status !== 200 && !!options.deferredObj) {
                  options.deferredObj.resolve();
                } else {
                  try {
                    iframeURL = JSON.parse(responseData.responseText)._links.xframe.href;
                  } catch (e) {}
                  skypeAttributeModel.setIFrameURL(iframeURL);
                  that.getXframe($(".esoc-user-chat-xFrame"), iframeURL);
                  var autoDiscoveryURL = iframeURL.split("/Autodiscover")[0];
                  that.authenticate(autoDiscoveryURL, options);
                  skypeAttributeModel.setAutoDiscoverURL(autoDiscoveryURL);
                }
              }
            }
            ChatUtil.removeHandler(handleRESTMethod);
          }
          ChatUtil.addHandler(handleRESTMethod);
          var method = function () {
            window.clearTimeout(loadId);
            if (iframeURL === undefined && skypeAttributeModel.externalServerURL.length > 0) {
              var externalServerUrl = skypeAttributeModel.externalServerURL;
              that.getXframe($(".esoc-user-chat-xFrame"), externalServerUrl + "/xframe");
              var messageId = ChatUtil.getMessageId(),
                  xFrameVal = document.getElementById("xFrame");
              that.handleExternalRESTServiceURL(options);
              that.sendRequest(messageId, xFrameVal, externalServerUrl);
            }
          }
          var loadId = window.setTimeout(method, 5000);
        },
        handleExternalRESTServiceURL: function (options) {
          var that = this,
              iframeURL;
          var handleExternalRESTMethod = function (data) {
            // first time request
            if (skypeAttributeModel.getAutoDiscoverURL() === null) {
              var responseData;
              try {
                responseData = JSON.parse(data.data);
              } catch (e) {}
              if (!!responseData) {
                if (responseData.status !== 200 && !!options.deferredObj) {
                  options.deferredObj.resolve();
                } else {
                  try {
                    iframeURL = JSON.parse(responseData.responseText)._links.xframe.href;
                  } catch (e) {}
                  skypeAttributeModel.setIFrameURL(iframeURL);
                  that.getXframe($(".esoc-user-chat-xFrame"), iframeURL);
                  var autoDiscoveryURL = iframeURL.split("Autodiscover")[0];
                  that.authenticate(autoDiscoveryURL, options);
                  skypeAttributeModel.setAutoDiscoverURL(autoDiscoveryURL);
                }
              }
            }
            ChatUtil.removeHandler(handleExternalRESTMethod);
          }
          ChatUtil.addHandler(handleExternalRESTMethod);
        },
        authenticate: function (autoDisoverURL, options) {
          var that = this;
          if (!!options && options.appNotFound) {
            skypeAttributeModel.eventHandling = false;
            that.sendAuthRequest(autoDisoverURL, options);
          }
          else {
            $('iframe').on('beforeload', function () {
              that.sendAuthRequest(autoDisoverURL, options);
            });
          }
        },
        handleAuthenticationCallback: function (options) {

          var that = this;
          var method = function (data) {
            var result = JSON.parse(data.data);
            var access_token = null;
            if (result.status !== 200 && !!options.deferredObj) {
              options.deferredObj.resolve();
            }
            else {
              if (!!JSON.parse(result.responseText).access_token) {
                access_token = JSON.parse(result.responseText).access_token;
                skypeAttributeModel.setAccessToken(access_token);
                that.createApplication(skypeAttributeModel.getAutoDiscoverURL(), access_token,
                    options);
              }

              ChatUtil.removeHandler(method);
            }
          };
          ChatUtil.addHandler(method);

        },

        createApplication: function (autoDisoverURL, access_token, options) {
          this.handleCreateApplicationCallback(options);
          if (!!access_token) {
            var messageId       = ChatUtil.getMessageId(),
                applicationArgs = {
                  type: 'post',
                  data: "{\r\n  \"userAgent\":\"esocial1\",\r\n  \"endpointId\":\"" + messageId +
                        "\",\r\n  \"culture\":\"en-US\"\r\n}\r\n",
                  contentType: "application/json",
                  url: autoDisoverURL + "/ucwa/oauth/v1/applications",
                  headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + access_token
                  }
                };
            document.getElementById("xFrame").contentWindow.postMessage(
                JSON.stringify(applicationArgs), _generalHelper.getValue("*", targetOrigin));
          }
        },

        handleCreateApplicationCallback: function (options) {

          var that = this;
          var method = function (data) {

            var result       = JSON.parse(data.data),
                responseData = JSON.parse(result.responseText),
                applicationsURL,
                batchURL,
                eventURL,
                presenceSubscriptionURL;
            if (result.status !== 201 && !!options.deferredObj) {
              options.deferredObj.resolve();
            } else {
              if (!!responseData._links) {
                applicationsURL = responseData._links.self.href;
                batchURL = responseData._links.batch.href;
                eventURL = responseData._links.events.href;

              }
              if (!!responseData._embedded) {
                presenceSubscriptionURL = responseData._embedded.people._links.presenceSubscriptions.href;
              }
              skypeAttributeModel.setApplicationsURL(applicationsURL);
              skypeAttributeModel.setBatchURL(batchURL);
              skypeAttributeModel.setEventURL(eventURL);
              skypeAttributeModel.setpresenceSubscriptionURL(presenceSubscriptionURL);
              if (!!options.deferredObj) {
                options.deferredObj.resolve();
              }

              ChatUtil.removeHandler(method);

            }
          };

          ChatUtil.addHandler(method);

        },
        sendRequest: function (messageId, xFrameVal, url) {
          $('iframe').on('beforeload', function () {
            if (!!xFrameVal) {
              var request = {
                type: 'get',
                url: url,
                contentType: "application/x-www-form-urlencoded;charset='utf-8'",
                headers: {
                  "Accept": "application/json",
                  "Content-Type": "application/x-www-form-urlencoded;charset='utf-8'"
                },
                messageId: messageId
              };
              xFrameVal.contentWindow.postMessage(JSON.stringify(request),
                  _generalHelper.getValue("*", targetOrigin));
            }
          });
        },
        sendAuthRequest: function (autoDisoverURL, options) {
          var messageId = ChatUtil.getMessageId(),
              xFrameVal = document.getElementById("xFrame"),
              that      = this;
          if (xFrameVal !== null) {
            that.handleAuthenticationCallback(options);
            var request = {
              type: 'post',
              url: autoDisoverURL + '/WebTicket/oauthtoken',
              contentType: "application/x-www-form-urlencoded;charset='utf-8'",
              headers: {
                "Accept": "application/json",
                "Content-Type": "application/x-www-form-urlencoded;charset='utf-8'"
              },
              data: {
                "grant_type": "urn:microsoft.rtc:windows"
              },
              messageId: messageId
            };
            xFrameVal.contentWindow.postMessage(JSON.stringify(request),
                _generalHelper.getValue("*", targetOrigin));
          }
        }
      }
      return SkypeUCWAApplication;
    });

csui.define('esoc/widgets/userwidget/chat/skype/skypeucwa.model',[
  'require',
  "csui/lib/jquery",
  "csui/lib/backbone",
  "csui/utils/base",
  'esoc/widgets/userwidget/chat/chatutil',
  'esoc/widgets/userwidget/chat/skype/lib/Cache',
  'esoc/widgets/userwidget/chat/skype/lib/Transport',
  'esoc/widgets/userwidget/chat/skype/lib/Batch',
  'esoc/widgets/userwidget/chat/skype/lib/Events',
  'esoc/widgets/userwidget/chat/skype/skype.model',
  'esoc/widgets/userwidget/chat/skype/skypeucwa.application',
  'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model',
  'esoc/widgets/userwidget/chat/skype/lib/GeneralHelper'
], function (_require, $, Backbone, Base, ChatUtil, Cache, Transport, Batch, Events, SkypeModel,
    skypeUCWAApplication,
    skypeAttributeModel, GeneralHelper) {
  var _generalHelper = GeneralHelper.attributes;
  var SkypeUCWAModel = SkypeModel.extend({
    constructor: function SkypeUCWAModel(options) {
      $("body").append("<span style=\"display:none\" class=\"esoc-user-chat-xFrame\"></span>");
      Backbone.Model.prototype.constructor.apply(this, arguments);
    },
    initialize: function () {
    },
    initializeApplication: function (options) {
      if (skypeAttributeModel.internalServerURL.length > 0) {
        skypeUCWAApplication.getXframe($(".esoc-user-chat-xFrame"),
            skypeAttributeModel.internalServerURL + "/xframe");
        skypeUCWAApplication.getRESTServiceURL(options);
      }
    },
    showUserPresence: function (options) {
      //For batch request, list of email ids are passed as array
      //For user email address is passed, otherwise "me" is set in the request
      options.autoDiscoverURL = skypeAttributeModel.getAutoDiscoverURL();
      if (options.email instanceof Array) {
        var domain       = skypeAttributeModel.getServerURL(),
            targetOrigin = skypeAttributeModel.getAutoDiscoverURL(),
            timerLimit   = 4000,
            xFrameEle    = document.getElementById("xFrame"),
            cache        = Cache.attributes,
            transport    = new Transport(targetOrigin),
            batch        = new Batch(cache, transport, timerLimit),
            id           = 0,
            element;

        cache.create({
          id: "main",
          data: {}
        });

        if (!!xFrameEle) {
          element = xFrameEle.contentWindow;
          transport.setElement(element, domain);
        }

        transport.setAuthorization(skypeAttributeModel.getAccessToken(), "Bearer");

        if (!!options.email && options.email.length > 0) {
          for (id = 0; id < options.email.length; id++) {
            batch.queueRequest({
              url: skypeAttributeModel.getAutoDiscoverURL() +
                   options.email[id],
              type: "get",
              callback: function (data) {
                var code = JSON.parse(data.responseText).subcode;
                if (data.status === 401) {
                  var appNotFoundOptions = {
                    appNotFound: true
                  };
                  skypeUCWAApplication.authenticate(options.autoDiscoverURL, appNotFoundOptions);
                } else {
                  var selfUrl = JSON.parse(data.responseText)._links.self.href;
                  if (options.models) {
                    for (var i = 0; i < options.models.length; i++) {
                      if (selfUrl.indexOf(options.models[i].get("screen_name").toLowerCase()) >
                          0) {
                        var presence = {status: JSON.parse(data.responseText).availability};
                        //Commenting lastActive time calculations as the timestamp from the server is coming wrong
                        /*var lastActive = JSON.parse(data.responseText).lastActive;
                        if (lastActive) {
                          lastActive = Base.formatFriendlyDateTimeNow(lastActive);
                          presence.lastActive = lastActive;
                        }*/
                        presence.activity = JSON.parse(data.responseText).activity;
                        if (options.models) {
                          options.models[i].trigger("presence:update", presence);
                        }
                      }
                    }
                  }
                }
              }
            });
          }
        }
        batch.processBatch(targetOrigin + skypeAttributeModel.getBatchURL());
      } else {
        var url       = skypeAttributeModel.getAutoDiscoverURL() +
                        skypeAttributeModel.getApplicationsURL(),
            xFrameVal = document.getElementById("xFrame");
        url = url + "/people/" + options.email + "/presence";

        this.handlePresenceCallback(options);

        if (!!xFrameVal) {
          var presenceArgs = {
            type: 'get',
            messageId: this.messageId,
            url: url,
            headers: {
              "Accept": "application/json",
              "Authorization": "Bearer " + skypeAttributeModel.getAccessToken()
            }
          };
          document.getElementById("xFrame").contentWindow.postMessage(
              JSON.stringify(presenceArgs), _generalHelper.getValue("*", targetOrigin));
        }
      }
    },
    handlePresenceCallback: function (options) {
      var method = function (data) {
        var result;
        try {
          result = JSON.parse(data.data);
        } catch (e) {}
        if (!!result.responseText) {
          var code;
          try {
            code = JSON.parse(result.responseText).subcode;
          } catch (e) {}
          if ((result.status === 404 && code === "ApplicationNotFound") ||
              (result.status === 401)) {
            var appNotFoundOptions = {
              appNotFound: true
            };
            skypeUCWAApplication.authenticate(options.autoDiscoverURL, appNotFoundOptions);
          } else {
            var availability;
            try {
              availability = JSON.parse(result.responseText).availability;
            } catch (e) {}
            var chatOptions = {};
            //Commenting lastActive time calculations as the timestamp from the server is coming wrong
            /*var lastActive = JSON.parse(result.responseText).lastActive;
            if (lastActive) {
              lastActive = Base.formatFriendlyDateTimeNow(lastActive);
              chatOptions.lastActive = lastActive;
            }*/
            chatOptions.status = availability;
            try {
              chatOptions.activity = JSON.parse(result.responseText).activity;
            } catch (e) {}
            ChatUtil.updatePresenceModel(options, chatOptions);

            ChatUtil.removeHandler(method);
          }

        }
      };
      ChatUtil.addHandler(method);

    },
    updateEventPresence: function (options) {
      var domain                 = skypeAttributeModel.getServerURL(),
          targetOrigin           = skypeAttributeModel.getAutoDiscoverURL(),
          xFrameEle              = document.getElementById("xFrame"),
          currentSubscriptionUrl = skypeAttributeModel.getCurrentSubscriptionURL(),
          cache                  = Cache.attributes,
          transport              = new Transport(targetOrigin),
          events                 = new Events(cache, transport),
          SkypeUCWAModel         = !!SkypeUCWAModel ? SkypeUCWAModel :
                                   _require("esoc/widgets/userwidget/chat/skype/skypeucwa.model"),
          element;

      if (!!currentSubscriptionUrl) {
        this.deleteSubscription(currentSubscriptionUrl, options);
      }

      else {
        this.sendSubscription(options);
      }
      cache.create({
        id: "main",
        data: {}
      });
      if (!!xFrameEle) {
        element = xFrameEle.contentWindow;
        transport.setElement(element, domain);
      }

      transport.setAuthorization(skypeAttributeModel.getAccessToken(), "Bearer");

      events.addEventHandlers({
            rel: "contactPresence"
          },
          {
            updated: function (data) {
              if (options.email instanceof Array) {
                var eventOptions = {
                  email: data,
                  models: options.models
                };
                SkypeUCWAModel.showUserPresence(eventOptions);
              } else {
                SkypeUCWAModel.showUserPresence(options);
              }
            }
          });
    },
    sendAckRequest: function () {
      var targetOrigin = skypeAttributeModel.getAutoDiscoverURL(),
          eventURL     = targetOrigin + skypeAttributeModel.getEventURL(),
          xFrameEle    = document.getElementById("xFrame"),
          messageId    = ChatUtil.getMessageId();
      if (xFrameEle !== null && !skypeAttributeModel.eventHandling) {
        skypeAttributeModel.eventHandling = true;
        this.handleEventCallback();
        var request = {
          type: 'get',
          url: eventURL,
          contentType: "application/x-www-form-urlencoded;charset='utf-8'",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded;charset='utf-8'",
            "Authorization": "Bearer " + skypeAttributeModel.getAccessToken()
          },
          messageId: messageId
        };
        xFrameEle.contentWindow.postMessage(JSON.stringify(request),
            _generalHelper.getValue("*", targetOrigin));
      }
    },
    handleEventCallback: function () {
      var targetOrigin = skypeAttributeModel.getAutoDiscoverURL(),
          responseData,
          that         = this;
      var eventMethod = function (data) {
        var result = JSON.parse(data.data);
        if (!!result.responseText) {
          responseData = JSON.parse(result.responseText);
          if (responseData.status === 401 || responseData.subcode === "ApplicationNotFound") {
            var appNotFoundOptions = {
              appNotFound: true
            };
            skypeUCWAApplication.authenticate(targetOrigin, appNotFoundOptions);
          } else {
            if (!!responseData.sender) {
              that.processEvents(result);
            }
            ChatUtil.removeHandler(eventMethod);
          }

        }
      };
      ChatUtil.addHandler(eventMethod);
    },
    processEvents: function (result) {
      var domain         = skypeAttributeModel.getServerURL(),
          targetOrigin   = skypeAttributeModel.getAutoDiscoverURL(),
          xFrameEle      = document.getElementById("xFrame"),
          cache          = Cache.attributes,
          transport      = new Transport(targetOrigin),
          events         = new Events(cache, transport),
          SkypeUCWAModel = !!SkypeUCWAModel ? SkypeUCWAModel :
                           _require("esoc/widgets/userwidget/chat/skype/skypeucwa.model"),
          data           = JSON.parse(result.responseText),
          element;
      if (skypeAttributeModel.eventHandling) {
        if (!!xFrameEle) {
          element = xFrameEle.contentWindow;
          transport.setElement(element, domain);
        }

        transport.setAuthorization(skypeAttributeModel.getAccessToken(), "Bearer");

        if (data && data._links) {
          if (data._links.resync) {
            transport.clientRequest({
              url: targetOrigin + data._links.resync.href,
              type: "get",
              acceptType: 'application/json',
              callback: SkypeUCWAModel.processEvents,
              notifyAction: false
            });
          } else if (data._links.next) {
            transport.clientRequest({
              url: targetOrigin + data._links.next.href,
              type: "get",
              acceptType: 'application/json',
              callback: SkypeUCWAModel.processEvents,
              notifyAction: false
            });
          }
        }
        events.processEvents(data);
      }
    },
    sendSubscription: function (options) {
      var domain          = skypeAttributeModel.getServerURL(),
          targetOrigin    = skypeAttributeModel.getAutoDiscoverURL(),
          subscriptionURL = targetOrigin + skypeAttributeModel.getpresenceSubscriptionURL(),
          xFrameEle       = document.getElementById("xFrame"),
          transport       = new Transport(targetOrigin),
          element;
      if (!!xFrameEle) {
        element = xFrameEle.contentWindow;
        transport.setElement(element, domain);
      }

      transport.setAuthorization(skypeAttributeModel.getAccessToken(), "Bearer");
      var sips = [];
      if (options.email instanceof Array) {

        for (var id = 0; id < options.email.length; id++) {
          sips[id] = "sip:" + options.email[id];
        }
      } else {
        sips[0] = "sip:" + options.email;
      }

      var data = {
        "duration": 30,
        "uris": sips
      };
      if (sips.length > 0) {
        var that = this;
        transport.clientRequest({
          url: subscriptionURL,
          type: "post",
          contentType: "application/json",
          data: data,
          callback: function (data) {
            var responseData = JSON.parse(data.responseText);
            if (responseData.status === 401 || responseData.subcode === "ApplicationNotFound") {
              var appNotFoundOptions = {
                appNotFound: true
              };
              skypeUCWAApplication.authenticate(targetOrigin, appNotFoundOptions);
            } else {
              skypeAttributeModel.setCurrentSubscriptionURL(
                  JSON.parse(data.responseText)._links.self.href);
              that.processEvents(data);
              if (options.subscribeEvent) {
                that.sendAckRequest();
              }
            }
          }
        });
      }
    },
    deleteSubscription: function (url, options) {
      var domain       = skypeAttributeModel.getServerURL(),
          targetOrigin = skypeAttributeModel.getAutoDiscoverURL(),
          xFrameEle    = document.getElementById("xFrame"),
          cache        = Cache.attributes,
          transport    = new Transport(targetOrigin),
          events       = new Events(cache, transport),
          element;
      if (!!xFrameEle) {
        element = xFrameEle.contentWindow;
        transport.setElement(element, domain);
      }
      transport.setAuthorization(skypeAttributeModel.getAccessToken(), "Bearer");
      var that = this;
      transport.clientRequest({
        url: targetOrigin + url,
        type: "delete",
        callback: function (data) {
          skypeAttributeModel.setCurrentSubscriptionURL(null);
          if (!!data.responseText) {
            var responseData = JSON.parse(data.responseText);
            if (responseData.status === 401 || responseData.subcode === "ApplicationNotFound") {
              var dfd = $.Deferred();
              var appNotFoundOptions = {
                appNotFound: true,
                deferredObj: dfd
              };
              skypeUCWAApplication.authenticate(targetOrigin, appNotFoundOptions);
              dfd.promise().done(function () {
                if (!!options) {
                  that.sendSubscription(options);
                } else {
                  events.removeEventHandlers("contactPresence");
                  skypeAttributeModel.eventHandling = false;
                }
              });
            }
          } else {
            if (!!options) {
              that.sendSubscription(options);
            } else {
              events.removeEventHandlers("contactPresence");
              skypeAttributeModel.eventHandling = false;
            }
          }
        }
      });
    }
  });

  return new SkypeUCWAModel;
});
csui.define('esoc/widgets/userwidget/chat/skype/skypeplugin.model',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  'esoc/widgets/userwidget/chat/chatutil',
  'esoc/widgets/userwidget/chat/skype/skype.model',
  'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model'
], function ($, Backbone, ChatUtil, SkypeModel, skypeAttributeModel) {

  var SkypePluginModel = SkypeModel.extend({
    nameCtrl: null,
    constructor: function SkypePluginModel(options) {
      Backbone.Model.prototype.constructor.apply(this, arguments);
    },
    initialize: function () {
    },
    updateEventPresence: function (options) {
      this.showUserPresence(options);
    },
    showUserPresence: function (options) {
      if (skypeAttributeModel.getChatEnabled() && skypeAttributeModel.getPresenceEnabled()) {
        var chatOptions;
        //For batch request, list of email ids are passed as array
        //For user email address is passed, otherwise "me" is set in the request
        if (options.email instanceof Array) {
          chatOptions = {
            status: false
          };
          var i = 0;
          for (i = 0; i < options.email.length; i++) {
            chatOptions.status = this.nameCtrl.GetStatus(options.email[i],
                String(options.presenceHolder[i]));
            ChatUtil.setIconColor(chatOptions, $("#" + options.presenceHolder[i]));
          }
        } else {
          chatOptions = {
            status: this.nameCtrl.GetStatus(options.email, options.presenceHolder)
          };
          ChatUtil.updatePresenceModel(options, chatOptions);
        }
      }
    },

    attachLyncPresenceChangeEvent: function () {
      if (!this.nameCtrl) {
        return;
      }
      this.nameCtrl.OnStatusChange = this.onLyncPresenceStatusChange;
    },

    onLyncPresenceStatusChange: function (userName, status, id) {
      var presenceIcon = $("#" + id),
          chatOptions  = {
            status: status
          };

      ChatUtil.setIconColor(chatOptions, presenceIcon);

    },

    setNameCtrl: function (vNameCtrl) {
      this.nameCtrl = vNameCtrl;
    },

    getNameCtrl: function () {
      return this.nameCtrl;
    }
  });

  return new SkypePluginModel;
});


csui.define('esoc/widgets/userwidget/chat/realtime/realtime.model',[
  "csui/lib/jquery",
  "csui/lib/backbone"
], function ($, Backbone) {

  var RealTimeModel = Backbone.Model.extend({
    constructor: function RealTimeModel(options) {
      // Define the subviews object off of the prototype chain
      this.submodel = {};
      Backbone.Model.prototype.constructor.apply(this, arguments);
    },
    initialize: function () {
    },
    getUserPresence: function (email) {
    },
    getUsersPresence: function (emailList) {
    }
  });

  return new RealTimeModel;
});


csui.define('esoc/model/pulsesettings/server.adaptor.mixin',[
  'csui/lib/underscore',
  'csui/utils/url',
  'esoc/widgets/common/util'
], function (_, Url, CommonUtil) {
  'use strict';

  var ServerAdaptorMixin = {
    mixin: function (prototype) {
      return _.extend(prototype, {
        makeServerAdaptor: function (options) {
          return this;
        },

        url: function (options) {
          var restUrl = Url.combine(CommonUtil.getV2Url(this.connector.connection.url),
              CommonUtil.REST_URLS.pulseSettingsUrl);
          if (this.options.chat) {
            restUrl = CommonUtil.updateQueryStringValues(restUrl, CommonUtil.globalConstants.FIELDS,
                CommonUtil.globalConstants.CHAT_SEETINGS);
          }
          return restUrl;
        },

        parse: function (response) {
          this.options.fetched = false;
          return response.results;
        }
      });
    }

  };

  return ServerAdaptorMixin;
});

csui.define('esoc/model/pulsesettings.model',['module',
      'require',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'csui/lib/backbone',
      'csui/utils/url',
      'csui/models/mixins/expandable/expandable.mixin',
      'csui/models/mixins/resource/resource.mixin',
      'csui/models/mixins/uploadable/uploadable.mixin',
      'csui/models/mixins/including.additional.resources/including.additional.resources.mixin',
      'esoc/model/pulsesettings/server.adaptor.mixin',
      'csui/models/resource',
      'esoc/widgets/common/util'],
    function (module, _require, $, _, Backbone, Url, ExpandableMixin, ResourceMixin,
        UploadableMixin, IncludingAdditionalResourcesMixin, ServerAdaptorMixin,
        ResourceModel, CommonUtil) {
      var PulseSettingsModel = Backbone.Model.extend(_.extend({},
          ResourceModel(Backbone.Model), {
            constructor: function PulseSettingsModel(attributes, options) {
              Backbone.Model.prototype.constructor.apply(this, arguments);
              this.options = options;
              if (options && options.connector) {
                options.connector.assignTo(this);
              }
              this.options.fetched = true;

              this.makeResource(options)
                  .makeIncludingAdditionalResources(options)
                  .makeUploadable(options)
                  .makeExpandable(options)
                  .makeServerAdaptor(options);

            },
            isFetchable: function () {
              return this.options.fetched;
            }
          }));

      IncludingAdditionalResourcesMixin.mixin(PulseSettingsModel.prototype);
      ExpandableMixin.mixin(PulseSettingsModel.prototype);
      UploadableMixin.mixin(PulseSettingsModel.prototype);
      ResourceMixin.mixin(PulseSettingsModel.prototype);
      ServerAdaptorMixin.mixin(PulseSettingsModel.prototype);

      return PulseSettingsModel;
    });
csui.define('esoc/factory/pulsesettingsfactory',['module',
      'csui/lib/underscore',
      'csui/lib/backbone',
      'csui/utils/contexts/factories/factory',
      'csui/utils/contexts/factories/connector',
      'esoc/model/pulsesettings.model'],
    function (module, _, Backbone, ModelFactory, ConnectorFactory, PulseSettingsModel) {
      var PulseSettingsFactory = ModelFactory.extend({
        propertyPrefix: 'pulsesettings',
        constructor: function PulseSettingsFactory(context, options) {
          ModelFactory.prototype.constructor.apply(this, arguments);
          var pulsesettings = this.options.pulsesettings || {};
          if (!(pulsesettings instanceof Backbone.Model)) {
            var connector = context.getObject(ConnectorFactory, options),
                config    = module.config();
            pulsesettings = new PulseSettingsModel(pulsesettings.attributes ||
                                                   config.attributes, _.defaults(
                {connector: connector}, pulsesettings.options, config.options));
          }
          this.property = pulsesettings;
        },
        isFetchable: function () {
          return this.property.isFetchable();
        },
        fetch: function (options) {
          return this.property.fetch(options);
        }
      });
      return PulseSettingsFactory;
    });

csui.define('esoc/widgets/userwidget/chat/chatfactory',[
  'module',
  'require',
  "csui/lib/jquery",
  'csui/lib/underscore',
  "csui/lib/backbone",
  'esoc/widgets/userwidget/chat/skype/skypeucwa.model',
  'esoc/widgets/userwidget/chat/skype/skypeplugin.model',
  'esoc/widgets/userwidget/chat/realtime/realtime.model',
  'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model',
  'esoc/factory/pulsesettingsfactory',
  'csui/utils/contexts/factories/user'
], function (module, require, $, _, Backbone, SkypeUCWAModel, SkypePluginModel, RealTimeModel,
    skypeAttributeModel, PulseSettingsFactory, UserModelFactory) {

  var ChatFactory = Backbone.Model.extend({
    constructor: function ChatFactory(options) {
      Backbone.Model.prototype.constructor.apply(this, arguments);
    },
    initializeApplication: function (options) {
      this.options = options;
      var that = this;
      var dfd             = $.Deferred(),
          deferredOptions = {
            deferredObj: dfd
          };
      options.context.getModel(PulseSettingsFactory,
          {attributes: {id: "chat"}, options: {chat: true}, permanent: true}).ensureFetched().done(
          function (response) {
            var chatSettings = response.results && response.results.chatSettings;
            if (chatSettings && chatSettings.chatEnabled && chatSettings.presenceEnabled) {
              skypeAttributeModel.setChatEnabled(chatSettings.chatEnabled);
              skypeAttributeModel.setPresenceEnabled(chatSettings.presenceEnabled);
              skypeAttributeModel.setChatDomain(chatSettings.chatDomain);
              skypeAttributeModel.setInternalServerURL(chatSettings.internalServerUrl);
              skypeAttributeModel.setExternalServerURL(chatSettings.externalServerUrl);
              skypeAttributeModel.setServerURL(chatSettings.chatDomain);
              if (SkypePluginModel.getNameCtrl() == null) {
                var nameCtrl = that.getNameCtrl();

                // Calling method to check GetStatus method is available or not.
                try {
                  nameCtrl.GetStatus("", "");
                } catch (exception) {
                  nameCtrl = null;
                }

                if (nameCtrl != null) {
                  skypeAttributeModel.pluginEnabled = true;
                  skypeAttributeModel.setNameCtrl(nameCtrl);
                  var user = that.options.context.getModel(UserModelFactory);
                  var userid = user.get("name") + "@" + chatSettings.chatDomain;
                  skypeAttributeModel.setLoginUserSIP(userid);

                  // Assuming user not logged in
                  if (that.isPlugInLoggedInUser() === false) {

                    skypeAttributeModel.pluginEnabled = false;
                    SkypeUCWAModel.initializeApplication(deferredOptions);
                  }
                } else {
                  skypeAttributeModel.pluginEnabled = false;
                  SkypeUCWAModel.initializeApplication(deferredOptions);
                }
              } else {
                skypeAttributeModel.pluginEnabled = true;
                skypeAttributeModel.setNameCtrl(nameCtrl);
              }

            }
            dfd.resolve();
          });
      return dfd;
    },
    isPlugInLoggedInUser: function () {

      var nameCtrl   = skypeAttributeModel.getNameCtrl(),
          userid     = skypeAttributeModel.getLoginUserSIP(),
          status     = 1,
          isLoggedIn = false,
          i          = 0;

      if (nameCtrl == null) {
        return isLoggedIn;
      }
      // work around to get the actual status.
      for (i = 0; i < 20; i++) {
        status = nameCtrl.GetStatus(userid, "test");

        if (status !== 1) {
          isLoggedIn = true;
          break;
        }
      }

      return isLoggedIn;

    },
    getProvider: function (chatType) {
      var nameCtrl = null;
      if (chatType === "realtime") {
        return RealTimeModel;
      } else {
        // Condition to check, if user logged in once again.
        if (this.isPlugInLoggedInUser() === true) {
          skypeAttributeModel.pluginEnabled = true;
        }

        if (skypeAttributeModel.pluginEnabled) {
          // Assuming user not logged in
          if (this.isPlugInLoggedInUser() === false) {

            skypeAttributeModel.pluginEnabled = false;
            SkypeUCWAModel.initializeApplication();
            return SkypeUCWAModel;
          }
          SkypePluginModel.setNameCtrl(skypeAttributeModel.getNameCtrl());
          SkypePluginModel.attachLyncPresenceChangeEvent();
          return SkypePluginModel;
        } else {
          return SkypeUCWAModel;
        }
      }
    },
    getNameCtrl: function () {
      var nameCtrl = null;
      try {
        try {
          if (this.isCompatibleMSIEVersion()) {
            nameCtrl = new window.ActiveXObject("Name.NameCtrl");
          }
        } catch (ex) {
          nameCtrl = null
        }

        if (nameCtrl == null) {
          nameCtrl = this.createNPApiOnWindowsPlugin("application/x-sharepoint-uc");
          if (nameCtrl.GetStatus === undefined) {
            nameCtrl = null
          }
        }

      } catch (ex) {
        nameCtrl = null
      }
      return nameCtrl;
    },
    isNPAPIOnWinPluginInstalled: function (a) {
      return Boolean(navigator.mimeTypes) && navigator.mimeTypes[a] &&
             navigator.mimeTypes[a].enabledPlugin;
    },
    createNPApiOnWindowsPlugin: function (b) {
      var c = null;
      try {
        c = document.getElementById(b);
        if (!Boolean(c) && this.isNPAPIOnWinPluginInstalled(b)) {
          var a = document.createElement("object");
          a.id = b;
          a.type = b;
          a.width = "0";
          a.height = "0";
          a.style.setProperty("visibility", "hidden", "");
          document.body.appendChild(a);
          c = document.getElementById(b)
        }
      } catch (d) {
        c = null
      }
      return c
    },
    isCompatibleMSIEVersion: function () {

      var ua = window.navigator.userAgent;
      var msie = ua.indexOf("MSIE ");

      if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) { // If Internet Explorer, return version number
        return true
      } else {  // If another browser, return 0
        return false;
      }
    }

  });
  return new ChatFactory;
});

csui.define('esoc/widgets/userwidget/chat/model/presence.model',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'i18n!esoc/widgets/userwidget/nls/lang'
], function ($, _, Backbone, Lang) {
  var PresenceModel = Backbone.Model.extend({
    defaults: {
      status: "Unknown",
      tooltipText: Lang.presenceUnknownTooltipText
    },
    constructor: function PresenceModel(options) {
      this.options = options;
      Backbone.Model.prototype.constructor.apply(this, arguments);
      if (options && options.connector) {
        options.connector.assignTo(this);
      }
    }
  });
  return PresenceModel;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/chat/impl/presence',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.presenceEnabled : depth0),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"2":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "    <div id='esoc-chat-presence-indicator-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "' title='"
    + this.escapeExpression(((helper = (helper = helpers.tooltipText || (depth0 != null ? depth0.tooltipText : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tooltipText","hash":{}}) : helper)))
    + "' class='esoc-chat-presence-indicator\r\n      "
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.status == 'Offline'",{"name":"xif","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      "
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.status == 'Away'",{"name":"xif","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      "
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.status == 'Online'",{"name":"xif","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      "
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.status == 'Busy'",{"name":"xif","hash":{},"fn":this.program(9, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      "
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.status == 'Unknown'",{"name":"xif","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      "
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.status == 'DoNotDisturb'",{"name":"xif","hash":{},"fn":this.program(13, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "' tabindex=\"0\"\r\n         aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.tooltipText || (depth0 != null ? depth0.tooltipText : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tooltipText","hash":{}}) : helper)))
    + "\"></div>\r\n";
},"3":function(depth0,helpers,partials,data) {
    return "esoc-chat-presence-Offline ";
},"5":function(depth0,helpers,partials,data) {
    return "esoc-chat-presence-Away";
},"7":function(depth0,helpers,partials,data) {
    return "esoc-chat-presence-Online";
},"9":function(depth0,helpers,partials,data) {
    return "esoc-chat-presence-Busy";
},"11":function(depth0,helpers,partials,data) {
    return "esoc-chat-presence-Unknown";
},"13":function(depth0,helpers,partials,data) {
    return "esoc-chat-presence-donotdisturb";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.chatEnabled : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_userwidget_chat_impl_presence', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/userwidget/chat/view/presence.view',[
  'require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/marionette',
  'esoc/widgets/userwidget/chat/chatfactory',
  'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model',
  'esoc/widgets/userwidget/chat/model/presence.model',
  'hbs!esoc/widgets/userwidget/chat/impl/presence',
  'esoc/widgets/common/util',
  'css!esoc/widgets/userwidget/chat/chat.css',
  'csui/lib/handlebars.helpers.xif'
], function (require, $, _, Marionette, ChatFactory, SkypeAttributeModel, PresenceModel,
    PresenceIconTemplate, CommonUtil) {
  var PresenceView = Marionette.ItemView.extend({
    template: PresenceIconTemplate,
    templateHelpers: function () {
      return {
        messages: {}
      };
    },
    initialize: function (options) {
      this.options = options;
      var that = this;
      var dfd = ChatFactory.initializeApplication(options);
      dfd.promise().done(function () {
        var chatEnabled = SkypeAttributeModel.getChatEnabled();
        var presenceEnabled = SkypeAttributeModel.getPresenceEnabled();
        if (chatEnabled && presenceEnabled) {
          that.model.attributes.chatEnabled = chatEnabled;
          that.model.attributes.presenceEnabled = presenceEnabled;
          var presenceOptions = _.extend({}, that.options);
          if (!!that.options.username) {
            presenceOptions.email = that.options.username +
                                    CommonUtil.globalConstants.AT_SIGN_SYMBOL +
                                    SkypeAttributeModel.getChatDomain();
            presenceOptions.presenceHolder = "esoc-chat-presence-indicator-" +
                                             that.options.model.attributes.id;
          }
          if (presenceOptions.subscribeEvent) {
            ChatFactory.getProvider().updateEventPresence(presenceOptions);
          } else {
            ChatFactory.getProvider().showUserPresence(presenceOptions);
          }
        }
      });
    },
    constructor: function PresenceView(options) {
      options.model = new PresenceModel(options);
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
      this.model.on('change.presencestatus', this.render, this);
    }
  });
  return PresenceView;
});
// Renders a view in a modal dialog and waits for the user to close it
csui.define('esoc/controls/dialog/dialog.view',['module', 'csui/lib/underscore', 'csui/lib/jquery',
  'csui/controls/dialog/dialog.view',
  'csui/utils/log'
], function (module, _, $, DialogView, log) {

  log = log(module.id);

  var UserDialogView = DialogView.extend({

    templateHelpers: _.extend(function () {
      var userid = "user" + this.options.view.options.userid;
      return {
        binfDialogSizeClassName: (!!this.options.largeSize ? 'binf-modal-lg ' :
                                  (!!this.options.midSize ? 'binf-modal-md ' : ' ')) + userid
      };
    }),

    onRender: function () {
      // FIXME: Do not use className for additional classes; it overrides the prototype
      this.$el
          .addClass(UserDialogView.prototype.className.call(this))
          .attr('tabindex', 0);
      this._renderHeader();

      if (this.options.view) {
        this.body.show(this.options.view);
        this.options.view.triggerMethod('dom:refresh');
        this.options.view.triggerMethod('after:show');
      }

      this._renderFooter();
    }

  });

  return UserDialogView;

});

/* START_TEMPLATE */
csui.define('hbs!esoc/controls/dialog/impl/multiple.dialogs',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div id=\"modalDialogs\" class=\"multi-modal-dialogs\">\r\n  <div class=\"modal-dialogs-inner\" id=\"modalDialogsInner\"></div>\r\n</div>\r\n\r\n";
}});
Handlebars.registerPartial('esoc_controls_dialog_impl_multiple.dialogs', t);
return t;
});
/* END_TEMPLATE */
;
// Renders a view in a modal dialog and waits for the user to close it
csui.define('esoc/controls/dialog/multiple.dialogs.view',['module', 'csui/lib/underscore', 'csui/lib/jquery',
  'csui/lib/backbone', 'csui/lib/marionette',
  'csui/controls/mixins/layoutview.events.propagation/layoutview.events.propagation.mixin',
  'csui/behaviors/keyboard.navigation/tabables.behavior',
  'esoc/controls/dialog/dialog.view',
  'hbs!esoc/controls/dialog/impl/multiple.dialogs',
  'csui/utils/non-emptying.region/non-emptying.region',
  'csui/utils/log',
  'i18n',
  'csui/lib/binf/js/binf'
], function (module, _, $, Backbone, Marionette, LayoutViewEventsPropagationMixin,
    TabablesBehavior, UserDialogView, multipleDialogsTemplate,
    NonEmptyingRegion, log, i18n) {

  log = log(module.id);

  var MultipleDialogsView = Marionette.ItemView.extend({

    className: function () {
      var className = 'cs-dialog binf-modal binf-fade';
      if (this.options.className) {
        className += ' ' + _.result(this.options, 'className');
      }
      return className;
    },

    attributes: {
      'tabindex': '-1', // prevent focus to move outside dialog when tabbing through
      'aria-hidden': 'true'
    },

    template: multipleDialogsTemplate,

    behaviors: {
      TabablesBehavior: {
        behaviorClass: TabablesBehavior,
        recursiveNavigation: true,
        containTabFocus: true
      }
    },

    events: {
      'hide.binf.modal': 'onHiding',
      'hidden.binf.modal': 'onHidden',
      'click .cs-close': 'onClickClose',
      'shown.binf.modal': 'onShown',
      'keydown': 'onKeyInView', // using keydown for fields, so to prevent execution use same event.
      'setCurrentTabFocus': 'setCurrentTabFocus',
      'tabNextRegion': 'tabNextRegion',
      'click .tile-type-action-icon': 'onClickActionIcon'
    },

    constructor: function MultipleDialogsView() {
      Marionette.ItemView.prototype.constructor.apply(this, arguments);
      this.listenToOnce(this, 'before:hide', TabablesBehavior.popTabableHandler);
    },

    onKeyInView: function (event) {
      if (event.keyCode === 40 || event.keyCode === 38) {
        event.stopPropagation();
        event.preventDefault();
      }
      if (event.keyCode === 27) {
        this.destroy(event);
      }
    },

    setCurrentTabFocus: function () {
      this.focusOnLastRegion = true;
      this.$el.trigger("focus");
    },

    tabNextRegion: function () {
      this.trigger('changed:focus');
    },

    onRender: function () {
      // FIXME: Do not use className for additional classes; it overrides the prototype
      this.$el.addClass(MultipleDialogsView.prototype.className.call(this))
          .attr('tabindex', 0);
      this.appendData(this.options.views);
    },
    appendData: function (views) {

      var userDialogView = new UserDialogView({
        view: views[views.length - 1],
        largeSize: this.options.largeSize
      });
      userDialogView.render();
      var childData = userDialogView.$el.find('.binf-modal-dialog').detach();
      this.$el.find('.modal-dialogs-inner').append(childData);
    },

    onShow: function () {
      // Firefox workaround for absolute modal dialogs, it does not position to active element.
      // Scroll the main-body down e.g. 2/3 and open an absolute modal dialog and in Firefox it will start at window position 0.
      // => navigate to pos 0    (Firefox likes window instead of 'body')
      $(window).scrollTop(0);

      this.$el.binf_modal({
        backdrop: 'static',
        keyboard: false,
        paddingWhenOverflowing: false
      });
    },
     onShown : function () {
      // whenever open user simple profile, focus should be on close button.
      this.$el.find('.cs-close').trigger("focus");
     },

    kill: function () {
      MultipleDialogsView.__super__.destroy.apply(this, arguments);
      this._scrollToBegin();
      return true;
    },

    destroy: function (event) {
      // If destroying was not triggered by the modal plugin, hide the
      // dialog first using that interface to prevent memory leaks
      var viewCount = this.options.views.length;
      if (this.$el.is(':visible') && !!viewCount) {
        if (viewCount === 1) {
          this.$el.binf_modal('hide');
        }
        else {
          var currentSlide;
          if ($(event.currentTarget).hasClass("cs-dialog")) {
            currentSlide = $(event.currentTarget).find('.slick-current .binf-modal-dialog');
          } else {
            currentSlide = $(event.currentTarget).closest('.binf-modal-dialog');
          }
          this.options.util.removeSlick();
          var currentSlideIndex = currentSlide.index();
          $(currentSlide).remove();
          if (currentSlideIndex > 0) {
            this.options.util.applySlick(currentSlideIndex - 1);
          } else {
            this.options.util.applySlick(currentSlideIndex);
          }
          this.options.views.length = this.options.views.length - 1;
          if (this.options.views.length === 1) {
            this.$el.trigger("focus");
          }
        }
      } else {
        MultipleDialogsView.__super__.destroy.apply(this, arguments);
        if (this.options.focusCallBack) {
          this.options.focusCallBack();
        } else {
          var focusedElement = this.options.targetEle;
          if (focusedElement && $(focusedElement).is(':visible')) {
            $(focusedElement).trigger("focus");
          }
        }
      }
      this._scrollToBegin();
      this.$el.find('.binf-modal-dialog').length === 1 ? this.$el.find('.cs-close').trigger("focus") :
      this.$el.find('.slick-current .slick -close').trigger("focus");

      return this;
    },

    onHiding: function () {
      this.triggerMethod('before:hide');
    },

    onHidden: function () {
      this.triggerMethod('hide');
      this.destroy();
    },

    onClickClose: function (event) {
      event.preventDefault();
      event.stopPropagation();
      this.destroy(event);
    },

    onClickActionIcon: function (event) {
      //originating view listens this event and then executes their call back function
      this.options.view.trigger("click:actionIcon");
    },

    _scrollToBegin: function () {
      // move the scrollbar of the "body" to the leftmost or rightmost position
      if (i18n.settings.rtl === true) {
        var pos = $('body').width();
        $('body').scrollLeft(pos);
      } else {
        $('body').scrollLeft(0);
      }
    }

  });

  return MultipleDialogsView;

});

/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.8.1
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
// [OT] Declare a csui module
csui.define('esoc/lib/slick/slick',['csui/lib/jquery'], function(jQuery) {
    ;
    (function (factory) {
        'use strict';
        /*if (typeof csui.define === 'function' && csui.define.amd) {
            define(['jquery'], factory);
        } else if (typeof exports !== 'undefined') {
            module.exports = factory(require('jquery'));
        } else {
            factory(jQuery);
        }*/
        // [OT] If slick is not available in JQuery then inherit
    if ( jQuery && !jQuery.fn.slick ) {
        // Define using browser globals otherwise
        // Prevent multiple instantiations if the script is loaded twice
        factory( jQuery );
    }

    }(function ($) {
        'use strict';
        var Slick = window.Slick || {};

        Slick = (function () {

            var instanceUid = 0;

            function Slick(element, settings) {

                var _ = this, dataSettings;

                _.defaults = {
                    accessibility: true,
                    adaptiveHeight: false,
                    appendArrows: $(element),
                    appendDots: $(element),
                    arrows: true,
                    asNavFor: null,
                    prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                    nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                    autoplay: false,
                    autoplaySpeed: 3000,
                    centerMode: false,
                    centerPadding: '50px',
                    cssEase: 'ease',
                    customPaging: function (slider, i) {
                        return $('<button type="button" />').text(i + 1);
                    },
                    dots: false,
                    dotsClass: 'slick-dots',
                    draggable: true,
                    easing: 'linear',
                    edgeFriction: 0.35,
                    fade: false,
                    focusOnSelect: false,
                    focusOnChange: false,
                    infinite: true,
                    initialSlide: 0,
                    lazyLoad: 'ondemand',
                    mobileFirst: false,
                    pauseOnHover: true,
                    pauseOnFocus: true,
                    pauseOnDotsHover: false,
                    respondTo: 'window',
                    responsive: null,
                    rows: 1,
                    rtl: false,
                    slide: '',
                    slidesPerRow: 1,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    speed: 500,
                    swipe: true,
                    swipeToSlide: false,
                    touchMove: true,
                    touchThreshold: 5,
                    useCSS: true,
                    useTransform: true,
                    variableWidth: false,
                    vertical: false,
                    verticalSwiping: false,
                    waitForAnimate: true,
                    zIndex: 1000
                };

                _.initials = {
                    animating: false,
                    dragging: false,
                    autoPlayTimer: null,
                    currentDirection: 0,
                    currentLeft: null,
                    currentSlide: 0,
                    direction: 1,
                    $dots: null,
                    listWidth: null,
                    listHeight: null,
                    loadIndex: 0,
                    $nextArrow: null,
                    $prevArrow: null,
                    scrolling: false,
                    slideCount: null,
                    slideWidth: null,
                    $slideTrack: null,
                    $slides: null,
                    sliding: false,
                    slideOffset: 0,
                    swipeLeft: null,
                    swiping: false,
                    $list: null,
                    touchObject: {},
                    transformsEnabled: false,
                    unslicked: false
                };

                $.extend(_, _.initials);

                _.activeBreakpoint = null;
                _.animType = null;
                _.animProp = null;
                _.breakpoints = [];
                _.breakpointSettings = [];
                _.cssTransitions = false;
                _.focussed = false;
                _.interrupted = false;
                _.hidden = 'hidden';
                _.paused = true;
                _.positionProp = null;
                _.respondTo = null;
                _.rowCount = 1;
                _.shouldClick = true;
                _.$slider = $(element);
                _.$slidesCache = null;
                _.transformType = null;
                _.transitionType = null;
                _.visibilityChange = 'visibilitychange';
                _.windowWidth = 0;
                _.windowTimer = null;

                dataSettings = $(element).data('slick') || {};

                _.options = $.extend({}, _.defaults, settings, dataSettings);

                _.currentSlide = _.options.initialSlide;

                _.originalSettings = _.options;

                if (typeof document.mozHidden !== 'undefined') {
                    _.hidden = 'mozHidden';
                    _.visibilityChange = 'mozvisibilitychange';
                } else if (typeof document.webkitHidden !== 'undefined') {
                    _.hidden = 'webkitHidden';
                    _.visibilityChange = 'webkitvisibilitychange';
                }

                _.autoPlay = $.proxy(_.autoPlay, _);
                _.autoPlayClear = $.proxy(_.autoPlayClear, _);
                _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
                _.changeSlide = $.proxy(_.changeSlide, _);
                _.clickHandler = $.proxy(_.clickHandler, _);
                _.selectHandler = $.proxy(_.selectHandler, _);
                _.setPosition = $.proxy(_.setPosition, _);
                _.swipeHandler = $.proxy(_.swipeHandler, _);
                _.dragHandler = $.proxy(_.dragHandler, _);
                _.keyHandler = $.proxy(_.keyHandler, _);

                _.instanceUid = instanceUid++;

                // A simple way to check for HTML strings
                // Strict HTML recognition (must start with <)
                // Extracted from jQuery v1.11 source
                _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

                _.registerBreakpoints();
                _.init(true);

            }

            return Slick;

        }());

        Slick.prototype.activateADA = function () {
            var _ = this;
          /*[OT] Here slick-active class is returning empty element , so used slick-current class if
            it returns empty element , which will not change any existing behaviour */
          var activeSlick =  _.$slideTrack.find('.slick-active');
          if (!activeSlick.length) {
            activeSlick  =  _.$slideTrack.find('.slick-current');
          }
          // [OT] Here added data-cstabindex to enable tabbing for other elements like div,span etc
          activeSlick.attr({
            'aria-hidden': 'false'
          }).find('a, input, button, select,[data-cstabindex=-1]').attr({
            'tabindex': '0',
            'data-cstabindex': '0'
          });

        };

        Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

            var _ = this;

            if (typeof(index) === 'boolean') {
                addBefore = index;
                index = null;
            } else if (index < 0 || (index >= _.slideCount)) {
                return false;
            }

            _.unload();

            if (typeof(index) === 'number') {
                if (index === 0 && _.$slides.length === 0) {
                    $(markup).appendTo(_.$slideTrack);
                } else if (addBefore) {
                    $(markup).insertBefore(_.$slides.eq(index));
                } else {
                    $(markup).insertAfter(_.$slides.eq(index));
                }
            } else {
                if (addBefore === true) {
                    $(markup).prependTo(_.$slideTrack);
                } else {
                    $(markup).appendTo(_.$slideTrack);
                }
            }

            _.$slides = _.$slideTrack.children(this.options.slide);

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.append(_.$slides);

            _.$slides.each(function (index, element) {
                $(element).attr('data-slick-index', index);
            });

            _.$slidesCache = _.$slides;

            _.reinit();

        };

        Slick.prototype.animateHeight = function () {
            var _ = this;
            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true &&
                _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.animate({
                    height: targetHeight
                }, _.options.speed);
            }
        };

        Slick.prototype.animateSlide = function (targetLeft, callback) {

            var animProps = {},
                _         = this;

            _.animateHeight();

            if (_.options.rtl === true && _.options.vertical === false) {
                targetLeft = -targetLeft;
            }
            if (_.transformsEnabled === false) {
                if (_.options.vertical === false) {
                    _.$slideTrack.animate({
                        left: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                } else {
                    _.$slideTrack.animate({
                        top: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                }

            } else {

                if (_.cssTransitions === false) {
                    if (_.options.rtl === true) {
                        _.currentLeft = -(_.currentLeft);
                    }
                    $({
                        animStart: _.currentLeft
                    }).animate({
                        animStart: targetLeft
                    }, {
                        duration: _.options.speed,
                        easing: _.options.easing,
                        step: function (now) {
                            now = Math.ceil(now);
                            if (_.options.vertical === false) {
                                animProps[_.animType] = 'translate(' +
                                                        now + 'px, 0px)';
                                _.$slideTrack.css(animProps);
                            } else {
                                animProps[_.animType] = 'translate(0px,' +
                                                        now + 'px)';
                                _.$slideTrack.css(animProps);
                            }
                        },
                        complete: function () {
                            if (callback) {
                                callback.call();
                            }
                        }
                    });

                } else {

                    _.applyTransition();
                    targetLeft = Math.ceil(targetLeft);

                    if (_.options.vertical === false) {
                        animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                    } else {
                        animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                    }
                    _.$slideTrack.css(animProps);

                    if (callback) {
                        setTimeout(function () {

                            _.disableTransition();

                            callback.call();
                        }, _.options.speed);
                    }

                }

            }

        };

        Slick.prototype.getNavTarget = function () {

            var _        = this,
                asNavFor = _.options.asNavFor;

            if (asNavFor && asNavFor !== null) {
                asNavFor = $(asNavFor).not(_.$slider);
            }

            return asNavFor;

        };

        Slick.prototype.asNavFor = function (index) {

            var _        = this,
                asNavFor = _.getNavTarget();

            if (asNavFor !== null && typeof asNavFor === 'object') {
                asNavFor.each(function () {
                    var target = $(this).slick('getSlick');
                    if (!target.unslicked) {
                        target.slideHandler(index, true);
                    }
                });
            }

        };

        Slick.prototype.applyTransition = function (slide) {

            var _          = this,
                transition = {};

            if (_.options.fade === false) {
                transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' +
                                               _.options.cssEase;
            } else {
                transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' +
                                               _.options.cssEase;
            }

            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }

        };

        Slick.prototype.autoPlay = function () {

            var _ = this;

            _.autoPlayClear();

            if (_.slideCount > _.options.slidesToShow) {
                _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
            }

        };

        Slick.prototype.autoPlayClear = function () {

            var _ = this;

            if (_.autoPlayTimer) {
                clearInterval(_.autoPlayTimer);
            }

        };

        Slick.prototype.autoPlayIterator = function () {

            var _       = this,
                slideTo = _.currentSlide + _.options.slidesToScroll;

            if (!_.paused && !_.interrupted && !_.focussed) {

                if (_.options.infinite === false) {

                    if (_.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                        _.direction = 0;
                    }

                    else if (_.direction === 0) {

                        slideTo = _.currentSlide - _.options.slidesToScroll;

                        if (_.currentSlide - 1 === 0) {
                            _.direction = 1;
                        }

                    }

                }

                _.slideHandler(slideTo);

            }

        };

        Slick.prototype.buildArrows = function () {

            var _ = this;

            if (_.options.arrows === true) {

                _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
                _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

                if (_.slideCount > _.options.slidesToShow) {

                    _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                    _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                    if (_.htmlExpr.test(_.options.prevArrow)) {
                        _.$prevArrow.prependTo(_.options.appendArrows);
                    }

                    if (_.htmlExpr.test(_.options.nextArrow)) {
                        _.$nextArrow.appendTo(_.options.appendArrows);
                    }

                    if (_.options.infinite !== true) {
                        _.$prevArrow
                            .addClass('slick-disabled')
                            .attr('aria-disabled', 'true');
                    }

                } else {

                    _.$prevArrow.add(_.$nextArrow)

                        .addClass('slick-hidden')
                        .attr({
                            'aria-disabled': 'true',
                            'tabindex': '-1'
                        });

                }

            }

        };

        Slick.prototype.buildDots = function () {

            var _ = this,
                i, dot;

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$slider.addClass('slick-dotted');

                dot = $('<ul />').addClass(_.options.dotsClass);

                for (i = 0; i <= _.getDotCount(); i += 1) {
                    dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
                }

                _.$dots = dot.appendTo(_.options.appendDots);

                _.$dots.find('li').first().addClass('slick-active');

            }

        };

        Slick.prototype.buildOut = function () {

            var _ = this;

            _.$slides =
                _.$slider
                    .children(_.options.slide + ':not(.slick-cloned)')
                    .addClass('slick-slide');

            _.slideCount = _.$slides.length;

            _.$slides.each(function (index, element) {
                $(element)
                    .attr('data-slick-index', index)
                    .data('originalStyling', $(element).attr('style') || '');
            });

            _.$slider.addClass('slick-slider');

            _.$slideTrack = (_.slideCount === 0) ?
                            $('<div class="slick-track"/>').appendTo(_.$slider) :
                            _.$slides.wrapAll('<div class="slick-track"/>').parent();

            _.$list = _.$slideTrack.wrap(
                '<div class="slick-list"/>').parent();
            _.$slideTrack.css('opacity', 0);

            if (_.options.centerMode === true || _.options.swipeToSlide === true) {
                _.options.slidesToScroll = 1;
            }

            $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

            _.setupInfinite();

            _.buildArrows();

            _.buildDots();

            _.updateDots();

            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

            if (_.options.draggable === true) {
                _.$list.addClass('draggable');
            }

            _.slidesAdjust();

        };

        Slick.prototype.buildRows = function () {

            var _ = this, a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection;

            newSlides = document.createDocumentFragment();
            originalSlides = _.$slider.children();

            if (_.options.rows > 0) {

                slidesPerSection = _.options.slidesPerRow * _.options.rows;
                numOfSlides = Math.ceil(
                    originalSlides.length / slidesPerSection
                );

                for (a = 0; a < numOfSlides; a++) {
                    var slide = document.createElement('div');
                    for (b = 0; b < _.options.rows; b++) {
                        var row = document.createElement('div');
                        for (c = 0; c < _.options.slidesPerRow; c++) {
                            var target = (a * slidesPerSection +
                                          ((b * _.options.slidesPerRow) + c));
                            if (originalSlides.get(target)) {
                                row.appendChild(originalSlides.get(target));
                            }
                        }
                        slide.appendChild(row);
                    }
                    newSlides.appendChild(slide);
                }

                _.$slider.empty().append(newSlides);
                _.$slider.children().children().children()
                    .css({
                        'width': (100 / _.options.slidesPerRow) + '%',
                        'display': 'inline-block'
                    });

            }

        };

        Slick.prototype.checkResponsive = function (initial, forceUpdate) {

            var _                                                               = this,
                breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
            var sliderWidth = _.$slider.width();
            var windowWidth = window.innerWidth || $(window).width();

            if (_.respondTo === 'window') {
                respondToWidth = windowWidth;
            } else if (_.respondTo === 'slider') {
                respondToWidth = sliderWidth;
            } else if (_.respondTo === 'min') {
                respondToWidth = Math.min(windowWidth, sliderWidth);
            }

            if (_.options.responsive &&
                _.options.responsive.length &&
                _.options.responsive !== null) {

                targetBreakpoint = null;

                for (breakpoint in _.breakpoints) {
                    if (_.breakpoints.hasOwnProperty(breakpoint)) {
                        if (_.originalSettings.mobileFirst === false) {
                            if (respondToWidth < _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        } else {
                            if (respondToWidth > _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        }
                    }
                }

                if (targetBreakpoint !== null) {
                    if (_.activeBreakpoint !== null) {
                        if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                            _.activeBreakpoint =
                                targetBreakpoint;
                            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                                _.unslick(targetBreakpoint);
                            } else {
                                _.options = $.extend({}, _.originalSettings,
                                    _.breakpointSettings[
                                        targetBreakpoint]);
                                if (initial === true) {
                                    _.currentSlide = _.options.initialSlide;
                                }
                                _.refresh(initial);
                            }
                            triggerBreakpoint = targetBreakpoint;
                        }
                    } else {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    if (_.activeBreakpoint !== null) {
                        _.activeBreakpoint = null;
                        _.options = _.originalSettings;
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                        triggerBreakpoint = targetBreakpoint;
                    }
                }

                // only trigger breakpoints during an actual break. not on initialize.
                if (!initial && triggerBreakpoint !== false) {
                    _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
                }
            }

        };

        Slick.prototype.changeSlide = function (event, dontAnimate) {

            var _       = this,
                $target = $(event.currentTarget),
                indexOffset, slideOffset, unevenOffset;

            // If target is a link, prevent default action.
            if ($target.is('a')) {
                event.preventDefault();
            }

            // If target is not the <li> element (ie: a child), find the <li>.
            if (!$target.is('li')) {
                $target = $target.closest('li');
            }

            unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
            indexOffset = unevenOffset ? 0 :
                          (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

            switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll :
                              _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                            event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
            }

        };

        Slick.prototype.checkNavigable = function (index) {

            var _ = this,
                navigables, prevNavigable;

            navigables = _.getNavigableIndexes();
            prevNavigable = 0;
            if (index > navigables[navigables.length - 1]) {
                index = navigables[navigables.length - 1];
            } else {
                for (var n in navigables) {
                    if (index < navigables[n]) {
                        index = prevNavigable;
                        break;
                    }
                    prevNavigable = navigables[n];
                }
            }

            return index;
        };

        Slick.prototype.cleanUpEvents = function () {

            var _ = this;

            if (_.options.dots && _.$dots !== null) {

                $('li', _.$dots)
                    .off('click.slick', _.changeSlide)
                    .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                    .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

                if (_.options.accessibility === true) {
                    _.$dots.off('keydown.slick', _.keyHandler);
                }
            }

            _.$slider.off('focus.slick blur.slick');

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
                _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

                if (_.options.accessibility === true) {
                    _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                    _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
                }
            }

            _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
            _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
            _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
            _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

            _.$list.off('click.slick', _.clickHandler);

            $(document).off(_.visibilityChange, _.visibility);

            _.cleanUpSlideEvents();

            if (_.options.accessibility === true) {
                _.$list.off('keydown.slick', _.keyHandler);
            }

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().off('click.slick', _.selectHandler);
            }

            $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

            $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

            $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

            $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);

        };

        Slick.prototype.cleanUpSlideEvents = function () {

            var _ = this;

            _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

        };

        Slick.prototype.cleanUpRows = function () {

            var _ = this, originalSlides;

            if (_.options.rows > 0) {
                // [OT] Added detach method because with out detach method then lost all
                // external events of view when we append the data
                originalSlides = _.$slides.children().children().detach();
                originalSlides.removeAttr('style');
                _.$slider.empty().append(originalSlides.detach());
            }

        };

        Slick.prototype.clickHandler = function (event) {

            var _ = this;

            if (_.shouldClick === false) {
                event.stopImmediatePropagation();
                event.stopPropagation();
                event.preventDefault();
            }

        };

        Slick.prototype.destroy = function (refresh) {

            var _ = this;

            _.autoPlayClear();

            _.touchObject = {};

            _.cleanUpEvents();

            $('.slick-cloned', _.$slider).detach();

            if (_.$dots) {
                _.$dots.remove();
            }

            if (_.$prevArrow && _.$prevArrow.length) {

                _.$prevArrow
                    .removeClass('slick-disabled slick-arrow slick-hidden')
                    .removeAttr('aria-hidden aria-disabled tabindex')
                    .css('display', '');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.remove();
                }
            }

            if (_.$nextArrow && _.$nextArrow.length) {

                _.$nextArrow
                    .removeClass('slick-disabled slick-arrow slick-hidden')
                    .removeAttr('aria-hidden aria-disabled tabindex')
                    .css('display', '');

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.remove();
                }
            }

            if (_.$slides) {

                _.$slides
                    .removeClass(
                        'slick-slide slick-active slick-center slick-visible slick-current')
                    .removeAttr('aria-hidden')
                    .removeAttr('data-slick-index')
                    .each(function () {
                        $(this).attr('style', $(this).data('originalStyling'));
                    });

                _.$slideTrack.children(this.options.slide).detach();

                _.$slideTrack.detach();

                _.$list.detach();

                // [OT] Added detach method because with out detach method then lost all
                // external events of view when we append the data
                _.$slider.append(_.$slides.detach());
            }

            _.cleanUpRows();

            _.$slider.removeClass('slick-slider');
            _.$slider.removeClass('slick-initialized');
            _.$slider.removeClass('slick-dotted');

            _.unslicked = true;

            if (!refresh) {
                _.$slider.trigger('destroy', [_]);
            }

        };

        Slick.prototype.disableTransition = function (slide) {

            var _          = this,
                transition = {};

            transition[_.transitionType] = '';

            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }

        };

        Slick.prototype.fadeSlide = function (slideIndex, callback) {

            var _ = this;

            if (_.cssTransitions === false) {

                _.$slides.eq(slideIndex).css({
                    zIndex: _.options.zIndex
                });

                _.$slides.eq(slideIndex).animate({
                    opacity: 1
                }, _.options.speed, _.options.easing, callback);

            } else {

                _.applyTransition(slideIndex);

                _.$slides.eq(slideIndex).css({
                    opacity: 1,
                    zIndex: _.options.zIndex
                });

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition(slideIndex);

                        callback.call();
                    }, _.options.speed);
                }

            }

        };

        Slick.prototype.fadeSlideOut = function (slideIndex) {

            var _ = this;

            if (_.cssTransitions === false) {

                _.$slides.eq(slideIndex).animate({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                }, _.options.speed, _.options.easing);

            } else {

                _.applyTransition(slideIndex);

                _.$slides.eq(slideIndex).css({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                });

            }

        };

        Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

            var _ = this;

            if (filter !== null) {

                _.$slidesCache = _.$slides;

                _.unload();

                _.$slideTrack.children(this.options.slide).detach();

                _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

                _.reinit();

            }

        };

        Slick.prototype.focusHandler = function () {

            var _ = this;

            _.$slider
                .off('focus.slick blur.slick')
                .on('focus.slick blur.slick', '*', function (event) {

                    event.stopImmediatePropagation();
                    var $sf = $(this);

                    setTimeout(function () {

                        if (_.options.pauseOnFocus) {
                            _.focussed = $sf.is(':focus');
                            _.autoPlay();
                        }

                    }, 0);

                });
        };

        Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

            var _ = this;
            return _.currentSlide;

        };

        Slick.prototype.getDotCount = function () {

            var _ = this;

            var breakPoint = 0;
            var counter = 0;
            var pagerQty = 0;

            if (_.options.infinite === true) {
                if (_.slideCount <= _.options.slidesToShow) {
                    ++pagerQty;
                } else {
                    while (breakPoint < _.slideCount) {
                        ++pagerQty;
                        breakPoint = counter + _.options.slidesToScroll;
                        counter += _.options.slidesToScroll <= _.options.slidesToShow ?
                                   _.options.slidesToScroll : _.options.slidesToShow;
                    }
                }
            } else if (_.options.centerMode === true) {
                pagerQty = _.slideCount;
            } else if (!_.options.asNavFor) {
                pagerQty = 1 + Math.ceil(
                        (_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ?
                               _.options.slidesToScroll : _.options.slidesToShow;
                }
            }

            return pagerQty - 1;

        };

        Slick.prototype.getLeft = function (slideIndex) {

            var _              = this,
                targetLeft,
                verticalHeight,
                verticalOffset = 0,
                targetSlide,
                coef;

            _.slideOffset = 0;
            verticalHeight = _.$slides.eq(0).outerHeight(true);

            if (_.options.infinite === true) {
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                    coef = -1

                    if (_.options.vertical === true && _.options.centerMode === true) {
                        if (_.options.slidesToShow === 2) {
                            coef = -1.5;
                        } else if (_.options.slidesToShow === 1) {
                            coef = -2
                        }
                    }
                    verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;
                }
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    if (slideIndex + _.options.slidesToScroll > _.slideCount &&
                        _.slideCount > _.options.slidesToShow) {
                        if (slideIndex > _.slideCount) {
                            _.slideOffset = ((_.options.slidesToShow -
                                              (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                            verticalOffset = ((_.options.slidesToShow -
                                               (slideIndex - _.slideCount)) * verticalHeight) * -1;
                        } else {
                            _.slideOffset = ((_.slideCount % _.options.slidesToScroll) *
                                            _.slideWidth) * -1;
                            verticalOffset = ((_.slideCount % _.options.slidesToScroll) *
                                             verticalHeight) * -1;
                        }
                    }
                }
            } else {
                if (slideIndex + _.options.slidesToShow > _.slideCount) {
                    _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) *
                                    _.slideWidth;
                    verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) *
                                     verticalHeight;
                }
            }

            if (_.slideCount <= _.options.slidesToShow) {
                _.slideOffset = 0;
                verticalOffset = 0;
            }

            if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
                _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) -
                                ((_.slideWidth * _.slideCount) / 2);
            } else if (_.options.centerMode === true && _.options.infinite === true) {
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) -
                                 _.slideWidth;
            } else if (_.options.centerMode === true) {
                _.slideOffset = 0;
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
            }

            if (_.options.vertical === false) {
                targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
            } else {
                targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
            }

            if (_.options.variableWidth === true) {

                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(
                        slideIndex + _.options.slidesToShow);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft -
                                      targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                if (_.options.centerMode === true) {
                    if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                    } else {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(
                            slideIndex + _.options.slidesToShow + 1);
                    }

                    if (_.options.rtl === true) {
                        if (targetSlide[0]) {
                            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft -
                                          targetSlide.width()) * -1;
                        } else {
                            targetLeft = 0;
                        }
                    } else {
                        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                    }

                    targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
                }
            }

            return targetLeft;

        };

        Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

            var _ = this;

            return _.options[option];

        };

        Slick.prototype.getNavigableIndexes = function () {

            var _          = this,
                breakPoint = 0,
                counter    = 0,
                indexes    = [],
                max;

            if (_.options.infinite === false) {
                max = _.slideCount;
            } else {
                breakPoint = _.options.slidesToScroll * -1;
                counter = _.options.slidesToScroll * -1;
                max = _.slideCount * 2;
            }

            while (breakPoint < max) {
                indexes.push(breakPoint);
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ?
                           _.options.slidesToScroll : _.options.slidesToShow;
            }

            return indexes;

        };

        Slick.prototype.getSlick = function () {

            return this;

        };

        Slick.prototype.getSlideCount = function () {

            var _ = this,
                slidesTraversed, swipedSlide, centerOffset;

            centerOffset = _.options.centerMode === true ?
                           _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

            if (_.options.swipeToSlide === true) {
                _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                    if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) >
                        (_.swipeLeft * -1)) {
                        swipedSlide = slide;
                        return false;
                    }
                });

                slidesTraversed = Math.abs(
                        $(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

                return slidesTraversed;

            } else {
                return _.options.slidesToScroll;
            }

        };

        Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

            var _ = this;

            _.changeSlide({
                data: {
                    message: 'index',
                    index: parseInt(slide)
                }
            }, dontAnimate);

        };

        Slick.prototype.init = function (creation) {

            var _ = this;

            if (!$(_.$slider).hasClass('slick-initialized')) {

                $(_.$slider).addClass('slick-initialized');

                _.buildRows();
                _.buildOut();
                _.setProps();
                _.startLoad();
                _.loadSlider();
                _.initializeEvents();
                _.updateArrows();
                _.updateDots();
                _.checkResponsive(true);
                _.focusHandler();

            }

            if (creation) {
                _.$slider.trigger('init', [_]);
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }

            if (_.options.autoplay) {

                _.paused = false;
                _.autoPlay();

            }

        };

        Slick.prototype.initADA = function () {
            var _                 = this,
                numDotGroups      = Math.ceil(_.slideCount / _.options.slidesToShow),
                tabControlIndexes = _.getNavigableIndexes().filter(function (val) {
                    return (val >= 0) && (val < _.slideCount);
                });

            // [OT] Here added data-cstabindex to enable tabbing for other elements like div,span etc
            _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
                'aria-hidden': 'true',
                'tabindex': '-1'
            }).find('a, input, button, select,[data-cstabindex=0]').attr({
                'tabindex': '-1',
                'data-cstabindex': '-1'
            });

            if (_.$dots !== null) {
                _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
                    var slideControlIndex = tabControlIndexes.indexOf(i);

                    $(this).attr({
                        'role': 'tabpanel',
                        'id': 'slick-slide' + _.instanceUid + i,
                        'tabindex': -1
                    });

                    if (slideControlIndex !== -1) {
                        var ariaButtonControl = 'slick-slide-control' + _.instanceUid +
                                                slideControlIndex
                        if ($('#' + ariaButtonControl).length) {
                            $(this).attr({
                                'aria-describedby': ariaButtonControl
                            });
                        }
                    }
                });

                _.$dots.attr('role', 'tablist').find('li').each(function (i) {
                    var mappedSlideIndex = tabControlIndexes[i];

                    $(this).attr({
                        'role': 'presentation'
                    });

                    $(this).find('button').first().attr({
                        'role': 'tab',
                        'id': 'slick-slide-control' + _.instanceUid + i,
                        'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                        'aria-label': (i + 1) + ' of ' + numDotGroups,
                        'aria-selected': null,
                        'tabindex': '-1'
                    });

                }).eq(_.currentSlide).find('button').attr({
                    'aria-selected': 'true',
                    'tabindex': '0'
                }).end();
            }

            for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {
                if (_.options.focusOnChange) {
                    _.$slides.eq(i).attr({'tabindex': '0'});
                    // [OT] focus on active element
                    // [OT]whenever show the simple user profile focus should go to the close button.
                    _.$slides.eq(i).find('.slick-close').trigger("focus");
                } else {
                    _.$slides.eq(i).removeAttr('tabindex');
                }
            }

            _.activateADA();

        };

        Slick.prototype.initArrowEvents = function () {

            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow
                    .off('click.slick')
                    .on('click.slick', {
                        message: 'previous'
                    }, _.changeSlide);
                _.$nextArrow
                    .off('click.slick')
                    .on('click.slick', {
                        message: 'next'
                    }, _.changeSlide);

                if (_.options.accessibility === true) {
                    _.$prevArrow.on('keydown.slick', _.keyHandler);
                    _.$nextArrow.on('keydown.slick', _.keyHandler);
                }
            }

        };

        Slick.prototype.initDotEvents = function () {

            var _ = this;

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
                $('li', _.$dots).on('click.slick', {
                    message: 'index'
                }, _.changeSlide);

                if (_.options.accessibility === true) {
                    _.$dots.on('keydown.slick', _.keyHandler);
                }
            }

            if (_.options.dots === true && _.options.pauseOnDotsHover === true &&
                _.slideCount > _.options.slidesToShow) {

                $('li', _.$dots)
                    .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                    .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

            }

        };

        Slick.prototype.initSlideEvents = function () {

            var _ = this;

            if (_.options.pauseOnHover) {

                _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
                _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

            }

        };

        Slick.prototype.initializeEvents = function () {

            var _ = this;

            _.initArrowEvents();

            _.initDotEvents();
            _.initSlideEvents();

            _.$list.on('touchstart.slick mousedown.slick', {
                action: 'start'
            }, _.swipeHandler);
            _.$list.on('touchmove.slick mousemove.slick', {
                action: 'move'
            }, _.swipeHandler);
            _.$list.on('touchend.slick mouseup.slick', {
                action: 'end'
            }, _.swipeHandler);
            _.$list.on('touchcancel.slick mouseleave.slick', {
                action: 'end'
            }, _.swipeHandler);

            _.$list.on('click.slick', _.clickHandler);

            $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

            if (_.options.accessibility === true) {
                _.$list.on('keydown.slick', _.keyHandler);
            }

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', _.selectHandler);
            }

            $(window).on('orientationchange.slick.slick-' + _.instanceUid,
                $.proxy(_.orientationChange, _));

            $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

            $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

            $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
            $(_.setPosition);

        };

        Slick.prototype.initUI = function () {

            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

                _.$prevArrow.show();
                _.$nextArrow.show();

            }

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$dots.show();

            }

        };

        Slick.prototype.keyHandler = function (event) {

            var _ = this;
            //Dont slide if the cursor is inside the form fields and arrow keys are pressed
            if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
                if (event.keyCode === 37 && _.options.accessibility === true) {
                    _.changeSlide({
                        data: {
                            message: _.options.rtl === true ? 'next' : 'previous'
                        }
                    });
                } else if (event.keyCode === 39 && _.options.accessibility === true) {
                    _.changeSlide({
                        data: {
                            message: _.options.rtl === true ? 'previous' : 'next'
                        }
                    });
                }
            }

        };

        Slick.prototype.lazyLoad = function () {

            var _ = this,
                loadRange, cloneRange, rangeStart, rangeEnd;

            function loadImages(imagesScope) {

                $('img[data-lazy]', imagesScope).each(function () {

                    var image       = $(this),
                        imageSource = $(this).attr('data-lazy'),
                        imageSrcSet = $(this).attr('data-srcset'),
                        imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                        imageToLoad = document.createElement('img');

                    imageToLoad.onload = function () {

                        image
                            .animate({opacity: 0}, 100, function () {

                                if (imageSrcSet) {
                                    image
                                        .attr('srcset', imageSrcSet);

                                    if (imageSizes) {
                                        image
                                            .attr('sizes', imageSizes);
                                    }
                                }

                                image
                                    .attr('src', imageSource)
                                    .animate({opacity: 1}, 200, function () {
                                        image
                                            .removeAttr('data-lazy data-srcset data-sizes')
                                            .removeClass('slick-loading');
                                    });
                                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                            });

                    };

                    imageToLoad.onerror = function () {

                        image
                            .removeAttr('data-lazy')
                            .removeClass('slick-loading')
                            .addClass('slick-lazyload-error');

                        _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    };

                    imageToLoad.src = imageSource;

                });

            }

            if (_.options.centerMode === true) {
                if (_.options.infinite === true) {
                    rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                    rangeEnd = rangeStart + _.options.slidesToShow + 2;
                } else {
                    rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                    rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
                }
            } else {
                rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide :
                             _.currentSlide;
                rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
                if (_.options.fade === true) {
                    if (rangeStart > 0) rangeStart--;
                    if (rangeEnd <= _.slideCount) rangeEnd++;
                }
            }

            loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

            if (_.options.lazyLoad === 'anticipated') {
                var prevSlide = rangeStart - 1,
                    nextSlide = rangeEnd,
                    $slides   = _.$slider.find('.slick-slide');

                for (var i = 0; i < _.options.slidesToScroll; i++) {
                    if (prevSlide < 0) prevSlide = _.slideCount - 1;
                    loadRange = loadRange.add($slides.eq(prevSlide));
                    loadRange = loadRange.add($slides.eq(nextSlide));
                    prevSlide--;
                    nextSlide++;
                }
            }

            loadImages(loadRange);

            if (_.slideCount <= _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-slide');
                loadImages(cloneRange);
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
                loadImages(cloneRange);
            } else if (_.currentSlide === 0) {
                cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
                loadImages(cloneRange);
            }

        };

        Slick.prototype.loadSlider = function () {

            var _ = this;

            _.setPosition();

            _.$slideTrack.css({
                opacity: 1
            });

            _.$slider.removeClass('slick-loading');

            _.initUI();

            if (_.options.lazyLoad === 'progressive') {
                _.progressiveLazyLoad();
            }

        };

        Slick.prototype.next = Slick.prototype.slickNext = function () {

            var _ = this;

            _.changeSlide({
                data: {
                    message: 'next'
                }
            });

        };

        Slick.prototype.orientationChange = function () {

            var _ = this;

            _.checkResponsive();
            _.setPosition();

        };

        Slick.prototype.pause = Slick.prototype.slickPause = function () {

            var _ = this;

            _.autoPlayClear();
            _.paused = true;

        };

        Slick.prototype.play = Slick.prototype.slickPlay = function () {

            var _ = this;

            _.autoPlay();
            _.options.autoplay = true;
            _.paused = false;
            _.focussed = false;
            _.interrupted = false;

        };

        Slick.prototype.postSlide = function (index) {

            var _ = this;

            if (!_.unslicked) {

                _.$slider.trigger('afterChange', [_, index]);

                _.animating = false;

                // [OT] When center mode is true then we have some movement is going
                // on after animation, so we commented this one.
                /*if (_.slideCount > _.options.slidesToShow) {
                    _.setPosition();
                }*/

                _.swipeLeft = null;

                if (_.options.autoplay) {
                    _.autoPlay();
                }

                if (_.options.accessibility === true) {
                    _.initADA();

                    if (_.options.focusOnChange) {
                        var $currentSlide = $(_.$slides.get(_.currentSlide));
                       // [OT]whenever show the simple user profile focus should go to the close button.
                       $currentSlide.find('.slick-close').trigger("focus");
                    }
                }

            }

        };

        Slick.prototype.prev = Slick.prototype.slickPrev = function () {

            var _ = this;

            _.changeSlide({
                data: {
                    message: 'previous'
                }
            });

        };

        Slick.prototype.preventDefault = function (event) {

            event.preventDefault();

        };

        Slick.prototype.progressiveLazyLoad = function (tryCount) {

            tryCount = tryCount || 1;

            var _           = this,
                $imgsToLoad = $('img[data-lazy]', _.$slider),
                image,
                imageSource,
                imageSrcSet,
                imageSizes,
                imageToLoad;

            if ($imgsToLoad.length) {

                image = $imgsToLoad.first();
                imageSource = image.attr('data-lazy');
                imageSrcSet = image.attr('data-srcset');
                imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');
                imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    if (imageSrcSet) {
                        image
                            .attr('srcset', imageSrcSet);

                        if (imageSizes) {
                            image
                                .attr('sizes', imageSizes);
                        }
                    }

                    image
                        .attr('src', imageSource)
                        .removeAttr('data-lazy data-srcset data-sizes')
                        .removeClass('slick-loading');

                    if (_.options.adaptiveHeight === true) {
                        _.setPosition();
                    }

                    _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                    _.progressiveLazyLoad();

                };

                imageToLoad.onerror = function () {

                    if (tryCount < 3) {

                        /**
                         * try to load the image 3 times,
                         * leave a slight delay so we don't get
                         * servers blocking the request.
                         */
                        setTimeout(function () {
                            _.progressiveLazyLoad(tryCount + 1);
                        }, 500);

                    } else {

                        image
                            .removeAttr('data-lazy')
                            .removeClass('slick-loading')
                            .addClass('slick-lazyload-error');

                        _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                        _.progressiveLazyLoad();

                    }

                };

                imageToLoad.src = imageSource;

            } else {

                _.$slider.trigger('allImagesLoaded', [_]);

            }

        };

        Slick.prototype.refresh = function (initializing) {

            var _ = this, currentSlide, lastVisibleIndex;

            lastVisibleIndex = _.slideCount - _.options.slidesToShow;

            // in non-infinite sliders, we don't want to go past the
            // last visible index.
            if (!_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
                _.currentSlide = lastVisibleIndex;
            }

            // if less slides than to show, go to start.
            if (_.slideCount <= _.options.slidesToShow) {
                _.currentSlide = 0;

            }

            currentSlide = _.currentSlide;

            _.destroy(true);

            $.extend(_, _.initials, {currentSlide: currentSlide});

            _.init();

            if (!initializing) {

                _.changeSlide({
                    data: {
                        message: 'index',
                        index: currentSlide
                    }
                }, false);

            }

        };

        Slick.prototype.registerBreakpoints = function () {

            var _                  = this, breakpoint, currentBreakpoint, l,
                responsiveSettings = _.options.responsive || null;

            if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

                _.respondTo = _.options.respondTo || 'window';

                for (breakpoint in responsiveSettings) {

                    l = _.breakpoints.length - 1;

                    if (responsiveSettings.hasOwnProperty(breakpoint)) {
                        currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                        // loop through the breakpoints and cut out any existing
                        // ones with the same breakpoint number, we don't want dupes.
                        while (l >= 0) {
                            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                                _.breakpoints.splice(l, 1);
                            }
                            l--;
                        }

                        _.breakpoints.push(currentBreakpoint);
                        _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                    }

                }

                _.breakpoints.sort(function (a, b) {
                    return ( _.options.mobileFirst ) ? a - b : b - a;
                });

            }

        };

        Slick.prototype.reinit = function () {

            var _ = this;

            _.$slides =
                _.$slideTrack
                    .children(_.options.slide)
                    .addClass('slick-slide');

            _.slideCount = _.$slides.length;

            if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
                _.currentSlide = _.currentSlide - _.options.slidesToScroll;
            }

            if (_.slideCount <= _.options.slidesToShow) {
                _.currentSlide = 0;
            }

            _.registerBreakpoints();

            _.setProps();
            _.setupInfinite();
            _.buildArrows();
            _.updateArrows();
            _.initArrowEvents();
            _.buildDots();
            _.updateDots();
            _.initDotEvents();
            _.cleanUpSlideEvents();
            _.initSlideEvents();

            _.checkResponsive(false, true);

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', _.selectHandler);
            }

            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

            _.setPosition();
            _.focusHandler();

            _.paused = !_.options.autoplay;
            _.autoPlay();

            _.$slider.trigger('reInit', [_]);

        };

        Slick.prototype.resize = function () {

            var _ = this;

            if ($(window).width() !== _.windowWidth) {
                clearTimeout(_.windowDelay);
                _.windowDelay = window.setTimeout(function () {
                    _.windowWidth = $(window).width();
                    _.checkResponsive();
                    if (!_.unslicked) { _.setPosition(); }
                }, 50);
            }
        };

        Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore,
            removeAll) {

            var _ = this;

            if (typeof(index) === 'boolean') {
                removeBefore = index;
                index = removeBefore === true ? 0 : _.slideCount - 1;
            } else {
                index = removeBefore === true ? --index : index;
            }

            if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
                return false;
            }

            _.unload();

            if (removeAll === true) {
                _.$slideTrack.children().remove();
            } else {
                _.$slideTrack.children(this.options.slide).eq(index).remove();
            }

            _.$slides = _.$slideTrack.children(this.options.slide);

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.append(_.$slides);

            _.$slidesCache = _.$slides;

            _.reinit();

        };

        Slick.prototype.setCSS = function (position) {

            var _             = this,
                positionProps = {},
                x, y;

            if (_.options.rtl === true) {
                position = -position;
            }
            x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
            y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

            positionProps[_.positionProp] = position;

            if (_.transformsEnabled === false) {
                _.$slideTrack.css(positionProps);
            } else {
                positionProps = {};
                if (_.cssTransitions === false) {
                    positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                    _.$slideTrack.css(positionProps);
                } else {
                    positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                    _.$slideTrack.css(positionProps);
                }
            }

        };

        Slick.prototype.setDimensions = function () {

            var _ = this;

            if (_.options.vertical === false) {
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: ('0px ' + _.options.centerPadding)
                    });
                }
            } else {
                _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: (_.options.centerPadding + ' 0px')
                    });
                }
            }

            _.listWidth = _.$list.width();
            _.listHeight = _.$list.height();

            if (_.options.vertical === false && _.options.variableWidth === false) {
                _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
                _.$slideTrack.width(
                    Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

            } else if (_.options.variableWidth === true) {
                _.$slideTrack.width(5000 * _.slideCount);
            } else {
                _.slideWidth = Math.ceil(_.listWidth);
                _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) *
                                                _.$slideTrack.children('.slick-slide').length)));
            }

            var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
            if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(
                _.slideWidth - offset);

        };

        Slick.prototype.setFade = function () {

            var _ = this,
                targetLeft;

            _.$slides.each(function (index, element) {
                targetLeft = (_.slideWidth * index) * -1;
                if (_.options.rtl === true) {
                    $(element).css({
                        position: 'relative',
                        right: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                } else {
                    $(element).css({
                        position: 'relative',
                        left: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                }
            });

            _.$slides.eq(_.currentSlide).css({
                zIndex: _.options.zIndex - 1,
                opacity: 1
            });

        };

        Slick.prototype.setHeight = function () {

            var _ = this;

            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true &&
                _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.css('height', targetHeight);
            }

        };

        Slick.prototype.setOption =
            Slick.prototype.slickSetOption = function () {

                /**
                 * accepts arguments in format of:
                 *
                 *  - for changing a single option's value:
                 *     .slick("setOption", option, value, refresh )
                 *
                 *  - for changing a set of responsive options:
                 *     .slick("setOption", 'responsive', [{}, ...], refresh )
                 *
                 *  - for updating multiple values at once (not responsive)
                 *     .slick("setOption", { 'option': value, ... }, refresh )
                 */

                var _ = this, l, item, option, value, refresh = false, type;

                if ($.type(arguments[0]) === 'object') {

                    option = arguments[0];
                    refresh = arguments[1];
                    type = 'multiple';

                } else if ($.type(arguments[0]) === 'string') {

                    option = arguments[0];
                    value = arguments[1];
                    refresh = arguments[2];

                    if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                        type = 'responsive';

                    } else if (typeof arguments[1] !== 'undefined') {

                        type = 'single';

                    }

                }

                if (type === 'single') {

                    _.options[option] = value;

                } else if (type === 'multiple') {

                    $.each(option, function (opt, val) {

                        _.options[opt] = val;

                    });

                } else if (type === 'responsive') {

                    for (item in value) {

                        if ($.type(_.options.responsive) !== 'array') {

                            _.options.responsive = [value[item]];

                        } else {

                            l = _.options.responsive.length - 1;

                            // loop through the responsive object and splice out duplicates.
                            while (l >= 0) {

                                if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                                    _.options.responsive.splice(l, 1);

                                }

                                l--;

                            }

                            _.options.responsive.push(value[item]);

                        }

                    }

                }

                if (refresh) {

                    _.unload();
                    _.reinit();

                }

            };

        Slick.prototype.setPosition = function () {

            var _ = this;

            _.setDimensions();

            _.setHeight();

            if (_.options.fade === false) {
                _.setCSS(_.getLeft(_.currentSlide));
            } else {
                _.setFade();
            }

            _.$slider.trigger('setPosition', [_]);

        };

        Slick.prototype.setProps = function () {

            var _         = this,
                bodyStyle = document.body.style;

            _.positionProp = _.options.vertical === true ? 'top' : 'left';

            if (_.positionProp === 'top') {
                _.$slider.addClass('slick-vertical');
            } else {
                _.$slider.removeClass('slick-vertical');
            }

            if (bodyStyle.WebkitTransition !== undefined ||
                bodyStyle.MozTransition !== undefined ||
                bodyStyle.msTransition !== undefined) {
                if (_.options.useCSS === true) {
                    _.cssTransitions = true;
                }
            }

            if (_.options.fade) {
                if (typeof _.options.zIndex === 'number') {
                    if (_.options.zIndex < 3) {
                        _.options.zIndex = 3;
                    }
                } else {
                    _.options.zIndex = _.defaults.zIndex;
                }
            }

            if (bodyStyle.OTransform !== undefined) {
                _.animType = 'OTransform';
                _.transformType = '-o-transform';
                _.transitionType = 'OTransition';
                if (bodyStyle.perspectiveProperty === undefined &&
                    bodyStyle.webkitPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.MozTransform !== undefined) {
                _.animType = 'MozTransform';
                _.transformType = '-moz-transform';
                _.transitionType = 'MozTransition';
                if (bodyStyle.perspectiveProperty === undefined &&
                    bodyStyle.MozPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.webkitTransform !== undefined) {
                _.animType = 'webkitTransform';
                _.transformType = '-webkit-transform';
                _.transitionType = 'webkitTransition';
                if (bodyStyle.perspectiveProperty === undefined &&
                    bodyStyle.webkitPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.msTransform !== undefined) {
                _.animType = 'msTransform';
                _.transformType = '-ms-transform';
                _.transitionType = 'msTransition';
                if (bodyStyle.msTransform === undefined) _.animType = false;
            }
            if (bodyStyle.transform !== undefined && _.animType !== false) {
                _.animType = 'transform';
                _.transformType = 'transform';
                _.transitionType = 'transition';
            }
            _.transformsEnabled = _.options.useTransform &&
                                  (_.animType !== null && _.animType !== false);
        };

        Slick.prototype.setSlideClasses = function (index) {

            var _ = this,
                centerOffset, allSlides, indexOffset, remainder;

            allSlides = _.$slider
                .find('.slick-slide')
                .removeClass('slick-active slick-center slick-current')
                .attr('aria-hidden', 'true');

            _.$slides
                .eq(index)
                .addClass('slick-current');

            if (_.options.centerMode === true) {

                var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

                centerOffset = Math.floor(_.options.slidesToShow / 2);

                if (_.options.infinite === true) {

                    if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
                        _.$slides
                            .slice(index - centerOffset + evenCoef, index + centerOffset + 1)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    } else {

                        indexOffset = _.options.slidesToShow + index;
                        allSlides
                            .slice(indexOffset - centerOffset + 1 + evenCoef,
                                indexOffset + centerOffset + 2)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    }

                    if (index === 0) {

                        allSlides
                            .eq(allSlides.length - 1 - _.options.slidesToShow)
                            .addClass('slick-center');

                    } else if (index === _.slideCount - 1) {

                        allSlides
                            .eq(_.options.slidesToShow)
                            .addClass('slick-center');

                    }

                }

                _.$slides
                    .eq(index)
                    .addClass('slick-center');

            } else {

                if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                    _.$slides
                        .slice(index, index + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else if (allSlides.length <= _.options.slidesToShow) {

                    allSlides
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    remainder = _.slideCount % _.options.slidesToShow;
                    indexOffset = _.options.infinite === true ? _.options.slidesToShow + index :
                                  index;

                    if (_.options.slidesToShow == _.options.slidesToScroll &&
                        (_.slideCount - index) < _.options.slidesToShow) {

                        allSlides
                            .slice(indexOffset - (_.options.slidesToShow - remainder),
                                indexOffset + remainder)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    } else {

                        allSlides
                            .slice(indexOffset, indexOffset + _.options.slidesToShow)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    }

                }

            }

            if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
                _.lazyLoad();
            }
        };

        Slick.prototype.setupInfinite = function () {

            var _ = this,
                i, slideIndex, infiniteCount;

            if (_.options.fade === true) {
                _.options.centerMode = false;
            }

            if (_.options.infinite === true && _.options.fade === false) {

                slideIndex = null;

                if (_.slideCount > _.options.slidesToShow) {

                    if (_.options.centerMode === true) {
                        infiniteCount = _.options.slidesToShow + 1;
                    } else {
                        infiniteCount = _.options.slidesToShow;
                    }

                    for (i = _.slideCount; i > (_.slideCount -
                                                infiniteCount); i -= 1) {
                        slideIndex = i - 1;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex - _.slideCount)
                            .prependTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    for (i = 0; i < infiniteCount + _.slideCount; i += 1) {
                        slideIndex = i;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex + _.slideCount)
                            .appendTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                        $(this).attr('id', '');
                    });

                }

            }

        };

        Slick.prototype.interrupt = function (toggle) {

            var _ = this;

            if (!toggle) {
                _.autoPlay();
            }
            _.interrupted = toggle;

        };

        Slick.prototype.selectHandler = function (event) {

            var _ = this;

            var targetElement =
                    $(event.target).is('.slick-slide') ?
                    $(event.target) :
                    $(event.target).parents('.slick-slide');

            //[OT] If selected slide is active slide, no need to perform any operation further
            if (targetElement.hasClass("slick-current")) {
                return;
            }

            var index = parseInt(targetElement.attr('data-slick-index'));

            if (!index) index = 0;

            if (_.slideCount <= _.options.slidesToShow) {

                _.slideHandler(index, false, true);
                return;

            }

            _.slideHandler(index);

        };

        Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

            var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
                _                                                       = this, navTarget;

            sync = sync || false;

            if (_.animating === true && _.options.waitForAnimate === true) {
                return;
            }

            if (_.options.fade === true && _.currentSlide === index) {
                return;
            }

            if (sync === false) {
                _.asNavFor(index);
            }

            targetSlide = index;
            slideLeft = _.getLeft(_.currentSlide);

            _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

            if (_.options.infinite === false && _.options.centerMode === false &&
                (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                        _.animateSlide(slideLeft, function () {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
                return;
            } else if (_.options.infinite === false && _.options.centerMode === true &&
                       (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                        _.animateSlide(slideLeft, function () {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
                return;
            }

            if (_.options.autoplay) {
                clearInterval(_.autoPlayTimer);
            }

            if (targetSlide < 0) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
                } else {
                    animSlide = _.slideCount + targetSlide;
                }
            } else if (targetSlide >= _.slideCount) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = 0;
                } else {
                    animSlide = targetSlide - _.slideCount;
                }
            } else {
                animSlide = targetSlide;
            }

            _.animating = true;

            _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

            oldSlide = _.currentSlide;
            _.currentSlide = animSlide;

            _.setSlideClasses(_.currentSlide);

            // [OT] need to remove adjustment classes as per requirement with some margins in
            // between slides and then get targetLeft value.
            $('.slick-slide.slick-next-slide-adjust').removeClass('slick-next-slide-adjust');
            $('.slick-slide.slick-prev-slide-adjust').removeClass('slick-prev-slide-adjust');
            targetLeft = _.getLeft(targetSlide);

            _.slidesAdjust();

            if (_.options.asNavFor) {

                navTarget = _.getNavTarget();
                navTarget = navTarget.slick('getSlick');

                if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                    navTarget.setSlideClasses(_.currentSlide);
                }

            }

            _.updateDots();
            _.updateArrows();

            if (_.options.fade === true) {
                if (dontAnimate !== true) {

                    _.fadeSlideOut(oldSlide);

                    _.fadeSlide(animSlide, function () {
                        _.postSlide(animSlide);
                    });

                } else {
                    _.postSlide(animSlide);
                }
                _.animateHeight();
                return;
            }

            if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                _.animateSlide(targetLeft, function () {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }

        };

        Slick.prototype.startLoad = function () {

            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

                _.$prevArrow.hide();
                _.$nextArrow.hide();

            }

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$dots.hide();

            }

            _.$slider.addClass('slick-loading');

        };

        Slick.prototype.swipeDirection = function () {

            var xDist, yDist, r, swipeAngle, _ = this;

            xDist = _.touchObject.startX - _.touchObject.curX;
            yDist = _.touchObject.startY - _.touchObject.curY;
            r = Math.atan2(yDist, xDist);

            swipeAngle = Math.round(r * 180 / Math.PI);
            if (swipeAngle < 0) {
                swipeAngle = 360 - Math.abs(swipeAngle);
            }

            if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
                return (_.options.rtl === false ? 'right' : 'left');
            }
            if (_.options.verticalSwiping === true) {
                if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                    return 'down';
                } else {
                    return 'up';
                }
            }

            return 'vertical';

        };

        Slick.prototype.swipeEnd = function (event) {

            var _ = this,
                slideCount,
                direction;

            _.dragging = false;
            _.swiping = false;

            if (_.scrolling) {
                _.scrolling = false;
                return false;
            }

            _.interrupted = false;
            _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

            if (_.touchObject.curX === undefined) {
                return false;
            }

            if (_.touchObject.edgeHit === true) {
                _.$slider.trigger('edge', [_, _.swipeDirection()]);
            }

            if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

                direction = _.swipeDirection();

                switch (direction) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                        _.checkNavigable(_.currentSlide + _.getSlideCount()) :
                        _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                        _.checkNavigable(_.currentSlide - _.getSlideCount()) :
                        _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:

                }

                if (direction != 'vertical') {

                    _.slideHandler(slideCount);
                    _.touchObject = {};
                    _.$slider.trigger('swipe', [_, direction]);

                }

            } else {

                if (_.touchObject.startX !== _.touchObject.curX) {

                    _.slideHandler(_.currentSlide);
                    _.touchObject = {};

                }

            }

        };

        Slick.prototype.swipeHandler = function (event) {

            var _ = this;

            if ((_.options.swipe === false) ||
                ('ontouchend' in document && _.options.swipe === false)) {
                return;
            } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
                return;
            }

            _.touchObject.fingerCount = event.originalEvent &&
                                        event.originalEvent.touches !== undefined ?
                                        event.originalEvent.touches.length : 1;

            _.touchObject.minSwipe = _.listWidth / _.options
                    .touchThreshold;

            if (_.options.verticalSwiping === true) {
                _.touchObject.minSwipe = _.listHeight / _.options
                        .touchThreshold;
            }

            switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

            }

        };

        Slick.prototype.swipeMove = function (event) {

            var _          = this,
                edgeWasHit = false,
                curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;

            touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

            if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
                return false;
            }

            curLeft = _.getLeft(_.currentSlide);

            _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
            _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

            _.touchObject.swipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

            verticalSwipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

            if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
                _.scrolling = true;
                return false;
            }

            if (_.options.verticalSwiping === true) {
                _.touchObject.swipeLength = verticalSwipeLength;
            }

            swipeDirection = _.swipeDirection();

            if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
                _.swiping = true;
                event.preventDefault();
            }

            positionOffset = (_.options.rtl === false ? 1 : -1) *
                             (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
            if (_.options.verticalSwiping === true) {
                positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
            }

            swipeLength = _.touchObject.swipeLength;

            _.touchObject.edgeHit = false;

            if (_.options.infinite === false) {
                if ((_.currentSlide === 0 && swipeDirection === 'right') ||
                    (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                    swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                    _.touchObject.edgeHit = true;
                }
            }

            if (_.options.vertical === false) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            } else {
                _.swipeLeft = curLeft +
                              (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
            }
            if (_.options.verticalSwiping === true) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            }

            if (_.options.fade === true || _.options.touchMove === false) {
                return false;
            }

            if (_.animating === true) {
                _.swipeLeft = null;
                return false;
            }

            _.setCSS(_.swipeLeft);

        };

        Slick.prototype.swipeStart = function (event) {

            var _ = this,
                touches;

            _.interrupted = true;

            if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
                _.touchObject = {};
                return false;
            }

            if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
                touches = event.originalEvent.touches[0];
            }

            _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX :
                                                        event.clientX;
            _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY :
                                                        event.clientY;

            _.dragging = true;

        };

        Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

            var _ = this;

            if (_.$slidesCache !== null) {

                _.unload();

                _.$slideTrack.children(this.options.slide).detach();

                _.$slidesCache.appendTo(_.$slideTrack);

                _.reinit();

            }

        };

        Slick.prototype.unload = function () {

            var _ = this;

            $('.slick-cloned', _.$slider).remove();

            if (_.$dots) {
                _.$dots.remove();
            }

            if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }

            if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }

            _.$slides
                .removeClass('slick-slide slick-active slick-visible slick-current')
                .attr('aria-hidden', 'true')
                .css('width', '');

        };

        Slick.prototype.unslick = function (fromBreakpoint) {

            var _ = this;
            _.$slider.trigger('unslick', [_, fromBreakpoint]);
            _.destroy();

        };

        Slick.prototype.updateArrows = function () {

            var _ = this,
                centerOffset;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.arrows === true &&
                _.slideCount > _.options.slidesToShow && !_.options.infinite) {

                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                if (_.currentSlide === 0) {

                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow &&
                           _.options.centerMode === false) {

                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                }

            }

        };

        Slick.prototype.updateDots = function () {

            var _ = this;

            if (_.$dots !== null) {

                _.$dots
                    .find('li')
                    .removeClass('slick-active')
                    .end();

                _.$dots
                    .find('li')
                    .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                    .addClass('slick-active');

            }

        };

        Slick.prototype.visibility = function () {

            var _ = this;

            if (_.options.autoplay) {

                if (document[_.hidden]) {

                    _.interrupted = true;

                } else {

                    _.interrupted = false;

                }

            }

        };

        $.fn.slick = function () {
            var _    = this,
                opt  = arguments[0],
                args = Array.prototype.slice.call(arguments, 1),
                l    = _.length,
                i,
                ret;
            for (i = 0; i < l; i++) {
                if (typeof opt == 'object' || typeof opt == 'undefined')
                    _[i].slick = new Slick(_[i], opt);
                else
                    ret = _[i].slick[opt].apply(_[i].slick, args);
                if (typeof ret != 'undefined') return ret;
            }
            return _;
        };

        // [OT] Need to add some css classes as per requirement
        Slick.prototype.slidesAdjust = function () {
            var _ = this;
            $('.slick-slide.slick-next-slide-adjust').removeClass('slick-next-slide-adjust');
            $('.slick-slide.slick-prev-slide-adjust').removeClass('slick-prev-slide-adjust');
            var currentSlideObject = $(_.$slides.get(_.currentSlide));
            currentSlideObject.next().addClass('slick-next-slide-adjust');
            currentSlideObject.prev().addClass('slick-prev-slide-adjust');

        };

    }));
});

csui.define('esoc/widgets/userwidget/userwidget',['module',
  'require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/marionette',
  'csui/utils/connector',
  'esoc/controls/userwidget/userwidget.view',
  'csui/utils/contexts/factories/connector'
], function (module, _require, $, _, Marionette, Connector, UserWidgetView, ConnectorFactory) {
  var UserWidget = {
    getUser: function (options) {
      $(options.placeholder).ready(function () {
        var userWidgetView,
            contentRegion = new Marionette.Region({
              el: $(options.placeholder)
            });
        if (!options.connector) {
          options.connector = options.context.getObject(ConnectorFactory);
        }
        var userOptions = _.extend({}, options);
        UserWidgetView = !!UserWidgetView ? UserWidgetView :
                         _require("esoc/controls/userwidget/userwidget.view");
        userWidgetView = new UserWidgetView(userOptions);
        contentRegion.show(userWidgetView);
      });
    }
  };
  return UserWidget;
});

csui.define('esoc/widgets/userwidget/util',['require',
      'module',
      'csui/lib/jquery',
      'csui/lib/marionette',
      'csui/lib/underscore',
      'csui/utils/contexts/factories/connector',
      'i18n!esoc/widgets/userwidget/nls/lang',
      'esoc/widgets/common/util',
      'esoc/widgets/utils/chat/chat.view',
      'esoc/widgets/userwidget/chat/view/presence.view',
      'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model',
      'csui/controls/dialog/dialog.view',
      'csui/utils/non-emptying.region/non-emptying.region',
      'esoc/controls/dialog/multiple.dialogs.view',
      'esoc/lib/slick/slick',
      'csui/utils/url',
      'esoc/widgets/userwidget/userwidget',
      'esoc/widgets/userwidget/chat/chatfactory',
      'esoc/factory/pulsesettingsfactory'
    ],
    function (require, module, $, Marionette, _, ConnectorFactory, Lang, CommonUtil, ChatView,
        PresenceView,
        SkypeAttributeModel, DialogView, NonEmptyingRegion, MultipleDialogsView, slick, Url,
        UserWidget, ChatFactory, PulseSettingsFactory) {
      var Utils = {
        lang: Lang,
        commonUtil: CommonUtil,
        userDialog: null,
        userStack: [],
        /**
         * this method updates the current model, and requires the below arguments
         * @param args = {itemview, url, requestType, targetElement, data, type}
         */
        updateAjaxCall: function (args) {
          var self             = this,
              that             = args.itemview,
              context          = args.context,
              url              = args.url,
              requestType      = args.requestType,
              relation         = args.relation,
              otherUserProfile = args.otherUserProfile,
              targetElement    = args.targetElement,
              data             = args.data,
              popOverTarget    = args.popOverTarget,
              type             = args.type,
              connector        = !!args.connector ? args.connector :
                                 !!that.options.context ?
                                 that.options.context.getObject(ConnectorFactory) :
                                 that.model.connector,
              userProfileview  = args.userProfileview,
              newValue         = args.newValue;
          connector.authenticator.syncStorage();
          connector.makeAjaxCall({
            url: url,
            type: type,
            data: data,
            contentType: false,
            crossDomain: true,
            processData: false,
            success: function (response, status, jXHR) {
              switch (requestType) {
              case "membersAPI" :
                var resp = response.data;
                if (!otherUserProfile) {
                  if (relation === CommonUtil.globalConstants.FRIENDS) {
                    var modelAttrs = {
                      following: true,
                      selfUser: false,
                      relation: relation,
                      otherUserProfile: otherUserProfile
                    }
                    self.setRelationModel(response.data, modelAttrs);
                  }
                } else {
                  //for selfuser
                  resp.otherUser = false;
                  resp.actions = {
                    viewprofile: self.lang.viewprofile
                  };
                }
                context.getModel(PulseSettingsFactory, {
                  attributes: {id: "chat"},
                  options: {chat: true},
                  permanent: true
                }).ensureFetched().done(function (response) {
                  resp.chatSettings = response.attributes.chatSettings;
                  that.collection.add(resp);
                });

                var presenceOptions = {
                  id: resp.id,
                  username: resp.name,
                  context: context
                }, presenceRegion   = new Marionette.Region({
                  el: that.$el.find("#esoc-mini-profile-presence-indicator")
                }), presenceView    = new PresenceView(presenceOptions);

                presenceRegion.show(presenceView);
                that.collection.trigger("add.follower");
                break;

              case "pulseInfo" :
                var pulseInfoResponse = response.results;
                that.util.changeRelationsCounts(pulseInfoResponse);
                var followerEvents = that.util.commonUtil.globalConstants.event_bus._events;
                if (!!followerEvents && !!followerEvents.updatefollowerstab &&
                    followerEvents.updatefollowerstab.length > 0) {
                  followerEvents.updatefollowerstab = followerEvents.updatefollowerstab.slice(-1);
                }
                that.util.commonUtil.globalConstants.event_bus.trigger("updatefollowerstab",
                    that, pulseInfoResponse);
                break;
              case "miniProfilePopup":
                var miniProfileResponse         = response.results,
                    followUnfollowActionElement = targetElement.find(
                        ".esoc-miniprofile-followingaction")
                $(popOverTarget).binf_popover('hide');
                that.model.attributes.following = !that.model.attributes.following;
                that.model.attributes.following ?
                followUnfollowActionElement.attr("title", self.lang.unfollow) :
                followUnfollowActionElement.attr("title", self.lang.follow);
                that.model.attributes.following ?
                targetElement.find(".esoc-miniprofile-followingaction").removeClass(
                    "esoc-mini-profile-follow-icon").addClass("esoc-mini-profile-unfollow-icon") :
                targetElement.find(".esoc-miniprofile-followingaction").removeClass(
                    "esoc-mini-profile-unfollow-icon").addClass("esoc-mini-profile-follow-icon");
                var followEvents = that.util.commonUtil.globalConstants.event_bus._events;
                if (!!followEvents && !!followEvents.changefollowingstatus &&
                    followEvents.changefollowingstatus.length > 0) {
                  followEvents.changefollowingstatus = followEvents.changefollowingstatus.slice(-1);
                }
                if (!!followEvents && !!followEvents.updateuserfollowingstatus &&
                    followEvents.updateuserfollowingstatus.length > 0) {
                  followEvents.updateuserfollowingstatus = followEvents.updateuserfollowingstatus.slice(
                      -1);
                }
                that.util.commonUtil.globalConstants.event_bus.trigger("changefollowingstatus",
                    that, miniProfileResponse);
                that.util.commonUtil.globalConstants.event_bus.trigger("updateuserfollowingstatus",
                    that, miniProfileResponse);
                break;
              case "userProfileFollowingAction":
                var followResponse = response.results;
                that.model.attributes.following = !that.model.attributes.following;
                that.model.attributes.following ? targetElement.html(self.lang.unfollow) :
                targetElement.html(self.lang.follow);
                that.$el.find(".esoc-userprofile-following-action").attr('title',
                    that.model.attributes.following ? self.lang.unfollow : self.lang.follow);
                that.model.attributes.followers_count = followResponse.data.user.followers_count;
                that.model.attributes.following_count = followResponse.data.user.following_count;
                var userProfileFollowingActionUrl = Url.combine(
                    CommonUtil.getV2Url(that.options.connector.connection.url),
                    self.commonUtil.REST_URLS.pulseRestUrl,
                    that.model.attributes.id);
                var ajaxParams = {
                  "itemview": that,
                  "url": userProfileFollowingActionUrl,
                  "type": "GET",
                  "requestType": "pulseInfo"
                };
                self.updateAjaxCall(ajaxParams);
                break;
              case "relation":
                var relationResponse = response.results;
                that.model.attributes.following = !that.model.attributes.following;
                if (that.model.attributes.following) {
                  that.model.attributes.actions.following = self.lang.unfollow;
                  that.model.attributes.actions.followingClass = "esoc-mini-profile-unfollow-icon"
                } else {
                  that.model.attributes.actions.following = self.lang.follow;
                  that.model.attributes.actions.followingClass = "esoc-mini-profile-follow-icon"
                }
                if (!that.model.attributes.otherUserProfile) {
                  that.util.changeRelationsCounts(relationResponse.data.user);
                }
                var tabindex = false;
                if (that.$el.find(".esoc-mini-profile-actions").hasClass(
                    "esoc-miniprofile-has-tabindex")) {
                  tabindex = true;
                }
                that.render();
                that.showActions();
                that.setProfilePic();
                that.$el.find(".esoc-mini-profile-following-action").trigger('focus');
                if (tabindex) {
                  that.$el.find(".esoc-mini-profile-actions").addClass(
                      'esoc-miniprofile-has-tabindex');
                }
                if (that.options.model.attributes.relation ===
                    CommonUtil.globalConstants.FRIENDS) {
                  if (!that.options.model.attributes.otherUserProfile) {
                    var collection = that.options.model.collection;
                    collection.remove(that.model.attributes.id);
                    collection.trigger("remove.relation", that, relationResponse);
                  }
                }
                break;
              case "miniProfileActionsDisplay":
                var responseData = JSON.parse(JSON.stringify(response.results));
                that.model.attributes.following = responseData.following;
                that.model.attributes.chatSettings = responseData.chatSettings;
                $(".esoc-mini-profile-popover .esoc-mini-profile-loading-img").hide();
                that.model.attributes.following ?
                $(".esoc-mini-profile-popover .esoc-mini-profile-following-action").find(
                    ".esoc-miniprofile-followingaction").removeClass(
                    "esoc-mini-profile-follow-icon").addClass(
                    "esoc-mini-profile-unfollow-icon").attr("title",
                    self.lang.unfollow) :
                $(".esoc-mini-profile-popover .esoc-mini-profile-following-action").find(
                    ".esoc-miniprofile-followingaction").removeClass(
                    "esoc-mini-profile-unfollow-icon").addClass(
                    "esoc-mini-profile-follow-icon").attr("title",
                    self.lang.follow);
                if (that.options.model.attributes.otherUser &&
                    !that.options.model.attributes.deleted && !!responseData.chatSettings &&
                    !!responseData.chatSettings.chatEnabled) {
                  $(".esoc-mini-profile-popover .esoc-mini-profile-actions").show();
                  $(".esoc-mini-profile-popover .esoc-chat-action-enabled-" +
                    that.model.attributes.id).removeClass('binf-hidden');
                  var contentRegion = new Marionette.Region({
                        el: $(
                            ".esoc-mini-profile-popover .esoc-miniprofile-chat-action-" +
                            that.model.attributes.id)
                      }),
                      chatOptions   = {
                        context: that.options.context,
                        tguser: that.options.model.attributes.name,
                        domain: responseData.chatSettings.chatDomain
                      },
                      chatView      = new ChatView(chatOptions);
                  contentRegion.show(chatView);
                  $('.esoc-simple-mini-profile-user-img .esoc-mini-profile-chat-comment').css(
                      'display', 'inline-block');
                  $('.esoc-mini-profile-chat-comment').on('click', function (e) {
                    that.options.tguser = that.options.model.get('name');
                    that.options.domain = that.options.model.get('chatSettings') &&
                                          that.options.model.get('chatSettings').chatDomain;
                    that.launchChatWindow(that);
                  });

                } else {
                  $(".esoc-mini-profile-popover .esoc-mini-profile-actions").show();
                  $(".esoc-mini-profile-popover .esoc-chat-action-disabled-" +
                    that.model.attributes.id).removeClass('binf-hidden');
                }
                break;
              case "updateSettings":
                targetElement.prop('disabled', false);
                targetElement.trigger('focus');
                break;
              case "updateExtendedTextField":
                if (!!that.model.attributes.userInputField) {
                  that.model.attributes.content = that.managerID !== undefined ? that.managerID :
                                                  that.model.attributes.content;
                  that.model.attributes.reportsTo = !!that.$el.find(
                      ".esoc-user-extended-edit-input").val().trim() ? that.$el.find(
                      ".esoc-user-extended-edit-input").val() : "";
                } else {
                  that.model.attributes.content = !!that.$el.find(
                      ".esoc-user-extended-edit-input").val().trim() ? that.$el.find(
                      ".esoc-user-extended-edit-input").val() : "";
                }
                that.render();
                if (that.model.attributes.userInputField) {
                  that.on("view:shown", function () {
                    that.trigger("change:content", "userInputChanged");
                  });
                  if (that.isUserModelLoaded) {
                    that.trigger("change:content", "userInputChanged");
                  }
                } else {
                  that.trigger("change:content");
                }
                that.showSeeMoreLink();
                if (that.model.attributes.content) {
                  that.$el.find('.esoc-user-messages').trigger('focus');
                } else {
                  that.$el.find('.esoc-user-default-content').trigger('focus');
                }
                that.options.parentView.triggerMethod('update:scrollbar');
                break;
              case "postStatus":
                that.$el.find(".esoc-user-extended-edit-input")[0].innerHTML = that.$el.find(
                    ".esoc-user-extended-edit-input").val();
                that.model.attributes.content = !!that.$el.find(
                    ".esoc-user-extended-edit-input").val().trim() ? that.$el.find(
                    ".esoc-user-extended-edit-input").html() : that.model.attributes.content;
                that.render();
                that.trigger("change:content");
                that.showSeeMoreLink();
                if (that.model.attributes.content) {
                  that.$el.find('.esoc-user-messages').trigger('focus');
                } else {
                  that.$el.find('.esoc-user-default-content').trigger('focus');
                }
                break;
              case "updateExtendedLink":
                var inputVal = that.$el.find(".esoc-user-extended-edit-input").val();
                that.model.attributes.content = self.getValidLink(inputVal);
                that.render();
                that.trigger("change:content");
                that.addEllipsisOnFocus();
                if (that.model.attributes.content) {
                  that.$el.find('.esoc-user-messages a').trigger('focus');
                } else {
                  that.$el.find('.esoc-user-default-content').trigger('focus');
                }
                break;
              default :
                break;
              }
            },
            error: function (xhr, status, text) {
              switch (requestType) {
              case "miniProfilePopup":
                $(popOverTarget).binf_popover('hide');
                var args = {
                  parent: targetElement,
                  errorContent: xhr.responseJSON ?
                                (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                 xhr.responseJSON.error) :
                                self.lang.defaultErrorMessageForMiniProfilePopup

                };
                self.commonUtil.openErrorDialog(args);
                break;
              case "relation":
                var errorArgs = {
                  parent: targetElement,
                  errorContent: xhr.responseJSON ?
                                (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                 xhr.responseJSON.error) : self.lang.defaultErrorMessageForRelation

                };
                self.commonUtil.openErrorDialog(errorArgs);
                break;
              case "miniProfileActionsDisplay":
                var errorContent = xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                   xhr.responseJSON.error;
                $(".esoc-mini-profile-popover .esoc-mini-profile-loading-img").hide();
                $(".esoc-mini-profile-popover .esoc-mini-profile-following-error").html(
                    errorContent);
                $(".esoc-mini-profile-popover .esoc-mini-profile-following-error").attr("title",
                    errorContent);
                $(".esoc-mini-profile-popover .esoc-mini-profile-following-error").show();
                $(".esoc-mini-profile-popover .esoc-mini-profile-actions").hide();
                break;
              case "updateSettings":
                var settingserrorArgs = {
                  parent: targetElement,
                  errorContent: xhr.responseJSON ?
                                (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                 xhr.responseJSON.error) :
                                self.lang.defaultErrorMessageForUpdateSettings
                };
                self.commonUtil.openErrorDialog(settingserrorArgs);
                var setting      = targetElement.val(),
                    settingsType = targetElement.attr("name");
                if (settingsType === "privacySettings") {
                  var newRadioSpanElement = that.$el.find(
                      "#" + targetElement.attr("id") + "_radio"),
                      oldRadioSpanElement = that.$el.find(
                          "#esoc_privacySettings_" + that.model.attributes.settings.contentPrivacy +
                          "_radio");
                  newRadioSpanElement.addClass('icon-radiobutton').removeClass(
                      'icon-radiobutton-selected');
                  oldRadioSpanElement.addClass('icon-radiobutton-selected').removeClass(
                      'icon-radiobutton');
                  targetElement.prop("checked", false);
                  that.$el.find("#esoc_privacySettings_" +
                                that.model.attributes.settings.contentPrivacy).prop('checked', true);
                } else {
                  var checkboxSpanElement = that.$el.find(
                      "#" + targetElement.attr("id") + "_checkbox");
                  if (!!that.model.attributes.settings &&
                      that.model.attributes.settings.hasOwnProperty(setting)) {
                    checkboxSpanElement.addClass('icon-checkbox-selected').removeClass(
                        'icon-checkbox');
                  } else {
                    checkboxSpanElement.addClass('icon-checkbox').removeClass(
                        'icon-checkbox-selected');
                  }
                  targetElement.prop('checked',
                      that.model.attributes.settings.hasOwnProperty(setting));
                }
                targetElement.prop('disabled', false);
                targetElement.trigger('focus');
                break;
              case "updateExtendedTextField":
              case "postStatus":
                var extendedInfoErrorArgs = {
                  parent: targetElement,
                  errorContent: xhr.responseJSON ?
                                (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                 xhr.responseJSON.error) :
                                (requestType === "postStatus" ?
                                 self.lang.defaultErrorMessageForStatusPost :
                                 self.lang.defaultErrorMessageForUpdateExtentedField)
                };
                self.commonUtil.openErrorDialog(extendedInfoErrorArgs);
                that.$el.find(".esoc-user-extended-edit-mode").removeClass(
                    "esoc-extendedinfo-update-mask");
                that.$el.find(".esoc-user-extended-edit-input").prop('disabled', false);
                if (that.model.attributes.content) {
                  that.$el.find('.esoc-user-messages').trigger('focus');
                } else {
                  that.$el.find('.esoc-user-default-content').trigger('focus');
                }
                break;
              case "updateExtendedLink":
                var extendedLinkErrorArgs = {
                  parent: targetElement,
                  errorContent: xhr.responseJSON ?
                                (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                 xhr.responseJSON.error) :
                                self.lang.defaultErrorMessageForUpdateExtentedLink
                };
                self.commonUtil.openErrorDialog(extendedLinkErrorArgs);
                that.$el.find(".esoc-user-extended-edit-mode").removeClass(
                    "esoc-extendedinfo-update-mask");
                that.$el.find(".esoc-user-extended-edit-input").prop('disabled', false);
                if (that.model.attributes.content) {
                  that.$el.find('.esoc-user-messages a').trigger('focus');
                } else {
                  that.$el.find('.esoc-user-default-content').trigger('focus');
                }
                break;
              case "userProfileFollowingAction":
                var userProfileActionErrorArgs = {
                  parent: targetElement,
                  errorContent: xhr.responseJSON ?
                                (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                                 xhr.responseJSON.error) :
                                self.lang.defaultErrorMessageForUserProfileActionLink
                };
                self.commonUtil.openErrorDialog(userProfileActionErrorArgs);
                break;
              default :
                break;
              }
            }
          });

        },
        /**
         * Closes User Profile Dialog
         */
        closeUserWidgetDialog: function () {
          if ($(".esoc-user-widget-dialog").is(':visible')) {
            $(".esoc-user-widget-dialog .cs-close").trigger('click');
          }
        },
        /**
         * Closes all opened mini profile, commenting widget, activity feed maximize view
         * and Opens User Profile Dialog
         * @param event
         * @param userwidgetview
         * @param UserProfileView
         */
        showUserProfileDialog: function (userwidgetview, UserProfileView, SimpleUserWidgetView) {
          if (userwidgetview.templateHelpers().messages.showUserProfileLink) {
            var userProfileView, title;
            userwidgetview.$el.find('.esoc-user-mini-profile').binf_popover('hide');
            if (!!userwidgetview.$el.find('.esoc-user-display-name').attr('aria-describedby')) {
              $('.esoc-mini-profile-popover.popover').remove();
            }
            clearTimeout(userwidgetview.profileTimer);
            // close the commenting widget if opened
            this.commonUtil.unbindWidget();
            // close the binf_popover if opened
            var targetElement = userwidgetview.$el.offsetParent();
            var targetPopover = $(targetElement).closest('.binf-popover');
            if (!!targetElement && !!targetElement.offsetParent &&
                targetPopover.length === 1) {
              targetPopover.hide();
            }
            // close activity feed maximize view if opened
            if ($(".activityfeed-expand").is(':visible')) {
              $(".activityfeed-expand .cs-close").trigger('click');
            }
            // close user profile widget if opened
            if (this.userDialog && !userwidgetview.options.enableSimpleSettingsModel) {
              this.userDialog.destroy();
            }
            //pop if the user is top user
            if (this.userStack.length > 0 &&
                this.userStack[this.userStack.length - 1].model.id === userwidgetview.model.id) {
              this.userStack.pop();
            }
            title = userwidgetview.options.model.attributes.otherUser ?
                    _.str.sformat(userwidgetview.templateHelpers().messages.othersProfile,
                        !!userwidgetview.model.attributes.display_name ?
                        userwidgetview.model.attributes.display_name :
                        userwidgetview.options.display_name) :
                    userwidgetview.templateHelpers().messages.myProfile;
            // TODO : replace userwidgetmodel in userwidgetview.options with new model for userprofileview
            userwidgetview.options.userWidgetView = userwidgetview;
            var that = this;
            if (!userwidgetview.options.enableSimpleSettingsModel) {
              userProfileView = new UserProfileView(userwidgetview.options);
              this.userDialog = new DialogView({
                title: title,
                iconLeft: this.userStack.length > 0 ? "arrow_back esoc-user-widget-dialog-back" :
                          "",
                largeSize: true,
                view: userProfileView,
                className: "esoc-user-widget-dialog esoc",
                iconRight: "binf-close esoc-user-widget-dialog-close"
              });
              this.userDialog.show();
            }
            else {
              if (!!this.userDialog) {
                if ($('.binf-modal-dialog.user' + userwidgetview.options.userid).length !== 0) {
                  if ($('.slick-slide').length > 0) {
                    $($('.slick-slide')[$(
                        '.binf-modal-dialog.user' + userwidgetview.options.userid).parents(
                        '.slick-slide')[0].dataset.slickIndex]).trigger('click');
                  }

                  return;
                }
                else {
                  this.removeSlick();
                  this.simpleUserWidgetViews.push(new SimpleUserWidgetView(userwidgetview.options));
                  this.userDialog.appendData(this.simpleUserWidgetViews);
                }
              }
              else {
                this.simpleUserWidgetViews = [];
                this.simpleUserWidgetViews.push(new SimpleUserWidgetView(userwidgetview.options));
                this.userDialog = new MultipleDialogsView({
                  largeSize: true,
                  views: this.simpleUserWidgetViews,
                  util: this,
                  className: "esoc-simple-user-widget-dialog esoc",
                  targetEle: userwidgetview.options.targetEle,
                  focusCallBack: userwidgetview.options.focusCallBack
                });

                var container     = $.fn.binf_modal.getDefaultContainer(),
                    contentRegion = new NonEmptyingRegion({
                      el: container
                    });
                contentRegion.show(this.userDialog);
                this.userDialog.$el.css('display', 'block');
              }
              this.userDialog.$el.find('.binf-modal-header').remove();

              this.userDialog.listenTo(this.userDialog, 'destroy', function () {
                if (that.simpleUserWidgetViews && that.simpleUserWidgetViews.length===1) {
                  that.simpleUserWidgetViews[0].trigger('destroy');
                }
                that.userDialog = null;
                that.simpleUserWidgetViews = null;
              });
              if (this.simpleUserWidgetViews.length >= 2) {
                this.userDialog.options.views[this.simpleUserWidgetViews.length - 2].$el.find(
                    ".cs-field-read-content").trigger("focusout");
              }
              this.applySlick();
            }
            if (this.userStack.length > 0) {
              title = this.userStack[this.userStack.length - 1].model.attributes.otherUser ?
                      _.str.sformat(Lang.othersProfileTooltip,
                          !!this.userStack[this.userStack.length -
                                           1].model.attributes.display_name ?
                          this.userStack[this.userStack.length - 1].model.attributes.display_name :
                          userwidgetview.options.display_name) :
                      this.userStack[this.userStack.length -
                                     1].templateHelpers().messages.myProfile;
              $("span.tile-type-icon.cs-icon-left.arrow_back.esoc-user-widget-dialog-back").attr(
                  "title", Lang.goBackTo + " " + title);
            }

            //back button for previous userview
            $(".esoc-user-widget-dialog-back").on("click", function () {
              var prevUserview = that.userStack.pop();
              //perform pop operation if previous user is current user.
              if (prevUserview.model.id === userwidgetview.model.id) {
                prevUserview = that.userStack.pop();
              }
              that.showUserProfileDialog(prevUserview, UserProfileView, SimpleUserWidgetView);
            });
            //clear the stack upon closing the dialog.
            $(".esoc-user-widget-dialog .cs-close").on("click", function () {
              that.userStack = [];
            });
            //if the stack become empty push the user again
            if (this.userStack.length === 0) {
              this.userStack.push(userwidgetview);
            }
            userwidgetview.on('userwidgetview.show.user.dialog', function (event) {
              // open new user widget on clicking viewprofile from followers or following tabs
              var UserWidgetView = require("esoc/controls/userwidget/userwidget.view"),
                  widgetOptions  = _.extend({}, this.options);
              event.options.userid = event.options.model.id;

              var updatedOptions = _.extend(widgetOptions, event.options);
              delete updatedOptions["model"];
              updatedOptions.display_name = event.options.model.attributes.display_name;
              var newUserWidgetView = new UserWidgetView(updatedOptions);
              newUserWidgetView.showUserProfileDialog(newUserWidgetView, UserProfileView,
                  SimpleUserWidgetView);
            });
            if (SkypeAttributeModel.getChatEnabled() && SkypeAttributeModel.getPresenceEnabled() &&
                !SkypeAttributeModel.isPluginEnabled()) {
              $(".cs-close").on("click", function (event) {
                if ($.inArray("esoc-user-widget-dialog-close", event.target.classList) !== -1 &&
                    !!SkypeAttributeModel.getCurrentSubscriptionURL()) {
                  ChatFactory.getProvider().deleteSubscription(
                      SkypeAttributeModel.getCurrentSubscriptionURL());
                }
              });
            }
          }
        },
        applySlick: function (initialSlideIndex) {
          if ($('.binf-modal-dialog').length > 1) {
            $('.binf-modal-dialog').find('.cs-close').addClass('slick-close');
            $('.modal-dialogs-inner').slick({
              centerMode: true,
              easing: 'easeOutElastic',
              focusOnSelect: true,
              focusOnChange: true,
              initialSlide: initialSlideIndex !== undefined ? initialSlideIndex :
                            this.simpleUserWidgetViews.length - 1,
              variableWidth: true,
              speed: 500,
              swipe: false,
              infinite: false,
              prevArrow: '<div class="slick-prev" title=' + Lang.previous + ' aria-label=' +
                         Lang.previous + '/>',
              nextArrow: '<div class="slick-next" title=' + Lang.next + ' aria-label=' + Lang.next +
                         '/>'
            });
          } else {
            $('.binf-modal-dialog').find("[data-cstabindex=-1]").attr("tabindex", "0").attr(
                "data-cstabindex", "0");
            $('.binf-modal-dialog').find('.cs-close').removeClass('slick-close');
          }
        },
        removeSlick: function () {
          if ($('.slick-list').length > 0) {
            $('.modal-dialogs-inner').slick("unslick");
          }
        },
        getValidLink: function (linkContent) {
          var regExp  = /((http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?)/gi,
              matches = (!!linkContent && linkContent.match(regExp) !== null) ? linkContent : '';
          return matches;
        },
        displayUserWidget: function (context, el) {
          var that = this;
          el.find(".esoc-widget-user-display-name").each(function () {
            var userWidgetOptions = {
              userid: $(this).data("userid"),
              context: context,
              placeholder: this,
              showUserProfileLink: true,
              showMiniProfile: true
            };
            UserWidget = !!UserWidget ? UserWidget :
                         require("esoc/widgets/userwidget/userwidget");
            UserWidget.getUser(userWidgetOptions);
          })
        },
        changeRelationsCounts: function (results) {
          var followingCount = results.friends_count > 999 ? "999+" : results.friends_count,
              followersCount = results.followers_count > 999 ? "999+" : results.followers_count;
          $(".esoc-user-following-count").html(followingCount);
          $(".esoc-user-following-tab-label").attr('title',
              _.str.sformat(this.lang.followingTooltip, results.friends_count));
          $(".esoc-user-followers-count").html(followersCount);
          $(".esoc-user-followers-tab-label").attr('title',
              _.str.sformat(this.lang.followersTooltip, results.followers_count));
        },
        /* sets the attributes for the relation model
        * @Param attrs has the values to be set for the relation model
        * @Param relationModel*/
        setRelationModel: function (relationModel, attrs) {
          relationModel.relation = attrs.relation;
          relationModel.following = attrs.following;
          relationModel.otherUserProfile = attrs.otherUserProfile;
          if (attrs.selfUser) {
            relationModel.actions = {
              viewprofile: this.lang.viewprofile
            };
            relationModel.otherUser = false;
          } else {
            relationModel.otherUser = true;
            if (attrs.following) {
              relationModel.actions = {
                following: this.lang.unfollow,
                viewprofile: this.lang.viewprofile,
                chat: this.lang.chat,
                followingClass: 'esoc-mini-profile-unfollow-icon'
              };
            } else {
              relationModel.actions = {
                following: this.lang.follow,
                viewprofile: this.lang.viewprofile,
                chat: this.lang.chat,
                followingClass: "esoc-mini-profile-follow-icon"
              };
            }
          }
        },
        escapeSelector: function (userid) {
          var regExp = /^([a-zA-Z0-9_-]+)$/;
          if (!_.isNumber(userid) && !userid.match(regExp)) {
            return (userid.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '\\$1'));
          }
          return (userid);
        }
      }
      return Utils;
    });


csui.define('css!esoc/widgets/userwidget/impl/userwidget',[],function(){});
csui.define('esoc/widgets/userwidget/view/miniprofile.view',[
  'module',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/url',
  'csui/utils/user.avatar.color',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'hbs!esoc/widgets/userwidget/impl/miniprofile',
  'esoc/widgets/common/util',
  'esoc/widgets/userwidget/util',
  'esoc/widgets/utils/chat/impl/util',
  'esoc/widgets/userwidget/chat/view/presence.view',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function (module, $, _, Handlebars, Marionette, Url, UserAvatarColor, lang, MiniProfileTemplate,
    CommonUtil, Util,
    ChatUtil, PresenceView) {
  // added module config (ESOC-7098)
  var config = module.config();
  _.defaults(config, {
    hideFollow: false
  });

  var MiniProfileView = Marionette.ItemView.extend({
    commonUtil: CommonUtil,
    util: Util,
    className: 'esoc-miniprofile-view',
    template: MiniProfileTemplate,
    ui: {
      initialsPlaceholder: '.image_user_placeholder'
    },
    templateHelpers: function () {
      var showPresenceIndicator = this.options.showPresenceIndicator !== undefined &&
                                  this.options.showPresenceIndicator;

      return {
        messages: {
          enableSimpleSettingsModel: !!this.options.enableSimpleSettingsModel ? true : false,
          showPresenceIndicator: showPresenceIndicator,
          viewprofile: lang.viewprofile,
          unfollow: lang.unfollow,
          follow: lang.follow,
          chat: lang.chat,
          following: this.options.model.attributes.following ? "esoc-mini-profile-unfollow-icon" :
                     "esoc-mini-profile-follow-icon"
        }
      };
    },
    initialize: function (options) {
      this.options = options;
      this.followUnfollowActionUrl = Url.combine(
          Util.commonUtil.getV2Url(this.options.connector.connection.url),
          Util.commonUtil.REST_URLS.pulseRestUrl,
          this.model.id);
    },
    constructor: function MiniProfileView(options) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
      // TODO: Need to remove the below code when model.get('id') is used through the module,
      // instead of model.id
      // Hot-fix for ESOC-9647 , Model coming from the other module doesn't contain 'id' as a
      // direct property but as an attribute.
      if(!this.model.id) {
        this.model.id = this.model.get('id');
      }

      var config = module.config();
      if (!!config) {
        this.options.enableSimpleSettingsModel = config.enableSimpleUserProfile;
      }
    },
    getParentView: function () {
      return this.options.userWidgetView;
    },
    getElementOffset: function (ele) {
      return ele.is(':visible') ? ele.offset() : {top: 0, left: 0};
    },
    onRender: function (e) {
      var targetEle     = this.options.targetEle,
          attributes    = this.options.model.attributes,
          following     = attributes.following ? this.templateHelpers().messages.unfollow :
                          this.templateHelpers().messages.follow,
          userId        = $(targetEle).attr("id"),         
          contentparams = {
            "id": attributes.id,
            "display_name": attributes.display_name,
            "office_location": attributes.office_location,
            "business_email": attributes.business_email,
            "business_phone": attributes.business_phone,
            "business_phone_label": lang.simpleUserProfilePhoneLabel,
            "cell_phone_label": lang.simpleUserProfileMobile,
            "cell_phone": attributes.cell_phone,
            "title": attributes.title,
            "showPresenceIndicator": this.templateHelpers().messages.showPresenceIndicator,
            "otherUser": attributes.otherUser,
            "hideFollow": config.hideFollow, // ESOC-7098: Disable follow action
            "deleted": attributes.deleted,
            "initials": attributes.initials,
            "actions": {
              "viewprofile": this.templateHelpers().messages.viewprofile,
              "following": following,
              "chat": this.templateHelpers().messages.chat
            },
            enableSimpleSettingsModel: this.templateHelpers().messages.enableSimpleSettingsModel
          },
          content       = this.template(contentparams),
          that          = this;
      this.options.userbackgroundcolor = UserAvatarColor.getUserAvatarColor(this.model.attributes);
      $(targetEle).binf_popover({
        content: content,
        placement: function (context) {
          $(context).addClass("esoc-mini-profile-popover esoc");
          if (!!contentparams.enableSimpleSettingsModel) {
            $(context).addClass("esoc-simple-mini-profile-popover");
          }
          var _tempElement = $('<div/>')
              .attr("style", "display:none")
              .addClass("esoc-mini-profile-popover binf-popover esoc-mini-profile-temp-div")
              .append(MiniProfileTemplate);
          $(targetEle).append(_tempElement);
          var popOverMaxHeight = $(".esoc-mini-profile-temp-div").height() + 40,
              popOverMaxWidth  = $(".esoc-mini-profile-temp-div").width() + 40;
          _tempElement.remove();
          var popOverSource = $(targetEle),
              offset        = that.getElementOffset(popOverSource),
              window_left   = offset.left,
              window_top    = offset.top,
              window_right  = (($(window).width()) - (window_left + popOverSource.outerWidth())),
              window_bottom = (($(window).height()) -
                               (window_top + popOverSource.outerHeight(true)));
          if (window_bottom > popOverMaxHeight) {
            return "bottom";
          } else if (window_right > popOverMaxWidth) {
            return "right";
          } else if (window_left > popOverMaxWidth) {
            return "left";
          } else if (window_top > popOverMaxHeight) {
            return "top";
          } else {
            return "auto";
          }
        },
        html: true,
        trigger: "manual",
        container: $.fn.binf_modal.getDefaultContainer()
      });
      $(targetEle).off("mouseenter").on("mouseenter", function (e) {
        var userWidgetView = that.getParentView();
        clearTimeout(userWidgetView.profileTimer);
        that.options.originatingView &&
        that.options.originatingView.disengageModalKeyboardFocusOnClose &&
        that.options.originatingView.disengageModalKeyboardFocusOnClose();
        var profileTimer = setTimeout(function () {
          $(targetEle).binf_popover('show');
        }, 1000);
        userWidgetView.profileTimer = profileTimer;
      });
      $(targetEle).off("mouseleave").on("mouseleave", function (e) {
        var userWidgetView = that.getParentView();
        clearTimeout(userWidgetView.profileTimer);
      });

      $(targetEle).off('shown.binf.popover').on('shown.binf.popover', function (e) {

        var presenceOptions = {
          id: that.model.attributes.id,
          username: that.model.attributes.name,
          context: that.options.context
        }
        var presenceRegion = new Marionette.Region({
          el: $(".esoc-mini-profile-popover #esoc-mini-profile-presence-indicator")
        });

        var presenceView = new PresenceView(presenceOptions);
        presenceRegion.show(presenceView);
        //TODO- need to re-factor popover implementation
        $(".esoc-mini-profile-popover .esoc-mini-profile-following-action").off('click').on('click',
            function (e) {
              var formData = new FormData();
              var followUnfollowAction = !that.model.attributes.following ?
                                         Util.commonUtil.globalConstants.FOLLOW :
                                         Util.commonUtil.globalConstants.UNFOLLOW;
              formData.append(Util.commonUtil.globalConstants.ACTION, followUnfollowAction);
              var args = {
                "itemview": that,
                "url": that.followUnfollowActionUrl,
                "type": "POST",
                "data": formData,
                "requestType": "miniProfilePopup",
                "targetElement": $(this),
                "popOverTarget": targetEle
              };
              that.util.updateAjaxCall(args);
            });
        $(".esoc-mini-profile-popover .esoc-viewminiprofile-action,.esoc-mini-profile-popover .esoc-mini-profile-user-name,.esoc-mini-profile-popover .esoc-mini-profile-pic").off(
            'click').on('click',
            function (e) {
              e.stopPropagation();
              that.options.userWidgetView.showUserProfileDialog(e);
            });
        if (that.model.attributes.otherUser) {
          var miniprofileActionUrl = Url.combine(
              Util.commonUtil.getV2Url(that.options.connector.connection.url),
              Util.commonUtil.REST_URLS.pulseRestUrl,
              that.model.id);

          miniprofileActionUrl = Util.commonUtil.updateQueryStringValues(miniprofileActionUrl,
              Util.commonUtil.globalConstants.FIELDS,
              Util.commonUtil.globalConstants.CHAT_SEETING);

          var displayParams = {
            "itemview": that,
            "url": miniprofileActionUrl,
            "type": "GET",
            "requestType": "miniProfileActionsDisplay"
          };
          that.util.updateAjaxCall(displayParams);
        } else {
          $(".esoc-mini-profile-popover .esoc-mini-profile-loading-img").hide();
          $(".esoc-mini-profile-popover .esoc-mini-profile-actions").show();
        }
        $("*").one('scroll', function () {
          $(targetEle).binf_popover('hide');
        });
        $(targetEle).one("remove", function () {
          $(targetEle).binf_popover('hide');
        });
        // TODO: Need to write common util method to hide widget specific popovers
        $('[aria-describedby]').each(function () {
          if (!$(this).is(e.target) && $(this).has(e.target).length === 0 &&
              $('.popover').has(e.target).length === 0 &&
              !$('#' + $(this)[0].getAttribute("aria-describedby")).find(e.target).is(e.target)) {
            $(this).binf_popover('hide');
          }
        });
        // hide the popover on mouseleave of popover
        $(".esoc-mini-profile-popover").on("mouseleave", function (e) {
          var targetId = e.target.id ? "#" + e.target.id : "";
          if (!targetId && $(targetId).attr("aria-describedby") !==
              $(targetEle).attr("aria-describedby")) {
            $(targetEle).binf_popover('hide');
          }
        });
        // hide the popover on mouseleave of target element
        $(targetEle).off("mouseleave").on("mouseleave", function (e) {
          setTimeout(function () {
            if ($(".esoc-mini-profile-popover:hover").length === 0) {
              $(targetEle).binf_popover('hide');
            }
          }, 1000);
        });
        // re-engage after the destroy of minipopover
        $(targetEle).one("destroyed.binf.popover hidden.binf.popover", function (e) {
          if (that.options.originatingView && !that.options.originatingView.isDestroyed) {
            that.options.originatingView.engageModalKeyboardFocusOnOpen &&
            that.options.originatingView.engageModalKeyboardFocusOnOpen();
          }
        });
        that.listenTo(that.options.originatingView, "destroy", function (e) {
          $(targetEle).binf_popover('destroy');
        });
        if (that.model.id !== undefined) {
          var userProfilePicOptions = {
            context: that.options.context,
            userid: that.model.attributes.id,
            photoElement: $(
                ".esoc-mini-profile-popover .esoc-userprofile-img-" + Util.escapeSelector(that.model.attributes.id)),
            defaultPhotElement: $(".esoc-mini-profile-popover .esoc-user-default-avatar-" +
                                  Util.escapeSelector(that.model.attributes.id)),
            userbackgroundcolor: that.options.userbackgroundcolor
          };
          that.util.commonUtil.setProfilePic(userProfilePicOptions);
          that.util.commonUtil.setUserColor(userProfilePicOptions);
        }
      });
    },
    launchChatWindow: function (that) {
      ChatUtil.launchChatWindow(that.options);
    },
    _assignUserColor: function () {
      var userbackgroundcolor = Util.commonUtil.getUserAvatarColor(this.model.attributes);
      this.ui.initialsPlaceholder.css("background", userbackgroundcolor);
    }
  });
  return MiniProfileView;
});

csui.define('esoc/widgets/userwidget/model/extended.model',[
  'csui/lib/backbone',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/utils/url',
  'esoc/widgets/userwidget/view/userprofile.view',
  'esoc/widgets/userwidget/util',
  'i18n!esoc/widgets/userwidget/nls/lang'
], function (Backbone, $, _, Url, UserProfileView, Util, Lang) {
  var ExtendedModel = Backbone.Model.extend({
    connector: "",
    restUrl: "",
    userWidgetView: "",
    constructor: function ExtendedModel(options) {
      this.options = options;
      this.userWidgetView = options.userWidgetView;
      this.restUrl = Util.commonUtil.updateQueryStringValues(
          Url.combine(Util.commonUtil.getV2Url(options.connector.connection.url),
              Util.commonUtil.REST_URLS.pulseRestUrl,
              this.userWidgetView.model.attributes.userid),
          Util.commonUtil.globalConstants.FIELDS, Util.commonUtil.globalConstants.EXTENDEDINFO);
      var query = Util.commonUtil.globalConstants.FIELDS + '=' +
                  Util.commonUtil.globalConstants.CHAT_SEETING;
      query = query + '&' + Util.commonUtil.globalConstants.FIELDS + '=' +
              Util.commonUtil.globalConstants.FIELD_MAX_CHAR_LIMIT;
      this.restUrl = Url.appendQuery(this.restUrl, query);

      Backbone.Model.prototype.constructor.apply(this, arguments);
      if (options && options.connector) {
        options.connector.assignTo(this);
      }
    },
    url: function () {
      return this.restUrl;
    },
    fetch: function () {
      this.connector.authenticator.syncStorage();
      Backbone.Model.prototype.fetch.apply(this, arguments);
    },
    fetchSuccess: function (model, response) {
      $('.esoc-user-profile-tabcontainer li.esoc-user-pulse-enabled-tabs').show();
      $('.esoc-userprofile-action-names a.esoc-userprofile-following-action').show().html(
          response.results.following ? Lang.unfollow : Lang.follow);
      $('.esoc-userprofile-action-names a.esoc-userprofile-following-action').attr('title',
          response.results.following ? Lang.unfollow : Lang.follow);
      Util.changeRelationsCounts(response.results);
      if (model.attributes.otherUser && !!model.attributes.chatSettings &&
          !!model.attributes.chatSettings.chatEnabled) {
        $('.esoc-userprofile-action-names .esoc-user-profile-chat-action').show();
      }
    },
    fetchError: function (model, response) {
      $('.esoc-user-profile-tabcontainer li.esoc-user-pulse-enabled-tabs').remove();
      model.attributes.isError = true;
      model.attributes = _.extend(model.attributes, model.userWidgetView.model.attributes);
    },
    parse: function (data, options) {
      Util.commonUtil.globalConstants.MAX_CHAR_LIMIT = data.results.maxCharLimit;
      var modelAttributes = this.userWidgetView.model.attributes,
          targetFields    = ["followers_count", "friends_count", "following", "chatSettings"];
      _.each(targetFields, function (prop, id) {
        modelAttributes[prop] = data.results[prop];
      });
      data = _.extend(data.results, this.userWidgetView.model.attributes);
      return data;
    }
  });
  return ExtendedModel;
});


csui.define('css!esoc/lib/jquery.emojiarea/jquery.emojiarea',[],function(){});

csui.define('css!esoc/lib/jquery.emojiarea/jquery.emojiarea.custom',[],function(){});
csui.define('esoc/widgets/userwidget/view/extendedinfo.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'esoc/widgets/userwidget/util',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'esoc/lib/jquery.emojiarea/jquery.emojiarea.custom',
  'css!esoc/lib/jquery.emojiarea/jquery.emojiarea.css',
  'css!esoc/lib/jquery.emojiarea/jquery.emojiarea.custom.css'
], function ($, _, Handlebars, Marionette, Util, Lang, EmojisArea) {
  var self = null;
  var ExtendedInfoView = Marionette.ItemView.extend({
    tagName: "div",
    className: 'binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12',
    util: Util,
    emojiarea: new EmojisArea(),
    templateHelpers: function () {
      return {
        messages: {
          edit: Lang.edit,
          update: Lang.update,
          cancel: Lang.cancel,
          facebookLink: Lang.facebookLink,
          linkedinLink: Lang.linkedinLink,
          twitterLink: Lang.twitterLink,
          manager: Lang.manager,
          defaultManagerMessage: Lang.defaultManagerMessage,
          languagesSpoken: Lang.languagesSpoken,
          aboutMe: Lang.aboutMe,
          jobDescription: Lang.jobDescription,
          expertiseAreas: Lang.expertiseAreas,
          pastPositions: Lang.pastPositions,
          degrees: Lang.degrees,
          awards: Lang.awards,
          defaultLanguagesMessage: Lang.defaultLanguagesMessage,
          defaultAboutMeMessage: Lang.defaultAboutMeMessage,
          defaultfacebookMessage: Lang.defaultfacebookMessage,
          defaultLinkedInMessage: Lang.defaultLinkedInMessage,
          defaulttwitterLinkMessage: Lang.defaulttwitterLinkMessage,
          defaultJobDesc: Lang.defaultJobDesc,
          defaultExpertise: Lang.defaultExpertise,
          defaultPastPositions: Lang.defaultPastPositions,
          defaultDegreeMessage: Lang.defaultDegreeMessage,
          defaultAwardMessage: Lang.defaultAwardMessage,
          more: Lang.more,
          less: Lang.less,
          emoticon: Lang.emoticon
        }
      };
    },
    initialize: function (options) {
      this.extendedInfo = options;
      self = this;
    },
    constructor: function ExtendedInfoView(options) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
    },
    onEditClick: function (e) {
      if (this.model.attributes.isEditable) {
        this.$el.find(".esoc-user-see-more").hide();
        this.$el.find(".esoc-user-see-less").hide();
        this.$el.find(".esoc-user-extended-view-mode").hide();
        this.$el.find(".esoc-user-extended-edit-mode").show();
        this.options.parentView.triggerMethod('update:scrollbar');
        if (!!this.model.attributes.userInputField) {
          if (!!this.model.attributes.content) {
            var model = {
              id: this.model.attributes.content,
              name: this.$el.find(".esoc-user-display-name").text().trim()
            };
            if (this.model.attributes.formField === 'status') {
              this.$el.find('.esoc-user-extended-edit-input').trigger('focus');
              this.applyEmoji(e);
              this.$el.find('.emoji-wysiwyg-editor').trigger('focus');
            }
            this.pickerView.model.set(model);
            this.pickerView.render();
          }
          this.$el.find('.esoc-user-manager-picker-holder input').trigger('focus');
        } else {
          this.$el.find('.esoc-user-extended-edit-input').trigger('focus');
          if (this.model.attributes.formField === 'status') {
            this.applyEmoji(e);
            this.$el.find('.emoji-wysiwyg-editor').trigger('focus');
          }
        }
        // for status post paste event
        var that = this;
        $("#esoc-social-status-header").on("paste", function (e) {
          var maxCharters          = that.util.commonUtil.globalConstants.MAX_CHAR_LIMIT,
              existingStatusLength = $("#esoc-social-status-input").val().length;
          that.util.commonUtil.onCommentFormPaste(e, existingStatusLength, maxCharters);
          $("#esoc-social-status-input").innerHTML = ($("#esoc-social-status-header").html());
          that.onStatusChange(e);
        });
        this.util.commonUtil.preventDrop($("#esoc-social-status-header"));
        setTimeout(function () {
          $("#esoc-social-status-header").trigger('focus');
        }, 1000);

        this.$el.find(".esoc-user-label").removeClass("esoc-cursor-pointer");
        this.$el.find(".esoc-user-extended-edit").removeClass('esoc-edit-icon');
      }
    },
    showEditLinkForText: function (e) {
      var isvisible = this.$el.find(".esoc-user-extended-edit-input").is(':visible');
      if (!isvisible) {
        this.$el.find(".esoc-user-extended-edit").addClass('esoc-edit-icon');
        this.$el.find(".esoc-user-extended-edit").attr('href', 'javascript:void(0);').attr(
            "tabindex", "0");
      }
    },
    hideEditLinkForText: function (e) {
      this.$el.find(".esoc-user-extended-edit").removeClass('esoc-edit-icon');
      this.$el.find(".esoc-user-extended-edit").removeAttr('href');
      this.$el.find(".esoc-user-extended-edit").attr("tabindex", "-1");
    },
    submitOnEnter: function (ev) {
      var keycode = (ev.keyCode ? ev.keyCode : ev.which);
      if (keycode === 13) {
        this.updateExtendedInfoField(ev);
      }
    },
    applyEmoji: function (e) {
      this.$el.find(".emoji-wysiwyg-editor").remove();
      this.$el.find('#esoc-social-status-input').emojiarea({
        path: this.util.commonUtil.getEmojiPath(this.model.attributes.connector),
        wysiwyg: true,
        button: '.esoc-social-status-header-emotion',
        id: 'esoc-social-status-header',
        parent: this.$el.find(".esoc-status-textinput-button-holder"),
        util: this.util,
        isStatus: true,
        container: $(".esoc-general-tab"),
        widget: $(".esoc-user-widget-dialog .binf-modal-content")
      });
      this.$el.find(".emoji-wysiwyg-editor").addClass("esoc-status-header-emoji").attr({
        "id": "esoc-social-status-header",
        "style": "min-height: 100%",
        "data-text": this.templateHelpers().messages.defaultMessage
      });
    }
  });
  return ExtendedInfoView;
});

csui.define('esoc/controls/userwidget/userwidget.model.mixin',['csui/lib/jquery', 'csui/lib/underscore'
], function ($, _) {
  "use strict";
  var UserWidgetModelMixin = {
    parseModelResponse: function (model, options) {
      model.attributes.display_name = model.get("name_formatted");
      model.attributes.department_name = model.get("group_id") ? model.get("group_id").name : "";
    }
  };
  return UserWidgetModelMixin;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/userpickercard',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return " binf-disabled";
},"3":function(depth0,helpers,partials,data) {
    var helper;

  return "      <span class=\"message binf-pull-left\">"
    + this.escapeExpression(((helper = (helper = helpers['disabled-message'] || (depth0 != null ? depth0['disabled-message'] : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"disabled-message","hash":{}}) : helper)))
    + "</span>\r\n";
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n        <div class=\"esoc-mini-profile-selfuser-actions\">\r\n          <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n        </div>\r\n      </a>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "");
},"8":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-chat-action-enabled esoc-chat-action-enabled-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + " binf-hidden\">\r\n          <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-following-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.following : stack1), depth0))
    + "\">\r\n            <div class=\"esoc-miniprofile-otheruser-actions-withchat\">\r\n              <div class=\"esoc-miniprofile-followingaction "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.followingClass : stack1), depth0))
    + "\"\r\n                   title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.following : stack1), depth0))
    + "\"></div>\r\n            </div>\r\n          </a>\r\n\r\n          <div class=\"esoc-mini-profile-otheruser-actions-spacing \"></div>\r\n          <a href=\"javascript:void(0);\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.chat : stack1), depth0))
    + "\">\r\n            <div class=\"esoc-miniprofile-chat-action-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\r\n                   esoc-miniprofile-otheruser-actions-withchat esoc-miniprofile-chat-action\"></div>\r\n          </a>\r\n\r\n          <div class=\"esoc-mini-profile-otheruser-actions-spacing \"></div>\r\n          <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n            <div class=\"esoc-miniprofile-otheruser-actions-withchat\">\r\n              <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n            </div>\r\n          </a>\r\n        </div>\r\n\r\n        <div class=\"esoc-chat-action-disabled esoc-chat-action-disabled-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + " binf-hidden\">\r\n          <a href=\"javascript:void(0);\" class=\"esoc-mini-profile-following-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.following : stack1), depth0))
    + "\">\r\n            <div class=\"esoc-mini-profile-otheruser-actions-without-chat\">\r\n              <div class=\"esoc-miniprofile-followingaction "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.followingClass : stack1), depth0))
    + "\"\r\n                   title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.following : stack1), depth0))
    + "\"></div>\r\n            </div>\r\n          </a>\r\n\r\n          <div class=\"esoc-mini-profile-otheruser-actions-spacing \"></div>\r\n          <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n            <div class=\"esoc-mini-profile-otheruser-actions-without-chat\">\r\n              <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n            </div>\r\n          </a>\r\n        </div>\r\n";
},"10":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <a href=\"javascript:void(0);\" class=\"esoc-viewminiprofile-action\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\">\r\n          <div class=\"esoc-mini-profile-selfuser-actions\">\r\n            <div class=\"esoc-mini-profile-view-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.viewprofile : stack1), depth0))
    + "\"></div>\r\n          </div>\r\n        </a>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div class=\""
    + this.escapeExpression(((helper = (helper = helpers.className || (depth0 != null ? depth0.className : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"className","hash":{}}) : helper)))
    + "\">\r\n  <div class=\"member-picture"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.disabled : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " binf-pull-left\">\r\n    <span class=\"esoc-user-picker-default-img-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + " csui-icon-paceholder csui-icon\r\n            image_user_placeholder\" style=\"background-color:"
    + this.escapeExpression(((helper = (helper = helpers.userbackgroundcolor || (depth0 != null ? depth0.userbackgroundcolor : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"userbackgroundcolor","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n    <img class=\"esoc-user-picker-img-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + " csui-icon-user csui-icon binf-img-circle binf-hidden\" alt=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.image : stack1), depth0))
    + "\">\r\n  </div>\r\n  <div class=\"member-info"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.disabled : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " binf-pull-left\">\r\n    <span class=\"name binf-pull-left\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "</span>\r\n    <span class=\"email binf-pull-left\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.email || (depth0 != null ? depth0.email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"email","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "</span>\r\n    <span class=\"title binf-pull-left\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "</span>\r\n    <span class=\"department binf-pull-left\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.department_name || (depth0 != null ? depth0.department_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"department_name","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.department_name || (depth0 != null ? depth0.department_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"department_name","hash":{}}) : helper)))
    + "</span>\r\n    <span class=\"office binf-pull-left\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + "</span>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.disabled : depth0),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  </div>\r\n  <div class=\"esoc-mini-profile-actions\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.deleted : depth0),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.program(7, data, 0)})) != null ? stack1 : "")
    + "  </div>\r\n</div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_userpickercard', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/userwidget/view/userpickercard.view',['require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/url',
  'csui/utils/user.avatar.color',
  'esoc/widgets/userwidget/view/miniprofile.view',
  'esoc/widgets/utils/chat/chat.view',
  'esoc/widgets/userwidget/util',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'hbs!esoc/widgets/userwidget/impl/userpickercard',
  'esoc/factory/pulsesettingsfactory',
  'esoc/controls/userwidget/userwidget.view',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function (_require, $, _, Handlebars, Marionette, Url, UserAvatarColor, MiniProfileView, ChatView, Util, lang,
    UserPickerCardTemplate, PulseSettingsFactory, UserWidgetView) {
  var UserPickerCardView = Marionette.ItemView.extend({
    util: Util,
    className: 'esoc-userpickercard-container',
    template: UserPickerCardTemplate,
    initialize: function (options) {
      this.options = options;
      var connector = this.options.connector || this.model.collection.connector;
      this.chatSettings = options.context.getModel(PulseSettingsFactory,
          {attributes: {id: "chat"}, options: {chat: true}, permanent: true}).ensureFetched();
      this.followUnfollowActionUrl = Url.combine(
          this.util.commonUtil.getV2Url(connector.connection.url),
          this.util.commonUtil.REST_URLS.pulseRestUrl,
          this.model.attributes.id);
      this.model.on('show:Actions', this.showActions, this);
      this.model.on('hide:Actions', this.hideActions, this);
    },
    constructor: function UserPickerCardView(options) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
    },
    ui: {
      'viewProfileAction': '.esoc-picker-view .esoc-viewminiprofile-action',
      'followUnFollowAction': '.esoc-picker-view .esoc-mini-profile-following-action',
      'chatAction': '.esoc-picker-view .esoc-social-chat-icon',
      'actionSpacing': '.esoc-picker-view .esoc-mini-profile-otheruser-actions-spacing'
    },
    templateHelpers: function () {
      var messages = {
        chat: lang.chatLabel,
        image: lang.image
      }
      return {
        messages: messages
      };
    },
    events: {
      'click @ui.viewProfileAction': 'showUserProfileDialog',
      'click @ui.followUnFollowAction': 'followUnfollowAction',
      'mousedown @ui.followUnFollowAction': 'preventDefaultAction',
      'mousedown @ui.chatAction': 'preventDefaultAction',
      'mousedown @ui.actionSpacing': 'preventDefaultAction',
      'click @ui.actionSpacing': 'preventDefaultAction',
      'click @ui.chatAction': 'preventDefaultAction'
    },
    /**
     * Prevents selection of the item in the picker card
     * @param e
     */
    preventDefaultAction: function (e) {
      e.preventDefault();
      e.stopImmediatePropagation();
    },
    /**
     * Show follow/unfollow/chat/view actions in the picker card
     */
    showActions: function () {
      this.$el.find(".esoc-mini-profile-userinfo").addClass(
          "esoc-mini-profile-userinfo-with-actions");
      this.$el.find(".member-info").addClass("member-info-with-actions");
      this.$el.find(".esoc-mini-profile-actions").show();
    },
    /**
     * Hide follow/unfollow/chat/view actions
     */
    hideActions: function () {
      this.$el.find(".esoc-mini-profile-actions").hide();
      this.$el.find(".member-info").removeClass("member-info-with-actions");
    },
    onRender: function (e) {
      var that = this;
      // show the chat icon based on chat settings
      that.options.userbackgroundcolor = UserAvatarColor.getUserAvatarColor(this.model.attributes);
      if (that.model.attributes.otherUser) {
        that.chatSettings.done(function (response) {
          if (response.attributes.chatSettings.chatEnabled) {
            that.$el.find(".esoc-chat-action-enabled-" + that.model.attributes.id).removeClass('binf-hidden');
            var contentRegion = new Marionette.Region({
                  el: that.$el.find(".esoc-miniprofile-chat-action")
                }),
                chatOptions   = {
                  context: that.options.context,
                  tguser: that.model.attributes.name,
                  domain: response.attributes.chatSettings.chatDomain
                },
                chatView      = new ChatView(chatOptions);
            contentRegion.show(chatView);
          } else {
            that.$el.find(".esoc-chat-action-disabled-" + that.model.attributes.id).removeClass('binf-hidden');
          }
        });
      }
      this.setProfilePic();
    },
    /**
     * Sets the profile picture in the picker card
     */
    setProfilePic: function () {
      var userId                = this.options.model.attributes.id,
          userProfilePicOptions = {
            context: this.options.context,
            userid: userId,
            photoElement: this.$el.find(".esoc-user-picker-img-" + Util.escapeSelector(userId)),
            defaultPhotElement: this.$el.find(".esoc-user-picker-default-img-" + Util.escapeSelector(userId)),
            userbackgroundcolor: this.options.userbackgroundcolor
          };
      this.util.commonUtil.setProfilePic(userProfilePicOptions);
      this.util.commonUtil.setUserColor(userProfilePicOptions); 
    },
    /**
     * Navigates to the selected user's full pofile
     * @param e
     */
    showUserProfileDialog: function (e) {
      this.model.attributes.userid = this.model.attributes.id;
      var userwidgetOptions = _.extend({}, this.options.widgetOptions);
      delete userwidgetOptions["model"];
      userwidgetOptions.model = this.model;
      UserWidgetView = !!UserWidgetView ? UserWidgetView :
                       _require("esoc/controls/userwidget/userwidget.view");
      var newUserWidgetView = new UserWidgetView(userwidgetOptions);
      newUserWidgetView.showUserProfileDialog(e);
    },
    /**
     * Action to Follow/Unfollow a user from the picker card
     * @param e
     */
    followUnfollowAction: function (e) {
      e.stopPropagation(e);
      var formData = new FormData(),
          _evnt    = e || window.event;
      var followUnfollowAction = !this.model.attributes.following ?
                                 Util.commonUtil.globalConstants.FOLLOW :
                                 Util.commonUtil.globalConstants.UNFOLLOW;
      formData.append(Util.commonUtil.globalConstants.ACTION, followUnfollowAction);
      var args = {
        "itemview": this,
        "url": this.followUnfollowActionUrl,
        "type": "POST",
        "data": formData,
        "requestType": "miniProfilePopup",
        "targetElement": $(e.target.parentElement),
        "connector": this.options.connector
      };
      this.util.updateAjaxCall(args);
    }
  });
  return UserPickerCardView;
});
csui.define('esoc/widgets/userwidget/model/userpickercard.model',[
  'csui/lib/underscore',
  'csui/lib/backbone',
  "csui/models/resource",
  'esoc/widgets/userwidget/util'
], function (_, Backbone, ResourceModel, Util) {
  var UserPickerCardModel = Backbone.Model.extend(_.extend({},
      ResourceModel(Backbone.Model), {
        defaults: {
          className: "esoc-picker-view csui-userpicker-item"
        },
        constructor: function UserPickerCardModel(options) {
          Backbone.Model.prototype.constructor.apply(this, arguments);
        },
        parse: function (data, options) {
          var memberData = data.data.properties;
          memberData.display_name = memberData.name_formatted;
          memberData.department_name = memberData.group_id_expand ?
                                       memberData.group_id_expand.name : "";
          //set the actions to be displayed based on the following status
          Util.setRelationModel(memberData, {
            following: memberData.following,
            selfUser: memberData.self
          });
          return memberData;
        }
      }));
  return UserPickerCardModel;
});

csui.define('esoc/widgets/userwidget/model/userpicker.model',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  "csui/lib/underscore",
  "esoc/widgets/userwidget/model/userpickercard.model",
  "esoc/widgets/userwidget/util",
  'csui/utils/url',
  'csui/utils/contexts/factories/user',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'csui/models/resource'
], function ($, Backbone, _, UserPickerCardModel, UserWidgetUtil, Url, UserModelFactory, lang,
    ResourceModel) {
  var UserPickerCollection = Backbone.Collection.extend(
      _.extend({},
          ResourceModel(Backbone.Collection), {
            util: UserWidgetUtil,
            model: UserPickerCardModel,
            constructor: function UserPickerCollection(options) {
              this.user = options.context ?
                          options.context.getModel(UserModelFactory) : undefined;
              this.limit = options.limit || 10;
              this.query = options.query || "";
              if (options.memberFilter && options.memberFilter.type) {
                this.memberType = options.memberFilter.type;
              }
              // Default is to search users and groups
              this.memberType || (this.memberType = [0, 1]);

              if (options && options.connector) {
                options.connector.assignTo(this);
              }
              Backbone.Collection.prototype.constructor.apply(this, arguments);
            },

            urlRoot: function () {
              return Url.combine(this.util.commonUtil.getV2Url(this.connector.connection.url),
                  this.util.commonUtil.REST_URLS.searchUsersUrl);
            },
            url: function () {
              var limitClause = "?limit=" + this.limit;
              // There can be many where_type clauses in the REST API call, add each.
              // Unsupported types will be ignored by the REST API if they are integers.
              var memberClause = this.memberType.length &&
                                 "&where_type=" + this.memberType.join("&where_type=") || "";
              var expandClause = encodeURIComponent("&expand=properties{group_id}");
              // The filter query.
              var queryClause = "&query=" + encodeURIComponent(this.query);

              // Return the query
              return _.result(this, "urlRoot") + limitClause + memberClause + expandClause +
                     queryClause;
            },
            parse: function (response) {
              for (var index in response.results) {
                var user = response.results[index];
                // Check if the user is logged in user or not as the actions differ for logged
                // in and other user
                if (user.data.properties.id === this.user.get("id")) {
                  user.data.properties.self = true;
                }
              }
              return response.results;
            },
            fetch: function () {
              return this.Fetchable.fetch.apply(this, arguments);
            }
          }));

  return UserPickerCollection;
});

csui.define('esoc/widgets/userwidget/view/customuserpicker.view',[
  'require',
  'csui/lib/underscore',
  'csui/lib/jquery',
  'csui/lib/marionette',
  'csui/utils/base',
  'csui/controls/userpicker/userpicker.view',
  'esoc/controls/userwidget/userwidget.view',
  'esoc/controls/userwidget/userwidget.model.mixin',
  'esoc/widgets/userwidget/view/userpickercard.view',
  'esoc/widgets/userwidget/model/userpicker.model'
], function (_require, _, $, Marionette, Base, UserPickerView,
    UserWidgetView, UserWidgetModelMixin, UserPickerCardView, UserPickerCollection) {

  var CustomUserPickerView = UserPickerView.extend({
    constructor: function CustomUserPickerView(options) {
      options || (options = {});
      //Setting custom view to userpicker.view
      options.userView = options.widgetoptions.showActions ? UserPickerCardView : "";
      options.connector = options.widgetoptions.connector;
      options.relation = options.widgetoptions.relation;
      var userPickerCollection = new UserPickerCollection(options);
      //Setting custom collection to userpicker.view
      options.collection = options.widgetoptions.showActions ? userPickerCollection : "";
      this.options = options;
      UserPickerView.prototype.constructor.apply(this, arguments);
    },

    currentlyFocusedElement: function (event) {
      if (!!this.ui.searchclear && $(this.ui.searchclear).is(':visible')) {
        this.ui.searchclear.attr("tabindex", "0").attr("data-cstabindex", "0");
      } else {
        this.ui.searchbox.attr("tabindex", "0").attr("data-cstabindex", "0");
      }
      return undefined;
    },

    //Will have to revisit this method if "_retrieveMembers" method of userpicker.view
    // changes."reset:true" option is passed to fetch method
    _retrieveMembers: function (query) {
      // user picker view ...
      var self = this;
      // prepare collection
      self.collection.query = query;
      // fetch and resolve
      return self.collection
          .fetch({reset: true})
          .then(function () {
            // execute callback
            if (typeof self.options.onRetrieveMembers === 'function') {
              self.options.onRetrieveMembers({
                collection: self.collection
              });
            }
            // resolve
            return self.collection.models;
          });
    },

    /**
     * Overriden method to be able to pass extra options to the view
     * @param item
     * @returns {*}
     * @private
     */
    _renderHighlighter: function (item) {
      var model = this.collection.findWhere({name: item});
      // create view ...
      var MemberView = (model.get('type') === 0) ? this.options.userView : this.options.groupView;
      var view = new MemberView({
        model: model,
        connector: this.options.widgetoptions.connector,
        widgetOptions: this.options.widgetoptions,
        context: this.options.context,
        disabledMessage: this.options.disabledMessage
      });
      // ... and render
      return view.render().el;
    },

    _resetInput: function (e) {
      // Below condition restricts the focus lost on userpicker, when activity feed New Updates are triggered
      if ((e.target.className !== "esoc-activityfeed-invisiblebutton" &&
           e.target.className !== "activityfeed-expand-invisiblebutton")) {
        $(".typeahead.binf-form-control.cs-search").val('');
      }
    },

    onShow: function (e) {
      if (this.options.widgetoptions.showActions) {
        $('.typeahead.binf-form-control.cs-search').on('focusout', this, this._resetInput);
      }
    },

    _afterSelect: function (model) {
      // redirect to userwidget
      if (this.options.widgetoptions.showActions) {
        var pickerOptions = _.extend({}, this.options.widgetoptions);
        delete pickerOptions["model"];
        this.parseModelResponse(model);
        pickerOptions.model = model;
        pickerOptions.userid = model.attributes.id;
        UserWidgetView = !!UserWidgetView ? UserWidgetView :
                         _require("esoc/controls/userwidget/userwidget.view");
        var newUserWidgetView = new UserWidgetView(pickerOptions);
        newUserWidgetView.showUserProfileDialog();
      } else {
        // update text and styles ...
        var val = this.options.clearOnSelect ? '' : Base.formatMemberName(model);
        this.ui.searchbox.val(val);
        this.updateStyles();
        this.options.userView.userPicked = true;
        // ... trigger change
        this.trigger('item:change', {item: model});
      }
    },
    _nextHighlighter: function (e) {
      if (this.options.widgetoptions.showActions && e.data("value")) {
        e.data("value").trigger("show:Actions");
      }
    },
    _currentHighlighter: function (e) {
      if (this.options.widgetoptions.showActions && e.data("value")) {
        e.data("value").trigger("hide:Actions");
      }
    },
    _positionContainer: function (context) {
      context.$scrollContainer.perfectScrollbar('update');
      if (this.collection.length > 0) {
        context.$menu.removeClass("csui-no-results-wrapper");
      }
      UserPickerView.prototype._positionContainer.call(this, context);
      context.$element.css("height", "");
    }
  });
  _.extend(CustomUserPickerView.prototype, UserWidgetModelMixin);
  return CustomUserPickerView;

});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/extendedinfotextfield',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return "  <div class=\"esoc-user-label esoc-user-textarea-label\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.extendedLabelClass : depth0),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.program(4, data, 0)})) != null ? stack1 : "")
    + "    <div class=\"esoc-user-extended-info esoc-user-extended-view-mode\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.userInputField : depth0),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "      <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n         class=\"esoc-user-see-more esoc-user-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n        <span class=\"icon-arrow-down\"></span></a>\r\n      <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n         class=\"esoc-user-see-less esoc-user-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n        <span class=\"icon-arrow-up\"></span></a>\r\n    </div>\r\n";
},"2":function(depth0,helpers,partials,data) {
    var helper;

  return "      <span class="
    + this.escapeExpression(((helper = (helper = helpers.extendedLabelClass || (depth0 != null ? depth0.extendedLabelClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"extendedLabelClass","hash":{}}) : helper)))
    + ">"
    + this.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"label","hash":{}}) : helper)))
    + "</span>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var helper;

  return "      <span class=\"esoc-user-extended-info-label\">"
    + this.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"label","hash":{}}) : helper)))
    + "</span>\r\n";
},"6":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-user-manager-field\">\r\n          <div class=\"esoc-user-manager-avatar-container\">\r\n        <span id=\"esoc-user-default-avatar\" class=\"image_user_placeholder\r\n          esoc-user-default-avatar\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n            <img id=\"esoc-user-manager-avatar\" class=\"binf-img-circle esoc-user-manager-avatar\" src=\"\" />\r\n          </div>\r\n      <span class=\"esoc-widget-user-display-name esoc-user-messages\" data-userid=\""
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "\"\r\n            data-username=\""
    + this.escapeExpression(((helper = (helper = helpers.reportsTo || (depth0 != null ? depth0.reportsTo : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"reportsTo","hash":{}}) : helper)))
    + "\" />\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <div\r\n                class=\"esoc-user-extendedinfo-edit-icon "
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.reportsTo : depth0),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\">\r\n              <a class=\"esoc-user-extended-edit\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\"></a>\r\n            </div>\r\n";
},"8":function(depth0,helpers,partials,data) {
    return " esoc-user-extendedinfo-reports-to-edit-icon ";
},"10":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-user-extendedinfo\">\r\n          <div class=\"esoc-user-extendedinfo-content\">\r\n            <a "
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n                                  class=\"esoc-user-messages-content esoc-user-messages\">\r\n              <div class=\"esoc-social-status-data esoc-user-content esoc-user-messages-content\r\n                  esoc-user-extended-info-content "
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(13, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "</div>\r\n            </a>\r\n          </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(15, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n";
},"11":function(depth0,helpers,partials,data) {
    return " href=\"javascript:void(0);\" ";
},"13":function(depth0,helpers,partials,data) {
    return " esoc-cursor-pointer ";
},"15":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <div class=\"esoc-user-extendedinfo-edit-icon\">\r\n              <a class=\"esoc-user-extended-edit\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\"></a>\r\n            </div>\r\n";
},"17":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(18, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"18":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <div class=\"esoc-user-label esoc-user-textarea-label \">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.extendedLabelClass : depth0),{"name":"if","hash":{},"fn":this.program(19, data, 0),"inverse":this.program(21, data, 0)})) != null ? stack1 : "")
    + "      </div>\r\n      <div\r\n          class=\"esoc-user-extended-info esoc-user-extended-view-mode esoc-user-default-content-mode\">\r\n        <div class=\"esoc-user-extendedinfo-default-content\">\r\n          <a "
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n                                class=\"esoc-user-default-content "
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "</a>\r\n        </div>\r\n        <div class=\"esoc-user-extendedinfo-edit-icon\">\r\n          <a class=\"esoc-user-extended-edit\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\"></a>\r\n        </div>\r\n      </div>\r\n";
},"19":function(depth0,helpers,partials,data) {
    var helper;

  return "          <span class="
    + this.escapeExpression(((helper = (helper = helpers.extendedLabelClass || (depth0 != null ? depth0.extendedLabelClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"extendedLabelClass","hash":{}}) : helper)))
    + ">"
    + this.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"label","hash":{}}) : helper)))
    + "</span>\r\n";
},"21":function(depth0,helpers,partials,data) {
    var helper;

  return "          <span class=\"esoc-user-extended-info-label\">"
    + this.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"label","hash":{}}) : helper)))
    + "</span>\r\n";
},"23":function(depth0,helpers,partials,data) {
    return "esoc-cursor-pointer";
},"25":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div class=\"esoc-user-hide-element esoc-user-extended-edit-mode\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.formField === 'status'",{"name":"xif","hash":{},"fn":this.program(26, data, 0),"inverse":this.program(28, data, 0)})) != null ? stack1 : "")
    + "    </div>\r\n  </div>\r\n";
},"26":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-social-status-input-container\">\r\n          <textarea id='esoc-social-status-input' class=\"esoc-user-extended-edit-textarea\r\n          esoc-user-extended-edit-input\" placeholder=\""
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "</textarea>\r\n        </div>\r\n        <div class=\"esoc-status-textinput-button-holder\">\r\n          <a href=\"javascript:void(0);\"\r\n             class=\"esoc-social-status-header-emotion esoc-social-comment-emoticon\"\r\n             id=\"esoc-social-status-emoticon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\"></a>\r\n        </div>\r\n        <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-user-text-edit-buttons\">\r\n          <button id=\"esoc-user-status-update\" class=\"esoc-user-status-update binf-btn binf-btn-primary\"\r\n                  title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "</button>\r\n          <button class=\"esoc-user-cancel binf-btn binf-btn-default\"\r\n                  title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "</button>\r\n        </div>\r\n";
},"28":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.userInputField : depth0),{"name":"if","hash":{},"fn":this.program(29, data, 0),"inverse":this.program(31, data, 0)})) != null ? stack1 : "")
    + "        <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-user-text-edit-buttons\">\r\n          <button class=\"esoc-user-update binf-btn binf-btn-primary\"\r\n                  title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "</button>\r\n          <button class=\"esoc-user-cancel binf-btn binf-btn-default\"\r\n                  title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "</button>\r\n        </div>\r\n";
},"29":function(depth0,helpers,partials,data) {
    var helper;

  return "          <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n            <div class=\"esoc-user-manager-picker-holder\"></div>\r\n            <input type=\"text\"\r\n                   class=\"esoc-user-extended-edit-text esoc-user-extended-edit-input esoc-user-hide-element\"\r\n                   value=\""
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "\" placeholder=\""
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "\"/>\r\n          </div>\r\n";
},"31":function(depth0,helpers,partials,data) {
    var helper;

  return "          <textarea class=\"esoc-user-extended-edit-textarea esoc-user-extended-edit-input\"\r\n                    placeholder=\""
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "</textarea>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.content : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(17, data, 0)})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(25, data, 0),"inverse":this.noop})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_extendedinfotextfield', t);
return t;
});
/* END_TEMPLATE */
;
/**
 *  This is to handle events on input text and text area fields
 */
csui.define('esoc/widgets/userwidget/view/extendedinfotextfield.view',['require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/contexts/factories/connector',
  'esoc/widgets/userwidget/view/extendedinfo.view',
  'esoc/widgets/userwidget/util',
  'esoc/widgets/userwidget/view/customuserpicker.view',
  'hbs!esoc/widgets/userwidget/impl/extendedinfotextfield',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'csui/lib/perfect-scrollbar'
], function (_require, $, _, Handlebars, Marionette, ConnectorFactory, ExtendedInfoView, Util, UserPickerView,
    ExtendedInfoTextFieldTemplate, Lang) {
  var self = null;
  var ExtendedInfoTextFieldView = ExtendedInfoView.extend({
    tagName: "div",
    className: 'esoc-user-extended-info-text-field binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12',
    template: ExtendedInfoTextFieldTemplate,
    util: Util,

    initialize: function (options) {
      this.extendedInfo = options;
      self = this;
    },
    events: {
      'focusin .esoc-user-extended-edit-mode': 'onStatusInputFocusIn',
      'focusout .esoc-user-extended-edit-mode': 'onStatusInputFocusOut',
      'click #esoc-user-status-update': 'postStatus',
      'click .esoc-user-update': 'updateExtendedInfoField',
      'click .esoc-user-cancel': 'cancelUpdateExtendedInfoField',
      'click .esoc-user-extended-edit, .esoc-user-messages-content, .esoc-user-default-content': 'onEditClick',
      'click .esoc-user-see-more': 'showMoreContent',
      'click .esoc-user-see-less': 'showLessContent',
      'click .esoc-user-messages-content': 'onContentClick',
      'mouseenter .esoc-user-default-content-mode, .esoc-user-extendedinfo, .esoc-user-manager-field': 'showEditLinkForText',
      'mouseleave .esoc-user-default-content-mode, .esoc-user-extendedinfo, .esoc-user-manager-field': 'hideEditLinkForText',
      'focusin .esoc-user-manager-field': 'showEditLinkForText',
      'focusout .esoc-user-manager-field': 'hideEditLinkForText',
      'keypress .esoc-user-extended-edit-text': 'submitOnEnter',
      'change #esoc-social-status-input': 'onStatusChange',
      'input #esoc-social-status-input': 'onStatusChange'
    },
    constructor: function ExtendedInfoTextAreaView(options) {
      options = options || {};
      options.connector = options.connector ? options.connector :
                          options.context.getObject(ConnectorFactory);
      this.options = options;
      Marionette.ItemView.prototype.constructor.call(this, options);
    },
    onRender: function () {
      if (!!this.options.model.attributes.userInputField) {
        if (this.options.model.attributes.isEditable) {
          this.pickerView = new UserPickerView({
            context: this.options.context,
            memberFilter: {type: [0]},
            widgetoptions: {
              connector: this.options.connector,
              showActions: false
            }
          });
          var pickerRegion = new Marionette.Region({
            el: this.$el.find('.esoc-user-manager-picker-holder')
          });
          pickerRegion.show(this.pickerView);
          this.listenTo(this.pickerView, 'item:change', this.onItemChange);
        }
        if (!!this.options.model.attributes.content) {
          Util.displayUserWidget(this.options.context, this.$el);
          var userWidgetOptions = {
            userid: this.options.model.attributes.content,
            context: this.options.context,
            placeholder: this.$el.find('.esoc-user-manager-avatar-container'),
            showUserProfileLink: true,
            showMiniProfile: true,
            showUserWidgetFor: 'profilepic',
            source: 'extendedInfoText',
            parentView: this
          };
          var UserWidget = _require('esoc/widgets/userwidget/userwidget');
          UserWidget.getUser(userWidgetOptions);
        } else {
          this.trigger("view:shown");
        }
      }
    },
    onStatusChange: function (event) {
      var statusString = this.$el.find("#esoc-social-status-input").val(),
          _e           = event || window.event,
          maxCharLimit = this.util.commonUtil.globalConstants.MAX_CHAR_LIMIT;
      if (statusString.length > maxCharLimit) {
        var statusStr = statusString.substr(0, maxCharLimit);
        this.$el.find("#esoc-social-status-input")[0].innerHTML = statusStr;
        this.$el.find("#esoc-social-status-header").html("")[0].textContent = statusStr;
        this.util.commonUtil.addEmoji(this.$el.find("#esoc-social-status-header"), false,
            this.options.connector);
        this.$el.find("#esoc-social-status-header").trigger('focus');
        this.util.commonUtil.placeCaretAtEnd(this.$el.find("#esoc-social-status-header"));
        _e.preventDefault();
      }
    },
    onItemChange: function (args) {
      this.managerID = args.item.attributes.id;
      this.$el.find(".esoc-user-extended-edit-text").val(args.item.attributes.id);
    },
    updateExtendedInfoField: function (e) {
      if (!!this.options.model.attributes.userInputField) {
        var fieldValue = this.pickerView.$el.find('input').val().trim();
        if (!fieldValue) {
          this.managerID = "";
          this.$el.find(".esoc-user-extended-edit-text").val("");
        }
      }
      var formData  = new FormData(),
          newValue  = this.$el.find(".esoc-user-extended-edit-input").val(),
          connector = this.options.connector;
      formData.append(this.util.commonUtil.globalConstants.ACTION,
          this.util.commonUtil.globalConstants.UPDATE_EXTENDED_INFO);
      formData.append(this.model.attributes.formField, newValue);
      this.$el.find(".esoc-user-extended-edit-mode").addClass("esoc-extendedinfo-update-mask");
      this.$el.find(".esoc-user-extended-edit-input").prop('disabled',
          true);
      var ajaxParams = {
        "itemview": this,
        "url": this.util.commonUtil.getV2Url(connector.connection.url) +
               this.util.commonUtil.REST_URLS.pulseRestUrl +
               this.model.attributes.userid,
        "type": "POST",
        "data": formData,
        "requestType": "updateExtendedTextField",
        "newValue": newValue,
        "targetElement": $(e.target),
        connector: connector
      };
      this.util.updateAjaxCall(ajaxParams);
    },
    postStatus: function (e) {
      var formData  = new FormData(),
          newValue  = this.$el.find(".esoc-user-extended-edit-input").val(),
          connector = this.options.connector;
      formData.append(this.model.attributes.formField, newValue);
      this.$el.find(".esoc-user-extended-edit-mode").addClass("esoc-extendedinfo-update-mask");
      this.$el.find(".esoc-user-extended-edit-input").prop('disabled',
          true);
      var ajaxParams = {
        "itemview": this,
        "url": connector.connection.url +
               this.util.commonUtil.REST_URLS.csPostCommentRESTUrl,
        "type": "POST",
        "data": formData,
        "requestType": "postStatus",
        "newValue": newValue,
        "targetElement": $(e.target),
        connector: connector
      };
      this.util.updateAjaxCall(ajaxParams);
    },
    onShow: function (e) {
      this.showSeeMoreLink(e);
      if (!this.options.model.attributes.userInputField) {
        this.trigger("view:shown");
      } else if (this.isUserModelLoaded) {
        this.trigger("view:shown");
      }
    },
    showSeeMoreLink: function (e) {
      var content = this.$el.find(".esoc-user-content");
      if (content.length > 0) {
        if (this.model.attributes.formField === 'status') {
          content[0].innerHTML = content.text();
          content.addClass("esoc-see-more-content");
          if (Util.commonUtil.isTextOverflown(content[0])) {
            this.$el.find(".esoc-user-see-more").show();
          }
          this.util.commonUtil.addEmoji(this.$el.find('.esoc-user-content'), true,
              this.options.connector);
        } else {
          content.html(Util.commonUtil.onClickableUrl(content.html(), true));
          content.addClass("esoc-see-more-content");
          if (Util.commonUtil.isTextOverflown(content[0])) {
            this.$el.find(".esoc-user-see-more").show();
          }
        }
      }
    },
    onContentClick: function (e) {
      e.stopPropagation();
      if (this.$el.find(".esoc-user-see-more").is(':visible')) {
        this.showMoreContent(e);
      } else if (this.$el.find(".esoc-user-see-less").is(':visible')) {
        this.showLessContent(e);
      }
    },
    showMoreContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.$el.find(".esoc-user-see-less").show();
        this.$el.find(".esoc-user-see-more").hide();
        this.$el.find(".esoc-user-content").removeClass("esoc-see-more-content");
        $("#esoc-user-focus-element").trigger('focus');
      }
    },
    showLessContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.$el.find(".esoc-user-see-less").hide();
        this.$el.find(".esoc-user-see-more").show();
        this.$el.find(".esoc-user-content").addClass("esoc-see-more-content");
        $("#esoc-user-focus-element").trigger('focus');
        this.options.parentView.triggerMethod('update:scrollbar');
      }
    },
    cancelUpdateExtendedInfoField: function (e) {
      this.render();
      this.trigger("change:content");
      if (this.model.attributes.content) {
        if (!!this.model.attributes.userInputField) {
          this.$el.find('.esoc-user-messages a').trigger('focus');
        } else {
          this.$el.find('.esoc-user-messages').trigger('focus');
        }
      } else {
        this.$el.find('.esoc-user-default-content').trigger('focus');
      }
      this.showSeeMoreLink(e);
      this.options.parentView.triggerMethod('update:scrollbar');
    },
    onStatusInputFocusIn: function (e) {
      this.$el.find('.esoc-status-header-emoji').addClass('esoc-status-header-emoji-focus');
    },
    onStatusInputFocusOut: function (e) {
      this.$el.find('.esoc-status-header-emoji').removeClass('esoc-status-header-emoji-focus');
    }
  });
  return ExtendedInfoTextFieldView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/extendedinfolinkfield',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "  <a href=\""
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "\" target=\"_blank\" class=\""
    + this.escapeExpression(((helper = (helper = helpers.linkClass || (depth0 != null ? depth0.linkClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"linkClass","hash":{}}) : helper)))
    + " esoc-user-external-profile-link\r\n  binf-col-lg-3 binf-col-md-3 binf-col-sm-3 binf-col-xs-3\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"label","hash":{}}) : helper)))
    + "\">\r\n  </a>\r\n  <div class=\"esoc-extended-info-link-holder binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div class=\"esoc-user-extended-label esoc-user-profile-link-label esoc-user-label\">"
    + this.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"label","hash":{}}) : helper)))
    + "\r\n    </div>\r\n    <div class=\"esoc-user-extended-view-mode esoc-user-profile-link-content esoc-user-links\">\r\n      <div class=\"esoc-user-messages-content esoc-user-messages esoc-user-widget-links-content\">\r\n        <a href=\""
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "\" target=\"_blank\">"
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "</a>\r\n      </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "    </div>\r\n  </div>\r\n";
},"2":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-user-extendedinfo-edit-icon\">\r\n          <a class=\"esoc-user-extended-edit\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\"></a>\r\n        </div>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"5":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "    <div\r\n        class=\""
    + this.escapeExpression(((helper = (helper = helpers.linkClass || (depth0 != null ? depth0.linkClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"linkClass","hash":{}}) : helper)))
    + " esoc-user-external-profile-link binf-col-lg-3 binf-col-md-3 binf-col-sm-3 binf-col-xs-3\" />\r\n    <div class=\"esoc-extended-info-link-holder binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\" esoc-user-extended-label esoc-user-profile-link-label esoc-user-label\">"
    + this.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"label","hash":{}}) : helper)))
    + "\r\n      </div>\r\n      <div\r\n          class=\"esoc-user-extended-info esoc-user-extended-view-mode esoc-user-default-content-mode\">\r\n        <div class=\"esoc-user-extendedinfo-default-content\">\r\n          <a href=\"javascript:void(0);\"\r\n             class=\"esoc-user-profile-link-content esoc-user-default-content "
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "</a>\r\n        </div>\r\n        <div class=\"esoc-user-extendedinfo-edit-icon\">\r\n          <a class=\"esoc-user-extended-edit\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\"></a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n";
},"6":function(depth0,helpers,partials,data) {
    return " esoc-cursor-pointer ";
},"8":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "  <div class=\"esoc-extended-info-link-holder binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div\r\n        class=\"esoc-user-hide-element esoc-user-extended-edit-mode esoc-user-extended-edit-content\">\r\n      <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-user-edit-textbox\">\r\n        <input type=\"text\" class=\"esoc-user-extended-edit-text esoc-user-extended-edit-input\"\r\n               value=\""
    + this.escapeExpression(((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"content","hash":{}}) : helper)))
    + "\" placeholder=\""
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.defaultMessage || (depth0 != null ? depth0.defaultMessage : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"defaultMessage","hash":{}}) : helper)))
    + "\"/>\r\n      </div>\r\n      <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-user-text-edit-buttons\">\r\n        <button class=\"esoc-user-update binf-btn binf-btn-primary\"\r\n                title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "</button>\r\n        <button class=\"esoc-user-cancel binf-btn binf-btn-default\"\r\n                title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.content : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(4, data, 0)})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isEditable : depth0),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.noop})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_extendedinfolinkfield', t);
return t;
});
/* END_TEMPLATE */
;
/**
 *  This is to handle events on link fields
 */
csui.define('esoc/widgets/userwidget/view/extendedinfolinkfield.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'esoc/widgets/userwidget/view/extendedinfo.view',
  'esoc/widgets/userwidget/util',
  'hbs!esoc/widgets/userwidget/impl/extendedinfolinkfield',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'csui/lib/perfect-scrollbar'
], function ($, _, Handlebars, Marionette, ExtendedInfoView, Util, ExtendedInfoLinkFieldTemplate,
    Lang) {
  var self = null;
  var ExtendedInfoLinkFieldView = ExtendedInfoView.extend({
    tagName: "div",
    className: 'esoc-user-extended-info-link binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12',
    template: ExtendedInfoLinkFieldTemplate,
    util: Util,
    initialize: function (options) {
      this.extendedInfo = options;
      self = this;
    },
    events: {
      'click .esoc-user-update': 'updateExtendedInfoField',
      'click .esoc-user-cancel': 'cancelUpdateExtendedInfoField',
      'click .esoc-user-extended-edit, .esoc-user-default-content': 'onEditClick',
      'mouseenter .esoc-user-links, .esoc-user-default-content-mode': 'showEditLinkForText',
      'mouseleave .esoc-user-links, .esoc-user-default-content-mode': 'hideEditLinkForText',
      'focusin .esoc-user-links': 'showEditLinkForText',
      'focusout .esoc-user-links': 'hideEditLinkForText',
      'keypress .esoc-user-extended-edit-text': 'submitOnEnter'
    },
    constructor: function ExtendedInfoLinkFieldView(options) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
    },
    onEditClick: function (e) {
      if (this.model.attributes.isEditable) {
        var content = this.model.attributes.content;
        this.$el.find(".esoc-user-extended-view-mode").hide();
        this.$el.find(".esoc-user-extended-edit-mode").show();
        this.$el.find(".esoc-user-extended-edit-input").trigger('focus');
        this.$el.find(".esoc-user-label").removeClass("esoc-cursor-pointer");
        this.$el.find(".esoc-user-extended-edit").removeClass('esoc-edit-icon');
        if (content === undefined || content.length === 0) {
          this.$el.find(".esoc-user-extended-edit-input").val(
              this.util.commonUtil.globalConstants.HTTP_LINK);
        }
      }
    },
    updateExtendedInfoField: function (e) {
      var formData  = new FormData(),
          newValue  = this.$el.find(".esoc-user-extended-edit-input").val(),
          regExp    = /(^(https?):\/\/)/i,
          connector = this.options.connector;
      if (newValue.length > 0 && newValue.match(regExp) === null) {
        newValue = this.util.commonUtil.globalConstants.HTTP_LINK + newValue;
        this.$el.find(".esoc-user-extended-edit-input").val(newValue);
      }
      this.$el.find(".esoc-user-extended-edit-mode").addClass("esoc-extendedinfo-update-mask");
      this.$el.find(".esoc-user-extended-edit-input").prop('disabled',
          true);
      formData.append(this.util.commonUtil.globalConstants.ACTION,
          this.util.commonUtil.globalConstants.UPDATE_EXTENDED_INFO);
      formData.append(this.model.attributes.formField, newValue);
      var ajaxParams = {
        "itemview": this,
        "url": this.util.commonUtil.getV2Url(connector.connection.url) +
               this.util.commonUtil.REST_URLS.pulseRestUrl +
               this.model.attributes.userid,
        "type": "POST",
        "data": formData,
        "requestType": "updateExtendedLink",
        "targetElement": $(e.target),
        connector: connector
      };
      this.util.updateAjaxCall(ajaxParams);
    },
    onShow: function () {
      this.addEllipsisOnFocus();
      this.trigger("view:shown");
    },
    cancelUpdateExtendedInfoField: function (e) {
      this.$el.find(".esoc-user-extended-edit-mode").hide();
      this.$el.find(".esoc-user-extended-edit-input").val(this.model.attributes.content);
      this.$el.find(".esoc-user-extended-view-mode").show();
      if (this.model.attributes.content) {
        this.$el.find('.esoc-user-messages a').trigger('focus');
      } else {
        this.$el.find('.esoc-user-default-content').trigger('focus');
      }
    },
    addEllipsisOnFocus: function () {
      var that = this;
      this.$el.find(".esoc-user-links .esoc-user-messages").each(function (i) {
        if ($(this).innerWidth() < $(this)[0].scrollWidth) {
          that.$el.find(".esoc-user-messages a").addClass("esoc-user-links-ellipsis-onfocus");
        }
      });
    }
  });
  return ExtendedInfoLinkFieldView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/general',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.chatSettings : depth0)) != null ? stack1.presenceEnabled : stack1),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        ";
},"2":function(depth0,helpers,partials,data) {
    return "            <div id=\"esoc-user-profile-presence-indicator\" class=\"esoc-user-profile-presence-indicator binf-col-lg-12 binf-col-md-12 binf-col-sm-12\r\n    binf-col-xs-12\"></div>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var helper;

  return "        <div class=\"esoc-user-title binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">"
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "</div>\r\n";
},"6":function(depth0,helpers,partials,data) {
    var helper;

  return "        <div\r\n            class=\"esoc-department-name binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">"
    + this.escapeExpression(((helper = (helper = helpers.department_name || (depth0 != null ? depth0.department_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"department_name","hash":{}}) : helper)))
    + "</div>\r\n";
},"8":function(depth0,helpers,partials,data) {
    var helper;

  return "        <div\r\n            class=\"esoc-user-location binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">"
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + "</div>\r\n";
},"10":function(depth0,helpers,partials,data) {
    var helper;

  return "        <div class=\"esoc-user-email esoc-user-links binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n          <a href=\"mailto:"
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.business_email || (depth0 != null ? depth0.business_email : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_email","hash":{}}) : helper)))
    + "</a>\r\n        </div>\r\n";
},"12":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-user-business-phone binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n          <span\r\n              class=\"esoc-user-messages-business-phone esoc-user-general-info-label\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.phone : stack1), depth0))
    + " </span>\r\n          <span class=\"esoc-user-general-info-content\">"
    + this.escapeExpression(((helper = (helper = helpers.business_phone || (depth0 != null ? depth0.business_phone : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_phone","hash":{}}) : helper)))
    + "</span>\r\n        </div>\r\n";
},"14":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-user-business-fax binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n          <span\r\n              class=\"esoc-user-messages-business-fax esoc-user-general-info-label\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fax : stack1), depth0))
    + " </span>\r\n          <span class=\"esoc-user-general-info-content\">"
    + this.escapeExpression(((helper = (helper = helpers.business_fax || (depth0 != null ? depth0.business_fax : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"business_fax","hash":{}}) : helper)))
    + "</span>\r\n        </div>\r\n";
},"16":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-user-time-zone binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n          <span\r\n              class=\"esoc-user-messages-timezone esoc-user-general-info-label\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.timezone : stack1), depth0))
    + " </span>\r\n          <span class=\"esoc-user-general-info-content\">"
    + this.escapeExpression(((helper = (helper = helpers.time_zone || (depth0 != null ? depth0.time_zone : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"time_zone","hash":{}}) : helper)))
    + "</span>\r\n        </div>\r\n";
},"18":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showFacebookLink : stack1),{"name":"if","hash":{},"fn":this.program(19, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showLinkedinLink : stack1),{"name":"if","hash":{},"fn":this.program(21, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showTwitterLink : stack1),{"name":"if","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showReportsTo : stack1),{"name":"if","hash":{},"fn":this.program(25, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showLangSpoken : stack1),{"name":"if","hash":{},"fn":this.program(27, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"19":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-facebook-link\"></div>\r\n";
},"21":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-linked-link\"></div>\r\n";
},"23":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-twitter-link\"></div>\r\n";
},"25":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-reports-to\"></div>\r\n";
},"27":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-languages-spoken\"></div>\r\n";
},"29":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.statusPost : stack1),{"name":"if","hash":{},"fn":this.program(30, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showAboutMe : stack1),{"name":"if","hash":{},"fn":this.program(32, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showJobDesc : stack1),{"name":"if","hash":{},"fn":this.program(34, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showExpertise : stack1),{"name":"if","hash":{},"fn":this.program(36, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showPastPositions : stack1),{"name":"if","hash":{},"fn":this.program(38, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showDegrees : stack1),{"name":"if","hash":{},"fn":this.program(40, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showAwards : stack1),{"name":"if","hash":{},"fn":this.program(42, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"30":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-status-post\"></div>\r\n";
},"32":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-about-me\"></div>\r\n";
},"34":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-job-description\"></div>\r\n";
},"36":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-expertise\"></div>\r\n";
},"38":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-past-positions\"></div>\r\n";
},"40":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-degree\"></div>\r\n";
},"42":function(depth0,helpers,partials,data) {
    return "        <div class=\"esoc-user-awards\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div class=\"esoc-general-tab-content binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div class=\"esoc-general-tab-sub-content binf-col-lg-6 binf-col-md-6 binf-col-sm-12 binf-col-xs-12\">\r\n    <div class=\"esoc-user-general-details binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-user-name binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.chatSettings : depth0)) != null ? stack1.chatEnabled : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "</div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.title : depth0),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.department_name : depth0),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.office_location : depth0),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.business_email : depth0),{"name":"if","hash":{},"fn":this.program(10, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.business_phone : depth0),{"name":"if","hash":{},"fn":this.program(12, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.business_fax : depth0),{"name":"if","hash":{},"fn":this.program(14, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.time_zone : stack1),{"name":"if","hash":{},"fn":this.program(16, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "    </div>\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.errorMessage : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(18, data, 0)})) != null ? stack1 : "")
    + "  </div>\r\n  <div class=\"esoc-general-tab-sub-content binf-col-lg-6 binf-col-md-6 binf-col-sm-12 binf-col-xs-12\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.errorMessage : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(29, data, 0)})) != null ? stack1 : "")
    + "  </div>\r\n</div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_general', t);
return t;
});
/* END_TEMPLATE */
;
/**
 *  This is to get user's general information
 */
csui.define('esoc/widgets/userwidget/view/general.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/contexts/factories/connector',
  'esoc/widgets/userwidget/model/extended.model',
  'esoc/widgets/userwidget/util',
  'esoc/widgets/userwidget/view/extendedinfotextfield.view',
  'esoc/widgets/userwidget/view/extendedinfolinkfield.view',
  'esoc/widgets/userwidget/chat/view/presence.view',
  'esoc/widgets/userwidget/chat/chatfactory',
  'hbs!esoc/widgets/userwidget/impl/general',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'csui/controls/tile/behaviors/perfect.scrolling.behavior'
], function ($, _, Backbone, Handlebars, Marionette, ConnectorFactory, UserExtendedInfoModel, Util,
    ExtendedInfoTextFieldView, ExtendedInfoLinkFieldView, PresenceView, ChatFactory,
    GeneralTemplate, Lang,
    PerfectScrollingBehavior) {
  var self = null;
  var GeneralView = Marionette.ItemView.extend({
    tagName: "div",
    className: 'esoc-general-tab binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12',
    template: GeneralTemplate,
    util: Util,
    templateHelpers: function () {
      var extendedInfo = this.options.model.attributes.extendedInfo,
          canEdit      = !this.options.model.attributes.otherUser &&
                         (!!extendedInfo && extendedInfo.isEditable);
      return {
        messages: {
          phone: Lang.phone,
          fax: Lang.fax,
          timezone: Lang.timezone,
          showFacebookLink: canEdit || (!!extendedInfo && !!extendedInfo.facebookLink),
          showLinkedinLink: canEdit || (!!extendedInfo && !!extendedInfo.linkedinLink),
          showTwitterLink: canEdit || (!!extendedInfo && !!extendedInfo.twitterLink),
          showReportsTo: canEdit || (!!extendedInfo && !!extendedInfo.reportsTo),
          showLangSpoken: canEdit || (!!extendedInfo && !!extendedInfo.languagesSpoken),
          showAboutMe: canEdit || (!!extendedInfo && !!extendedInfo.bio),
          statusPost: false,
          showJobDesc: canEdit || (!!extendedInfo && !!extendedInfo.jobDescription),
          showExpertise: canEdit || (!!extendedInfo && !!extendedInfo.expertise),
          showPastPositions: canEdit || (!!extendedInfo && !!extendedInfo.pastPositions),
          showDegrees: canEdit || (!!extendedInfo && !!extendedInfo.degree),
          showAwards: canEdit || (!!extendedInfo && !!extendedInfo.awardsHonours),
          time_zone: !!this.options.model.attributes.time_zone &&
                     this.options.model.attributes.time_zone !== -1
        }
      };
    },
    behaviors: {
      PerfectScrolling: {
        behaviorClass: PerfectScrollingBehavior,
        suppressScrollX: true,
        contentParent: ".esoc-general-tab-content",
        scrollYMarginOffset: 15 // like bottom padding of container, otherwise scrollbar is shown always
      }
    },
    initialize: function (options) {
      var childViews = [];
      this.options = options;
      if (!this.options.connector) {
        this.options.connector = this.options.context.getObject(ConnectorFactory);
      }

      if (!this.options.model.attributes.isError) {
        var self         = this,
            ExtendedInfo = Backbone.Model.extend({}),
            messages     = this.templateHelpers().messages,
            extdInfo     = this.model.attributes.extendedInfo,
            defaultAttrs = {
              userid: this.model.attributes.userid,
              connector: this.options.connector,
              isEditable: !this.model.attributes.otherUser && !!extdInfo &&
                          extdInfo.isEditable
            };

        if (messages.showFacebookLink) {
          this.facebookLinkInfo = new ExtendedInfo(_.extend({
            label: Lang.facebookLink,
            content: this.util.getValidLink(extdInfo.facebookLink),
            formField: "facebookLink",
            defaultMessage: Lang.defaultfacebookMessage,
            linkClass: "esoc-user-facebook-link"
          }, defaultAttrs));
          this.facebookLinkView = new ExtendedInfoLinkFieldView({
            model: this.facebookLinkInfo,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.facebookLinkView);
        }

        if (messages.showLinkedinLink) {
          this.linkedLinkInfo = new ExtendedInfo(_.extend({
            label: Lang.linkedinLink,
            content: this.util.getValidLink(extdInfo.linkedinLink),
            formField: "linkedinLink",
            defaultMessage: Lang.defaultLinkedInMessage,
            linkClass: "esoc-user-linkedin-link"
          }, defaultAttrs));
          this.linkedInLinkView = new ExtendedInfoLinkFieldView({
            model: this.linkedLinkInfo,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.linkedInLinkView);
        }

        if (messages.showTwitterLink) {
          this.twitterLinkInfo = new ExtendedInfo(_.extend({
            label: Lang.twitterLink,
            content: this.util.getValidLink(extdInfo.twitterLink),
            formField: "twitterLink",
            defaultMessage: Lang.defaulttwitterLinkMessage,
            linkClass: "esoc-user-twitter-link"
          }, defaultAttrs));
          this.twitterLinkView = new ExtendedInfoLinkFieldView({
            model: this.twitterLinkInfo,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.twitterLinkView);
        }

        if (messages.showReportsTo) {
          this.reportsInfo = new ExtendedInfo(_.extend({
            label: Lang.manager,
            content: extdInfo.reportsToID,
            reportsTo: !!extdInfo.reportsTo && extdInfo.reportsTo.trim() ? extdInfo.reportsTo : "",
            formField: "reportsTo",
            defaultMessage: Lang.defaultManagerMessage,
            userInputField: true,
            extendedLabelClass: 'esoc-user-extended-label'
          }, defaultAttrs));
          this.reportsView = new ExtendedInfoTextFieldView({
            model: this.reportsInfo,
            context: this.options.context,
            parentView: self,
            tabIndex: this.options.tabIndex
          });
          childViews.push(this.reportsView);
        }

        if (messages.showLangSpoken) {
          this.langSpokenInfo = new ExtendedInfo(_.extend({
            label: Lang.languagesSpoken,
            content: !!extdInfo.languagesSpoken && extdInfo.languagesSpoken.trim() ?
                     extdInfo.languagesSpoken : "",
            formField: "languagesSpoken",
            defaultMessage: Lang.defaultLanguagesMessage,
            extendedLabelClass: 'esoc-user-extended-label'
          }, defaultAttrs));
          this.langSpokenView = new ExtendedInfoTextFieldView({
            model: this.langSpokenInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.langSpokenView);
        }
        if (messages.statusPost) {
          this.statusPostInfo = new ExtendedInfo(_.extend({
            label: Lang.statusPost,
            content: !!extdInfo.status && extdInfo.status.trim() ? extdInfo.status : "",
            formField: "status",
            defaultMessage: Lang.defaultStatusPost
          }, defaultAttrs));
          this.statusPostView = new ExtendedInfoTextFieldView({
            model: this.statusPostInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.statusPostView);
        }

        if (messages.showAboutMe) {
          this.aboutMeInfo = new ExtendedInfo(_.extend({
            label: Lang.aboutMe,
            content: !!extdInfo.bio && extdInfo.bio.trim() ? extdInfo.bio : "",
            formField: "bio",
            defaultMessage: Lang.defaultAboutMeMessage
          }, defaultAttrs));
          this.aboutMeView = new ExtendedInfoTextFieldView({
            model: this.aboutMeInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.aboutMeView);
        }

        if (messages.showJobDesc) {
          this.jobDescriptionInfo = new ExtendedInfo(_.extend({
            label: Lang.jobDescription,
            content: !!extdInfo.jobDescription && extdInfo.jobDescription.trim() ?
                     extdInfo.jobDescription : "",
            formField: "jobDescription",
            defaultMessage: Lang.defaultJobDesc
          }, defaultAttrs));
          this.jobDescriptionView = new ExtendedInfoTextFieldView({
            model: this.jobDescriptionInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.jobDescriptionView);
        }

        if (messages.showExpertise) {
          this.expertiseInfo = new ExtendedInfo(_.extend({
            label: Lang.expertiseAreas,
            content: !!extdInfo.expertise && extdInfo.expertise.trim() ? extdInfo.expertise : "",
            formField: "expertise",
            defaultMessage: Lang.defaultExpertise
          }, defaultAttrs));
          this.expertiseView = new ExtendedInfoTextFieldView({
            model: this.expertiseInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.expertiseView);
        }

        if (messages.showPastPositions) {
          this.pastPositionsInfo = new ExtendedInfo(_.extend({
            label: Lang.pastPositions,
            content: !!extdInfo.pastPositions && extdInfo.pastPositions.trim() ?
                     extdInfo.pastPositions : "",
            formField: "pastPositions",
            defaultMessage: Lang.defaultPastPositions
          }, defaultAttrs));
          this.pastPositionsView = new ExtendedInfoTextFieldView({
            model: this.pastPositionsInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.pastPositionsView);
        }

        if (messages.showDegrees) {
          this.degreeInfo = new ExtendedInfo(_.extend({
            label: Lang.degrees,
            content: !!extdInfo.degree && extdInfo.degree.trim() ? extdInfo.degree : "",
            formField: "degree",
            defaultMessage: Lang.defaultDegreeMessage
          }, defaultAttrs));
          this.degreeView = new ExtendedInfoTextFieldView({
            model: this.degreeInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.degreeView);
        }

        if (messages.showAwards) {
          this.awardsInfo = new ExtendedInfo(_.extend({
            label: Lang.awards,
            content: !!extdInfo.awardsHonours && extdInfo.awardsHonours.trim() ?
                     extdInfo.awardsHonours : "",
            formField: "awardsHonours",
            defaultMessage: Lang.defaultAwardMessage
          }, defaultAttrs));
          this.awardsView = new ExtendedInfoTextFieldView({
            model: this.awardsInfo,
            parentView: self,
            tabIndex: this.options.tabIndex,
            connector: this.options.connector
          });
          childViews.push(this.awardsView);
        }
        this.childViews = childViews;
      }
    },
    constructor: function GeneralView(options) {
      options = options || {};
      var generalOptions = _.extend({}, options);
      generalOptions.model = new UserExtendedInfoModel(generalOptions);
      generalOptions.model.fetch({
        success: generalOptions.model.fetchSuccess,
        error: generalOptions.model.fetchError,
        async: false
      })
      Marionette.ItemView.prototype.constructor.call(this, generalOptions);
    },
    errorHandle: function (model, response) {
    },
    onShow: function (e) {

      if (this.model.attributes.chatSettings && this.model.attributes.chatSettings.chatEnabled &&
          this.model.attributes.chatSettings.presenceEnabled) {
        var presenceOptions = {
          id: this.model.attributes.id,
          context: this.options.context,
          username: this.model.attributes.name,
          subscribeEvent: true
        };
        var presenceRegion = new Marionette.Region({
          el: $("#esoc-user-profile-presence-indicator")
        });

        var presenceView = new PresenceView(presenceOptions);
        presenceRegion.show(presenceView);
      }
      var messages = this.templateHelpers().messages;
      var that = this;
      if (!this.options.model.attributes.isError) {
        var count=0;
        _.each(this.childViews, function (view) {
          that.listenToOnce(view, 'view:shown', function () {
            count++;
            if (count === that.childViews.length) {
              that.trigger("view:shown");
            }
          });
          that.listenTo(view, 'change:content', function (eventName) {
            that.trigger("view:shown", "contentChanged");
            if (eventName === "userInputChanged") {
              view.$el.find("a.esoc-user-container").trigger('focus');
            }
          });
        });
        if (messages.showFacebookLink) {
          var facebookLink = new Marionette.Region({el: ".esoc-user-facebook-link"});
          facebookLink.show(this.facebookLinkView);
        }
        if (messages.showLinkedinLink) {
          var linkedInLink = new Marionette.Region({el: ".esoc-user-linked-link"});
          linkedInLink.show(this.linkedInLinkView);
        }
        if (messages.showTwitterLink) {
          var twitterLink = new Marionette.Region({el: ".esoc-user-twitter-link"});
          twitterLink.show(this.twitterLinkView);
        }
        if (messages.showReportsTo) {
          var reports = new Marionette.Region({el: ".esoc-user-reports-to"});
          reports.show(this.reportsView);
        }
        if (messages.showLangSpoken) {
          var languagesSpoken = new Marionette.Region({el: ".esoc-user-languages-spoken"});
          languagesSpoken.show(this.langSpokenView);
        }
        if (messages.statusPost) {
          var statusPost = new Marionette.Region({el: ".esoc-user-status-post"});
          statusPost.show(this.statusPostView);
        }
        if (messages.showAboutMe) {
          var aboutMe = new Marionette.Region({el: ".esoc-user-about-me"});
          aboutMe.show(this.aboutMeView);
        }
        if (messages.showJobDesc) {
          var jobDescription = new Marionette.Region({el: ".esoc-user-job-description"});
          jobDescription.show(this.jobDescriptionView);
        }
        if (messages.showExpertise) {
          var expertise = new Marionette.Region({el: ".esoc-user-expertise"});
          expertise.show(this.expertiseView);
        }
        if (messages.showPastPositions) {
          var pastPositions = new Marionette.Region({el: ".esoc-user-past-positions"})
          pastPositions.show(this.pastPositionsView);
        }
        if (messages.showDegrees) {
          var degree = new Marionette.Region({el: ".esoc-user-degree"});
          degree.show(this.degreeView);
        }
        if (messages.showAwards) {
          var awards = new Marionette.Region({el: ".esoc-user-awards"});
          awards.show(this.awardsView);
        }
      }
      this.$el.find(".esoc-user-links.esoc-user-email").each(function (i) {
        if ($(this).innerWidth() < $(this)[0].scrollWidth) {
          that.$el.find(".esoc-user-email a").addClass("esoc-user-links-ellipsis-onfocus");
        }
      });
    }
  });
  return GeneralView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/personal',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var helper;

  return "<div class=\"binf-col-lg-12\">\r\n    <span class=\"binf-col-lg-1 binf-col-md-1 binf-col-sm-1 binf-col-xs-1\">Location  : </span>\r\n    <span class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2\">"
    + this.escapeExpression(((helper = (helper = helpers.office_location || (depth0 != null ? depth0.office_location : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"office_location","hash":{}}) : helper)))
    + " </span>\r\n</div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_personal', t);
return t;
});
/* END_TEMPLATE */
;
/**
 *  This is to get user's personal information
 */
csui.define('esoc/widgets/userwidget/view/personal.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'hbs!esoc/widgets/userwidget/impl/personal',
  'i18n!esoc/widgets/userwidget/nls/lang'
], function ($, _, Handlebars, Marionette, PersonalTemplate, Lang) {
  var self = null;
  var PersonalView = Marionette.ItemView.extend({
    tagName: "div",
    className: 'esoc-personal-tab',
    template: PersonalTemplate,
    initialize: function (options) {
      this.options = options;
      self = this;
    },
    constructor: function PersonalView(options) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);

    },
    errorHandle: function (model, response) {
    }

  });
  return PersonalView;
});

csui.define('esoc/widgets/userwidget/view/miniprofilecard.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/url',
  'csui/utils/user.avatar.color',
  'esoc/widgets/userwidget/view/miniprofile.view',
  'esoc/widgets/utils/chat/chat.view',
  'esoc/widgets/userwidget/util',
  'esoc/widgets/userwidget/chat/chatutil',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function ($, _, Handlebars, Marionette, Url, UserAvatarColor, MiniProfileView, ChatView, Util, ChatUtil,
    lang) {
  var MiniProfileCardView = MiniProfileView.extend({
    util: Util,
    className: 'esoc-miniprofilecard-container binf-col-lg-5 binf-col-md-5 binf-col-sm-5 binf-col-xs-5',
    initialize: function (options) {
      this.options = options;
      this.followUnfollowActionUrl = Url.combine(
          this.util.commonUtil.getV2Url(this.model.collection.connector.connection.url),
          this.util.commonUtil.REST_URLS.pulseRestUrl,
          this.model.attributes.id);
    },
    constructor: function MiniProfileCardView(options) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
      this.model.on('presence:update', this.onPresenceUpdate, this);
    },
    events: {
      'click .esoc-viewminiprofile-action, .esoc-mini-profile-avatar, .esoc-mini-profile-user-name': 'showUserProfileDialog',
      'click .esoc-mini-profile-following-action': 'followUnfollowAction',
      'mouseenter .esoc-miniprofile-view': 'showActions',
      'mouseleave .esoc-miniprofile-view': 'hideActions'
    },
    showActions: function () {
      this.$el.find(".esoc-mini-profile-userinfo").addClass(
          "esoc-mini-profile-userinfo-with-actions");
      this.$el.find(".esoc-mini-profile-actions").show();
    },
    hideActions: function () {
      this.$el.find(".esoc-mini-profile-actions").hide();
      this.$el.find(".esoc-mini-profile-userinfo").removeClass(
          "esoc-mini-profile-userinfo-with-actions");
      if (this.$el.find(".esoc-mini-profile-actions").hasClass("esoc-miniprofile-has-tabindex")) {
        if (this.options.model.attributes.business_email) {
          this.$el.find(".esoc-mini-profile-userinfo").find(
              ".esoc-mini-profile-user-email").trigger('focus');
        } else {
          this.$el.find(".esoc-mini-profile-userinfo").find(".esoc-mini-profile-user-name").trigger('focus');
        }
        this.$el.find(".esoc-mini-profile-actions").removeClass('esoc-miniprofile-has-tabindex');
      }
    },
    onRender: function (e) {
      var that = this;
      that.options.userbackgroundcolor = UserAvatarColor.getUserAvatarColor(that.model.attributes);
      if (that.model.attributes.chatSettings && that.model.attributes.chatSettings.chatEnabled &&
          that.model.attributes.chatSettings.presenceEnabled) {
        that.$el.find("#esoc-mini-profile-presence-indicator").addClass(
            "esoc-user-profile-default-presence").attr("title", lang.presenceUnknownTooltipText);
      }
      if (that.model.attributes.otherUser && !!that.model.attributes.chatSettings &&
          !!that.model.attributes.chatSettings.chatEnabled) {
        that.$el.find(".esoc-chat-action-enabled-" + that.model.attributes.id).removeClass('binf-hidden');
        var contentRegion = new Marionette.Region({
              el: that.$el.find(".esoc-miniprofile-chat-action")
            }),
            chatOptions   = {
              context: that.options.parentViewOptions.context,
              tguser: that.model.get('screen_name') || that.model.get('name'),
              domain: that.options.model.get('chatSettings') &&
                      that.options.model.get('chatSettings').chatDomain
            },
            chatView      = new ChatView(chatOptions);
        contentRegion.show(chatView);
      } else {
        that.$el.find(".esoc-chat-action-disabled-" + that.model.attributes.id).removeClass('binf-hidden');
      }
      that.$el.find('.esoc-mini-profile-user').find('.esoc-mini-profile-pic').on('keyup',
          function (e) {
            if ((e.keyCode || e.which) === 9 &&
                $(".esoc-mini-profile-actions").hasClass("esoc-miniprofile-has-tabindex")) {
              $(".esoc-mini-profile-actions").removeClass('esoc-miniprofile-has-tabindex');
            }
          });
      that.$el.find(".esoc-mini-profile-actions").find(
          '.esoc-mini-profile-following-action, .esoc-viewminiprofile-action').on('keyup',
          function (e) {
            if ((e.keyCode || e.which) === 9) {
              that.$el.find(".esoc-mini-profile-actions").addClass('esoc-miniprofile-has-tabindex');
            }
          });
    },
    onShow: function () {
      this.setProfilePic();
    },
    setProfilePic: function () {
      var userId                = this.options.model.attributes.id,
          userProfilePicOptions = {
            context: this.options.parentViewOptions.context,
            userid: userId,
            photoElement: this.$el.find(".esoc-userprofile-img-" + Util.escapeSelector(userId)),
            defaultPhotElement: this.$el.find(".esoc-user-default-avatar-" + Util.escapeSelector(userId)),
            userbackgroundcolor: this.options.userbackgroundcolor
          };
      this.util.commonUtil.setProfilePic(userProfilePicOptions);
      this.util.commonUtil.setUserColor(userProfilePicOptions);  
    },
    showUserProfileDialog: function (e) {
      this.trigger("show.user.dialog");
    },
    followUnfollowAction: function (e) {
      var formData = new FormData(),
          _evnt    = e || window.event;
      var followUnfollowAction = !this.model.attributes.following ?
                                 Util.commonUtil.globalConstants.FOLLOW :
                                 Util.commonUtil.globalConstants.UNFOLLOW;
      formData.append(Util.commonUtil.globalConstants.ACTION, followUnfollowAction);
      var args = {
        "itemview": this,
        "url": this.followUnfollowActionUrl,
        "type": "POST",
        "data": formData,
        "requestType": "relation",
        "targetElement": $(_evnt.target)
      };
      this.util.updateAjaxCall(args);
    },
    onPresenceUpdate: function (presence) {
      ChatUtil.setIconColor(presence,
          this.$el.find("#esoc-mini-profile-presence-indicator"));
    }
  });
  return MiniProfileCardView;
});


/**
 *  This is to get user's general information
 */
csui.define('esoc/widgets/userwidget/view/miniprofilecollection.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/contexts/factories/connector',
  'esoc/widgets/userwidget/view/miniprofilecard.view',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'esoc/widgets/userwidget/util',
  'csui/controls/tile/behaviors/perfect.scrolling.behavior'
], function ($, _, Handlebars, Marionette, ConnectorFactory, MiniProfileCardView, Lang, Util,
    PerfectScrollingBehavior) {
  var self = null;
  var MiniProfileCollectionView = Marionette.CollectionView.extend({
    tagName: "div",
    className: 'binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-miniprofile-collection',
    childView: MiniProfileCardView,
    childViewOptions: function () {
      return {
        context: this.options.context,
        parentViewOptions: this.options
      };
    },
    initialize: function (options) {
      this.options = options;
      if (!this.options.connector) {
        this.options.connector = this.options.context.getObject(ConnectorFactory);
      }
      self = this;
      this.listenTo(this, "childview:show.user.dialog", function (e) {
        self.trigger('collectionview.show.user.dialog', e);
      });
      this.listenTo(Util.commonUtil.globalConstants.event_bus, "changefollowingstatus",
          function (miniprofileview, followUnfollowResponse) {
            // do not refresh the tab if commenting widget is opened
            if (($("#esoc-user-profile-following-tab").hasClass('binf-active') &&
                 !$("#esoc-social-comment-create-container").is(':visible')) ||
                ($("#esoc-user-profile-activity-tab").hasClass('binf-active') &&
                 !$("#esoc-social-comment-create-container").is(':visible')) ||
                ($("#esoc-user-profile-followers-tab").hasClass('binf-active') &&
                 !$("#esoc-social-comment-create-container").is(':visible'))) {

              var miniprofilemodel = this.options.collection.get(
                  miniprofileview.model.attributes.id);
              var followingStatus;
              if (!!miniprofilemodel) {
                var miniProfileModelAttrs = miniprofilemodel.attributes;
                if (miniProfileModelAttrs.relation === Util.commonUtil.globalConstants.FRIENDS) {
                  if (miniProfileModelAttrs.otherUserProfile) {
                    followingStatus = miniprofileview.model.attributes.following;
                    miniProfileModelAttrs.following = followingStatus;
                    if (followingStatus) {
                      miniProfileModelAttrs.actions.following = Lang.unfollow;
                      miniProfileModelAttrs.actions.followingClass = "esoc-mini-profile-unfollow-icon"
                    } else {
                      miniProfileModelAttrs.actions.following = Lang.follow;
                      miniProfileModelAttrs.actions.followingClass = "esoc-mini-profile-follow-icon"
                    }
                    this.render();
                  } else {
                    this.options.collection.remove(miniprofileview.model.attributes.id);
                    this.options.collection.trigger("remove.relation", miniprofileview,
                        followUnfollowResponse);
                  }
                } else if (miniProfileModelAttrs.relation ===
                           Util.commonUtil.globalConstants.FOLLOWERS) {
                  followingStatus = miniprofileview.model.attributes.following;
                  miniProfileModelAttrs.following = followingStatus;
                  miniProfileModelAttrs.following = followingStatus;
                  if (followingStatus) {
                    miniProfileModelAttrs.actions.following = Lang.unfollow;
                    miniProfileModelAttrs.actions.followingClass = "esoc-mini-profile-unfollow-icon"
                  } else {
                    miniProfileModelAttrs.actions.following = Lang.follow;
                    miniProfileModelAttrs.actions.followingClass = "esoc-mini-profile-follow-icon"
                  }
                  this.render();
                  if (!miniProfileModelAttrs.otherUserProfile) {
                    Util.changeRelationsCounts(followUnfollowResponse.data.user);
                  }
                }
              }
              else {
                //update the cards in the following tab
                if (this.options.relation === Util.commonUtil.globalConstants.FRIENDS) {
                  if (!this.options.otherUserProfile) { //self user
                    var ajaxParams = {
                      "itemview": self,
                      "url": self.options.connector.connection.url +
                             Util.commonUtil.REST_URLS.chatHistoryUrl +
                             miniprofileview.model.attributes.id,
                      "type": "GET",
                      "relation": this.options.relation,
                      "otherUserProfile": this.options.otherUserProfile,
                      "requestType": "membersAPI",
                      "context": this.options.context
                    };
                    Util.updateAjaxCall(ajaxParams);
                  }
                }
              }
            }
          });

      this.listenTo(Util.commonUtil.globalConstants.event_bus, "updatefollowerstab",
          function (userprofileview, followUnfollowResponse) {
            // do not refresh the tab if commenting widget is opened
            if (($("#esoc-user-profile-following-tab").hasClass('binf-active') &&
                 !$("#esoc-social-comment-create-container").is(':visible')) ||
                ($("#esoc-user-profile-activity-tab").hasClass('binf-active') &&
                 !$("#esoc-social-comment-create-container").is(':visible')) ||
                ($("#esoc-user-profile-followers-tab").hasClass('binf-active') &&
                 !$("#esoc-social-comment-create-container").is(':visible'))) {
              if (this.options.relation === Util.commonUtil.globalConstants.FOLLOWERS) {
                if (this.options.collection.get(this.options.loggedUserId)) {
                  this.options.collection.remove(this.options.loggedUserId);
                  this.options.collection.trigger("remove.relation", userprofileview,
                      followUnfollowResponse);
                } else {
                  // get loggeduserinfo from members api and add to collection
                  var ajaxParams = {
                    "itemview": self,
                    "url": self.options.connector.connection.url +
                           Util.commonUtil.REST_URLS.chatHistoryUrl +
                           this.options.loggedUserId,
                    "type": "GET",
                    "requestType": "membersAPI",
                    "context": this.options.context
                  };
                  Util.updateAjaxCall(ajaxParams);
                }
              }
            }
          });
    },
    onRender: function (e) {
      var scrollTop;
      this.$el.on("scroll", function (e, that) {
        var followingContainer = $(this);
        var containerHeight = followingContainer.height();
        var containerScrollHeight = followingContainer[0].scrollHeight;
        var containerScrollTop = followingContainer.scrollTop();
        if ((containerScrollTop + 17) >= (containerScrollHeight - containerHeight)) {
          // ESOC-4021 Unable to view more than 20 users in following and followers list while list contains a lot of users
          // To prevent immediate click events checking atleast 50px gap between the scroll
          // positions of the last fetched page and next loading page
          if (!scrollTop || (scrollTop && (containerScrollTop - parseInt(scrollTop, 10)) > 50)) {
            scrollTop = containerScrollTop;
            $(this).find(".esoc-social-users-load-more:last").trigger("click");
          }
        }
      });
    },
    behaviors: {
      PerfectScrolling: {
        behaviorClass: PerfectScrollingBehavior,
        suppressScrollX: true,
        scrollYMarginOffset: 15 // like bottom padding of container, otherwise scrollbar is shown always
      }
    },
    constructor: function MiniProfileCollectionView() {
      Marionette.CollectionView.prototype.constructor.apply(this, arguments);
    },
    errorHandle: function (model, response) {
    },
    events: {
      "click .esoc-social-users-load-more": "loadMoreItems"
    },
    loadMoreItems: function (e) {
      if (this.collection.defaults.params.cursor > 0) {
        this.collection.fetch({
          remove: false,
          params: {cursor: this.collection.defaults.params.cursor},
          success: this.collection.fetchSuccess
        });
      }
    }

  });
  return MiniProfileCollectionView;
});

csui.define('esoc/widgets/activityfeedwidget/activityfeeditem.model',[
  "csui/lib/jquery",
  "csui/lib/backbone"
], function ($, Backbone, config) {
  var ActivityFeedItemModel = Backbone.Model.extend({
    defaults: {
      id: 0,
      data_id: 0,
      created_at: "-",
      text: "-",
      feed_event_type: 0,
      user: {
        name: "-",
        screen_name: "-",
        profile_image_url: "-"
      },
      noMoreData: true
    },
    constructor: function ActivityFeedItemModel() {
      Backbone.Model.prototype.constructor.apply(this, arguments);
    }
  });
  return ActivityFeedItemModel;
});

csui.define('esoc/widgets/activityfeedwidget/activityfeed.model',[
  'csui/lib/underscore',
  'csui/lib/jquery',
  'csui/lib/backbone',
  'csui/utils/base',
  'csui/utils/url',
  'csui/behaviors/default.action/impl/defaultaction',
  'csui/models/connectable',
  'csui/models/fetchable', 'csui/models/nodechildrencolumn',
  'csui/models/nodechildrencolumns', 'csui/models/node/node.model',
  'csui/models/clientsidecollection',
  'esoc/widgets/activityfeedwidget/activityfeeditem.model',
  'esoc/widgets/common/util'

], function (_, $, Backbone, Base, Url, DefaultActionController, ConnectableModel, FetchableModel,
    NodeChildrenColumnModel,
    NodeChildrenColumnCollection, NodeModel, ClientSideCollection, ActivityFeedItemModel,
    CommonUtil) {
  var ActivityFeedColumnModel = NodeChildrenColumnModel.extend({});
  var ActivityFeedColumnCollection = NodeChildrenColumnCollection.extend({
    model: ActivityFeedColumnModel,
    // private
    getColumnModels: function (columnKeys, definitions) {
      var columns = NodeChildrenColumnCollection.prototype.getColumnModels.call(
          this, columnKeys, definitions);
      _.each(columns, function (column) {
        var columnKey = column['column_key'];
        if (columnKey === 'type' || columnKey === 'name' || columnKey === 'modify_date') {
          column.sort = true;
        }
      });
      return columns;
    }

  });
  var ActivityFeedModel = NodeModel.extend({
    parse: function (response, options) {
      response.name = response.text;
      return NodeModel.prototype.parse.call(this, response, options);
    }
  });
  var ActivityFeedCollection = Backbone.Collection.extend(_.extend({},
      ConnectableModel(Backbone.Collection),
      FetchableModel(Backbone.Collection), ClientSideCollection(), {
        defaults: {
          params: {
            data_id: "",
            text: "",
            since_id: "",
            max_id: ""
          }
        },
        model: ActivityFeedModel,
        base: Base,
        feedRESTUrl: "",
        constRESTUrl: "",
        maxMessageLength: "",
        feedtype: "",
        widgetOptions: {},
        context: "",
        commonUtil: CommonUtil,
        config_settings: {},
        url: function () {
          this.constructURL(this.options);
          return this.feedRESTUrl;
        },
        constructURL: function (options) {
          if (options) {
            this.options = options || {};
            this.constRESTUrl = options.connector ? options.connector.connection.url :
                                this.connector.connection.url;
            this.constRESTUrl += "/pulse/statuses/public_timeline?commands=default&count=" +
                                 (options.feedsize ? options.feedsize : 15)
                                 + "&includes=actions,reply_count&where_feedtype=" +
                                 (options.feedtype ? options.feedtype : "all");
            var queryString = "",
                honorfeedsource,
                objectnodeid;
            if (options.honorfeedsource !== undefined) {
              honorfeedsource = options.honorfeedsource;
            } else if (options.activityfeed && options.activityfeed.honorfeedsource !== undefined) {
              honorfeedsource = options.activityfeed.honorfeedsource;
            }
            if (options.objectnodeid !== undefined) {
              objectnodeid = options.objectnodeid;
            } else if (options.activityfeed && options.activityfeed.objectnodeid !== undefined) {
              objectnodeid = options.activityfeed.objectnodeid;
            }
            if (!!honorfeedsource && objectnodeid !== undefined) {
              queryString = "&where_feedsource=pulsefrom&where_feedsource_id=" + objectnodeid;
            } else if (options.feedsource !== undefined) {
              if (options.feedsource.source !== undefined && options.feedsource.source) {
                queryString = "&where_feedsource=" + options.feedsource.source
              }
              if (options.feedsource.id !== undefined && options.feedsource.id) {
                queryString = queryString + "&where_feedsource_id=" + options.feedsource.id
              }
            }
            if (options.updatesfrom !== undefined) {
              if (options.updatesfrom.from !== undefined && options.updatesfrom.from) {
                queryString = queryString + "&where_updatesfrom=" + options.updatesfrom.from
              }
              if (options.updatesfrom.id !== undefined && options.updatesfrom.id) {
                queryString = queryString + "&where_updatesfrom_id=" + options.updatesfrom.id
              }
            }
            var defaultActionController = new DefaultActionController(),
                commands                = {
                  commands: defaultActionController.actionItems.getAllCommandSignatures(
                      defaultActionController.commands)
                };
            this.constRESTUrl = Url.appendQuery(this.constRESTUrl,
                Url.combineQueryString(commands)) + queryString;
            this.feedRESTUrl = this.constRESTUrl;
            options.params = $.extend(this.defaults.params, options.params);
            if (options.params.queryParams) {
              var queryParams = options.params.queryParams !== undefined ?
                                ("&" + $.param(options.params.queryParams)) : "";
              this.feedRESTUrl = this.constRESTUrl + queryParams;
            }
            delete this.widgetOptions["remove"];
            delete options["remove"];
            this.widgetOptions = $.extend(this.widgetOptions, options);
          }
          return this.constRESTUrl;
        },
        constructor: function ActivityFeedCollection(models, options) {
          this.options = options || {};
          // Enable this model for communication with the CS REST API
          if (options && options.connector) {
            options.connector.assignTo(this);
          }
          //TODO: move URL formation in url method
          //options = options !== undefined ? options : {};
          if (options) {
            this.defaults.params = $.extend(this.defaults.params, options.params);
            this.constRESTUrl = options.connector.connection.url;
            this.constRESTUrl += "/pulse/statuses/public_timeline?commands=default&count=" +
                                 (options.feedsize ? options.feedsize : 15)
                                 + "&includes=actions,reply_count&where_feedtype=" +
                                 (options.feedtype ? options.feedtype : "all");
            var queryString = "",
                honorfeedsource,
                objectnodeid;
            if (options.honorfeedsource !== undefined) {
              honorfeedsource = options.honorfeedsource;
            } else if (options.activityfeed && options.activityfeed.honorfeedsource !== undefined) {
              honorfeedsource = options.activityfeed.honorfeedsource;
            }
            if (options.objectnodeid !== undefined) {
              objectnodeid = options.objectnodeid;
            } else if (options.activityfeed && options.activityfeed.objectnodeid !== undefined) {
              objectnodeid = options.activityfeed.objectnodeid;
            }
            if (!!honorfeedsource && objectnodeid !== undefined) {
              queryString = "&where_feedsource=pulsefrom&where_feedsource_id=" + objectnodeid;
            } else if (options.feedsource !== undefined) {
              if (options.feedsource.source !== undefined && options.feedsource.source) {
                queryString = "&where_feedsource=" + options.feedsource.source
              }
              if (options.feedsource.id !== undefined && options.feedsource.id) {
                queryString = queryString + "&where_feedsource_id=" + options.feedsource.id
              }
            }
            if (options.updatesfrom !== undefined) {
              if (options.updatesfrom.from !== undefined && options.updatesfrom.from) {
                queryString = queryString + "&where_updatesfrom=" + options.updatesfrom.from
              }
              if (options.updatesfrom.id !== undefined && options.updatesfrom.id) {
                queryString = queryString + "&where_updatesfrom_id=" + options.updatesfrom.id
              }
            }
            this.constRESTUrl = this.constRESTUrl + queryString;
            this.feedRESTUrl = this.constRESTUrl;
            this.enableComments = options.enableComments;
            this.enableFilters = options.enableFilters;
            this.maxMessageLength = options.maxMessageLength;
            this.feedtype = options.feedtype;
            this.context = options.context !== undefined ? options.context :
                           options.activityfeed.context;
            this.widgetOptions = $.extend(options, this.widgetOptions);
          }

          Backbone.Collection.prototype.constructor.apply(this, arguments);
        },
        fetch: function (options) {
          if (!!options && !($.isEmptyObject(options))) {
            _.extend(this.options, options);
          }
          //Backbone.Collection.prototype.fetch.apply( this, arguments );
          return this.Fetchable.fetch.apply(this, arguments);
        },
        parse: function (response) {
          var returnData = JSON.parse(JSON.stringify(response.data));
          this.config_settings = response.config_settings;
          return this.parseActivityFeedResponse(returnData);
        },
        fetchError: function (collection, response) {
          var args = {
            parent: "body",
            errorContent: response.responseJSON ?
                          ( response.responseJSON.errorDetail ? response.responseJSON.errorDetail :
                            response.responseJSON.error) :
                          collection.lang.defaultErrorMessageCommentsFetch
          }
          collection.commonUtil.openErrorDialog(args);
        },
        parseActivityFeedResponse: function (jsonResponse) {
          for (var response in jsonResponse) {
            var currentObj = jsonResponse[response];
            currentObj["commentText"] = $.trim(currentObj.text);
            currentObj["maxMessageLength"] = this.maxMessageLength;
            currentObj["feedtype"] = !!this.options.feedtype ? this.options.feedtype :
                                     this.feedtype;
            currentObj["widgetOptions"] = this.widgetOptions;
            currentObj["config_settings"] = this.config_settings;
            currentObj.created_at_iso8601 = this.base.formatFriendlyDateTimeNow(
                currentObj.created_at_iso8601);
            if (currentObj.modified_at_iso8601 !== "" &&
                currentObj.modified_at_iso8601 !== undefined) {
              currentObj.modified_at_iso8601 = this.base.formatFriendlyDateTimeNow(
                  currentObj.modified_at_iso8601);
            }
          }
          return jsonResponse;
        }
      }));
  return ActivityFeedCollection;
});

csui.define('esoc/widgets/activityfeedwidget/activityfeedfactory',['module',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/utils/contexts/factories/factory',
  'csui/utils/contexts/factories/connector',
  'csui/utils/namedsessionstorage',
  'esoc/widgets/activityfeedwidget/activityfeed.model',
  'csui/utils/contexts/factories/node'
], function (module, _, Backbone, CollectionFactory, ConnectorFactory, NamedSessionStorage,
    ActivityFeedCollection, NodeFactory) {

  var ActivityFeedFactory = CollectionFactory.extend({

    propertyPrefix: 'activityfeed',
    uniqueid: 'all',
    namedSessionStorage: new NamedSessionStorage("esoc-activity-filterinfo"),
    constructor: function ActivityFeedFactory(context, options) {
      CollectionFactory.prototype.constructor.apply(this, arguments);
      this.options.activityfeed = this.options[this.uniqueid] || {};
      var sessionFilterInfo,
          filterInfoKey = this.options.filterSource ? this.options.filterSource + "_" +
                                                      this.uniqueid : this.uniqueid;
      sessionFilterInfo = this.namedSessionStorage.get(filterInfoKey);
      this.options.activityfeed = this.options[this.uniqueid] || {}
      this.options.activityfeed.widgetId = this.uniqueid;
      if (!!sessionFilterInfo) {
        if (!!sessionFilterInfo.feedtype) {
          this.options.activityfeed.feedtype = sessionFilterInfo.feedtype;
        }
        if (!!sessionFilterInfo.updatesfrom) {
          this.options.activityfeed.updatesfrom = sessionFilterInfo.updatesfrom;
        }
      }
      var activityfeed = this.options.activityfeed || {};
      if (!(activityfeed instanceof Backbone.Collection)) {
        var connector = context.getObject(ConnectorFactory, options),
            container = context.getObject(NodeFactory),
            config    = module.config();
        this.options.connector = connector;
        this.options.feedsize = this.options.activityfeed.feedsize !== undefined ?
                                parseInt(this.options.activityfeed.feedsize, 10) : 15;
        this.options.feedtype = this.options.activityfeed.feedtype !== undefined ?
                                this.options.activityfeed.feedtype :
                                "all";
        if (this.options.activityfeed.feedSettings !== undefined &&
            this.options.activityfeed.feedSettings.enableComments !== undefined) {
          this.options.enableComments = this.options.activityfeed.feedSettings.enableComments;
        } else {
          this.options.enableComments = true;
        }

        if (this.options.activityfeed.feedSettings !== undefined &&
            this.options.activityfeed.feedSettings.enableFilters !== undefined) {
          this.options.enableFilters = this.options.activityfeed.feedSettings.enableFilters;
        } else {
          this.options.enableFilters = false;
        }
        var honorfeedsource = (this.options.activityfeed.honorfeedsource !== undefined &&
                               this.options.activityfeed.honorfeedsource);
        if (honorfeedsource) {
          this.options.honorfeedsource = honorfeedsource;
          if (container.get("id") !== undefined) {
            this.options.objectnodeid = container.get("id");
          }
        }
        if (this.options.activityfeed.feedsource !== undefined) {
          this.options.feedsource = this.options.activityfeed.feedsource;
        } else {
          this.options.feedsource = {"source": "all"};
        }
        if (this.options.activityfeed.updatesfrom !== undefined) {
          this.options.updatesfrom = this.options.activityfeed.updatesfrom;
        } else {
          this.options.updatesfrom = {"from": "all"};
        }

        if (this.options.activityfeed.wrapperClass !== undefined) {
          this.options.wrapperClass = this.options.activityfeed.wrapperClass;
        }
        var feedsAutoRefreshWait;
        if (this.options.activityfeed.config_settings !== undefined &&
            this.options.activityfeed.config_settings.feedsAutoRefreshWait !== undefined) {
          feedsAutoRefreshWait = this.options.activityfeed.config_settings.feedsAutoRefreshWait;
        }
        this.options.config_settings = {
          "feedsAutoRefreshWait": feedsAutoRefreshWait
        };
        this.options.maxMessageLength = (this.options.activityfeed.config_settings !== undefined &&
                                         this.options.activityfeed.config_settings.maxMessageLength !==
                                         undefined) ?
                                        parseInt(
                                            this.options.activityfeed.config_settings.maxMessageLength,
                                            10) : undefined;
        activityfeed = new ActivityFeedCollection(activityfeed.models, _.extend({ //self
          connector: connector,
          context: context
        }, this.options, config.options, {
          autoreset: true
        }));
      }
      this.property = activityfeed;
    },

    fetch: function (options) {
      return this.property.fetch(options);
    }
  });
  return ActivityFeedFactory;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/activityfeed',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-comment-list-divider\"></div>\r\n";
},"3":function(depth0,helpers,partials,data) {
    var stack1;

  return "            "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.actionType : stack1), depth0))
    + "\r\n";
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "            "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.textmsg : stack1), depth0))
    + "\r\n";
},"7":function(depth0,helpers,partials,data) {
    var helper;

  return "            <span class=\"esoc-social-comment-timestamp\">"
    + this.escapeExpression(((helper = (helper = helpers.created_at_iso8601 || (depth0 != null ? depth0.created_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"created_at_iso8601","hash":{}}) : helper)))
    + "</span>\r\n";
},"9":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <span class=\"esoc-social-comment-timestamp\">\r\n              <span class=\"esoc-social-comment-timestamp-ago\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.modifiedAt : stack1), depth0))
    + "\">\r\n              </span>\r\n              "
    + this.escapeExpression(((helper = (helper = helpers.modified_at_iso8601 || (depth0 != null ? depth0.modified_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"modified_at_iso8601","hash":{}}) : helper)))
    + "\r\n            </span>\r\n";
},"11":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "          <div class=\"esoc-social-comment-list-actions\">\r\n            <div class=\"esoc-social-comment-container esoc-socialactions-getcomments\">\r\n              <a class=\"esoc-social-comment-container\" href=\"javascript:void(0);\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + "\"\r\n                 data-value="
    + this.escapeExpression(((helper = (helper = helpers.data_id || (depth0 != null ? depth0.data_id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"data_id","hash":{}}) : helper)))
    + ">\r\n                <span class=\"esoc-activity-feed-comment\">\r\n                  <span class=\"esoc-cs-icon-feed-comment\"\r\n                        data-value="
    + this.escapeExpression(((helper = (helper = helpers.data_id || (depth0 != null ? depth0.data_id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"data_id","hash":{}}) : helper)))
    + " title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + "\"></span>\r\n                </span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n";
},"13":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <div class=\"esoc-comment-msg\">\r\n        <span>\r\n          <span class=\"esoc-activity-object-info "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n            <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"\r\n               aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n            <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-object-name\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n          </span>\r\n        </span>\r\n      </div>\r\n";
},"15":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 2",{"name":"xif","hash":{},"fn":this.program(16, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"16":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <div class=\"esoc-comment-msg\">\r\n        <span class=\"esoc-status-feed-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.statusfeed : stack1), depth0))
    + "\"></span>\r\n        <span class=\"esoc-social-comment-details esoc-reply-user-widget\"></span>\r\n        <span class=\"esoc-activityfeed-status-action\"> "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.status : stack1), depth0))
    + "</span>\r\n        </span>\r\n      </div>\r\n    ";
},"18":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-social-comment-data\">\r\n          <span class=\"esoc-activity-object-info "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(19, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.subtype != this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(21, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "            <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-object-name\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n            </span>\r\n        </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.sgm_description != ''",{"name":"xif","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n";
},"19":function(depth0,helpers,partials,data) {
    var stack1;

  return "              <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon csui-icon-group\"\r\n                 title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">\r\n                <span class=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" />\r\n                <span class=\"csui-icon csui-icon-shortcut-overlay\"></span>\r\n              </a>\r\n";
},"21":function(depth0,helpers,partials,data) {
    var stack1;

  return "              <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon  "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"\r\n                 aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n";
},"23":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <div class=\"esoc-extended-view-mode\">\r\n            <div class=\"esoc-social-comment-data\">\r\n              <div class=\"esoc-description\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.sgm_description : stack1), depth0))
    + "</div>\r\n            </div>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-down\"></span></a>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-up\"></span></a>\r\n          </div>\r\n";
},"25":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(26, data, 0),"inverse":this.program(28, data, 0)})) != null ? stack1 : "");
},"26":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-social-comment-data\">\r\n          <span class=\"esoc-activity-object-info "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n            <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon\r\n            "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"\r\n               aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n            <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\"\r\n               class=\"esoc-object-name  esoc-object-name-with-version\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n            <span class=\"esoc-social-version\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.version : stack1), depth0))
    + "</span>\r\n            <span class=\"esoc-version-number\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.version_name : stack1), depth0))
    + "</span>\r\n          </span>\r\n        </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.sgm_description != ''",{"name":"xif","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n";
},"28":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 9",{"name":"xif","hash":{},"fn":this.program(29, data, 0),"inverse":this.program(31, data, 0)})) != null ? stack1 : "");
},"29":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-extended-view-mode\">\r\n          <div class=\"esoc-social-comment-data\"></div>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-down\"></span></a>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-up\"></span></a>\r\n        </div>\r\n";
},"31":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-extended-view-mode\">\r\n          <div class=\"esoc-social-comment-data\">"
    + ((stack1 = ((helper = (helper = helpers.commentText || (depth0 != null ? depth0.commentText : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"commentText","hash":{}}) : helper))) != null ? stack1 : "")
    + "</div>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-down\"></span></a>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-up\"></span></a>\r\n        </div>\r\n      ";
},"33":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <div class=\"esoc-social-attachment "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentInactiveClass : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(34, data, 0),"inverse":this.program(36, data, 0)})) != null ? stack1 : "")
    + "        <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-name\"\r\n           title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "</a>\r\n      </div>\r\n";
},"34":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <span class=\"csui-icon-group esoc-social-attachment-icon\"\r\n                title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">\r\n            <span class=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentMimeTypeClass : stack1), depth0))
    + "\" />\r\n            <span class=\"csui-icon csui-icon-shortcut-overlay\"></span>\r\n          </span>\r\n";
},"36":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages\r\n        .documentAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(37, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"37":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentMimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\"></a>\r\n        ";
},"39":function(depth0,helpers,partials,data) {
    var helper;

  return "  <div id=\""
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\" class=\"esoc-social-activity-load-more\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.isFirstItem : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "<a href=\"javascript:void(0);\" class=\"esoc-activity-focus-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userProfileLink : stack1), depth0))
    + "\"></a>\r\n<div class=\"esoc-profileimg-block\">\r\n    <span class=\"esoc-userprofile-img\">\r\n        <img class=\"esoc-userprofile-img-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.user : depth0)) != null ? stack1.id : stack1), depth0))
    + " binf-img-circle\" src=\"\" />\r\n    </span>\r\n</div>\r\n<div class=\"esoc-commentinfo-block-wrapper binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div class=\"esoc-commentinfo-block binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div class=\"esoc-social-comment-details\">\r\n      <div class=\"esoc-comment-user-details binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n        <span class=\"esoc-user-widget\"></span>\r\n        <span class=\"esoc-activityfeed-actiontype\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 4 || this.feed_event_type == 2",{"name":"xif","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7 || this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.modified_at_iso8601 == ''",{"name":"xif","hash":{},"fn":this.program(7, data, 0),"inverse":this.program(9, data, 0)})) != null ? stack1 : "")
    + "        </span>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.enableComments : stack1),{"name":"if","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      </div>\r\n    </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 4",{"name":"xif","hash":{},"fn":this.program(13, data, 0),"inverse":this.program(15, data, 0)})) != null ? stack1 : "")
    + "  </div>\r\n\r\n  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div id=\"esoc-social-comment-input-holder-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7",{"name":"xif","hash":{},"fn":this.program(18, data, 0),"inverse":this.program(25, data, 0)})) != null ? stack1 : "")
    + "    </div>\r\n\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_id != '' && (this.extended_info.attachment_subtype ==\r\n    this.messages.shortcutAttachmentSubtype || this.extended_info.attachment_subtype == this\r\n    .messages.documentAttachmentSubtype)",{"name":"xif","hash":{},"fn":this.program(33, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  </div>\r\n</div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.noMoreData == false",{"name":"xif","hash":{},"fn":this.program(39, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "<span class=\"esoc-social-comment-delete\"></span>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_activityfeed', t);
return t;
});
/* END_TEMPLATE */
;

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/activityfeedstandard',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-comment-list-divider\"></div>\r\n";
},"3":function(depth0,helpers,partials,data) {
    var stack1;

  return "            "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.actionType : stack1), depth0))
    + "\r\n";
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "            "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.textmsg : stack1), depth0))
    + "\r\n";
},"7":function(depth0,helpers,partials,data) {
    var helper;

  return "            <span class=\"esoc-social-comment-timestamp\">"
    + this.escapeExpression(((helper = (helper = helpers.created_at_iso8601 || (depth0 != null ? depth0.created_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"created_at_iso8601","hash":{}}) : helper)))
    + "</span>\r\n";
},"9":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <span class=\"esoc-social-comment-timestamp\">\r\n              <span class=\"esoc-social-comment-timestamp-ago\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.modifiedAt : stack1), depth0))
    + "\">\r\n            </span>\r\n              "
    + this.escapeExpression(((helper = (helper = helpers.modified_at_iso8601 || (depth0 != null ? depth0.modified_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"modified_at_iso8601","hash":{}}) : helper)))
    + "\r\n            </span>\r\n";
},"11":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-social-comment-list-actions\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.enableComments : stack1),{"name":"if","hash":{},"fn":this.program(12, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n";
},"12":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <div class=\"esoc-social-comment-container esoc-socialactions-getcomments\">\r\n              <a class=\"esoc-social-comment-container\" href=\"javascript:void(0);\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + "\">\r\n                   <span class=\"esoc-activity-feed-comment\">\r\n                     <span class=\"esoc-cs-icon-feed-comment\"\r\n                           data-value="
    + this.escapeExpression(((helper = (helper = helpers.data_id || (depth0 != null ? depth0.data_id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"data_id","hash":{}}) : helper)))
    + " title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + "\"></span>\r\n                   </span>\r\n              </a>\r\n            </div>\r\n";
},"14":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div class=\"esoc-comment-msg\">\r\n        <span>\r\n         <span class=\"esoc-activity-object-info "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n           <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n            <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-object-name\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n          </span>\r\n        </span>\r\n    </div>\r\n";
},"16":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 2",{"name":"xif","hash":{},"fn":this.program(17, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"17":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <div class=\"esoc-comment-msg\">\r\n        <span class=\"esoc-status-feed-icon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.statusfeed : stack1), depth0))
    + "\"></span>\r\n        <span class=\"esoc-social-comment-details esoc-reply-user-widget\"></span>\r\n        <span class=\"esoc-activityfeed-status-action\"> "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.status : stack1), depth0))
    + "</span>\r\n        </span>\r\n      </div>\r\n  ";
},"19":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <div class=\"esoc-social-comment-data\">\r\n      <span class=\"esoc-activity-object-info "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(20, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.subtype != this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(22, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-object-name\"\r\n           title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n            </span>\r\n      </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.sgm_description != ''",{"name":"xif","hash":{},"fn":this.program(24, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"20":function(depth0,helpers,partials,data) {
    var stack1;

  return "                <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\"\r\n                   class=\"esoc-social-mime-icon csui-icon-group\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"\r\n                   aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">\r\n                  <span class=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" />\r\n                  <span class=\"csui-icon csui-icon-shortcut-overlay\"></span>\r\n                </a>\r\n";
},"22":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n";
},"24":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-extended-view-mode\">\r\n          <div class=\"esoc-social-comment-data\">\r\n            <div class=\"esoc-description\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.sgm_description : stack1), depth0))
    + "</div>\r\n          </div>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-down\"></span></a>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-up\"></span></a>\r\n        </div>\r\n";
},"26":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(27, data, 0),"inverse":this.program(30, data, 0)})) != null ? stack1 : "");
},"27":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-social-comment-data\">\r\n           <span class=\"esoc-activity-object-info "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n              <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"\r\n                 aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n              <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\"\r\n                 class=\"esoc-object-name  esoc-object-name-with-version\"\r\n                 title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n              <span class=\"esoc-social-version\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.version : stack1), depth0))
    + "</span>\r\n              <span class=\"esoc-version-number\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.version_name : stack1), depth0))
    + "</span>\r\n            </span>\r\n        </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.sgm_description != ''",{"name":"xif","hash":{},"fn":this.program(28, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n";
},"28":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <div class=\"esoc-extended-view-mode\">\r\n            <div class=\"esoc-social-comment-data\">\r\n              <div class=\"esoc-description\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.sgm_description : stack1), depth0))
    + "</div>\r\n            </div>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-down\"></span></a>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-up\"></span></a>\r\n          </div>\r\n";
},"30":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 9",{"name":"xif","hash":{},"fn":this.program(31, data, 0),"inverse":this.program(33, data, 0)})) != null ? stack1 : "");
},"31":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <div class=\"esoc-extended-view-mode\">\r\n            <div class=\"esoc-social-comment-data\"></div>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-down\"></span></a>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-up\"></span></a>\r\n          </div>\r\n";
},"33":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "          <div class=\"esoc-extended-view-mode\">\r\n            <div class=\"esoc-social-comment-data\">"
    + ((stack1 = ((helper = (helper = helpers.commentText || (depth0 != null ? depth0.commentText : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"commentText","hash":{}}) : helper))) != null ? stack1 : "")
    + "</div>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-down\"></span></a>\r\n            <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n               class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n              <span class=\"icon-arrow-up\"></span></a>\r\n          </div>\r\n      ";
},"35":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-social-attachment "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentInactiveClass : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(36, data, 0),"inverse":this.program(38, data, 0)})) != null ? stack1 : "")
    + "            <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-name\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "</a>\r\n          </div>\r\n";
},"36":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <span class=\"csui-icon-group esoc-social-attachment-icon\"\r\n                  title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">\r\n            <span class=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentMimeTypeClass : stack1), depth0))
    + "\" />\r\n            <span class=\"csui-icon csui-icon-shortcut-overlay\"></span>\r\n          </span>\r\n";
},"38":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages\r\n        .documentAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(39, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"39":function(depth0,helpers,partials,data) {
    var stack1;

  return "              <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentMimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\"></a>\r\n          ";
},"41":function(depth0,helpers,partials,data) {
    var helper;

  return "          <div id=\""
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\" class=\"esoc-social-activity-load-more\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.isFirstItem : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "<a href=\"javascript:void(0);\" class=\"esoc-activity-focus-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userProfileLink : stack1), depth0))
    + "\"></a>\r\n<div class=\"esoc-profileimg-block\">\r\n    <span class=\"esoc-userprofile-img\">\r\n        <img class=\"esoc-userprofile-img-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.user : depth0)) != null ? stack1.id : stack1), depth0))
    + " binf-img-circle\" src=\"\" />\r\n    </span>\r\n</div>\r\n<div class=\"esoc-commentinfo-block-wrapper binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n<div class=\"esoc-commentinfo-block binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div class=\"esoc-social-comment-details\">\r\n    <div class=\"esoc-comment-user-details binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <span class=\"esoc-user-widget\"></span>\r\n        <span class=\"esoc-activityfeed-actiontype\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 4 || this.feed_event_type == 2",{"name":"xif","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7 || this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.modified_at_iso8601 == ''",{"name":"xif","hash":{},"fn":this.program(7, data, 0),"inverse":this.program(9, data, 0)})) != null ? stack1 : "")
    + "        </span>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.showCommentIcon : depth0),{"name":"if","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "    </div>\r\n  </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 4",{"name":"xif","hash":{},"fn":this.program(14, data, 0),"inverse":this.program(16, data, 0)})) != null ? stack1 : "")
    + "  </div>\r\n\r\n  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div id=\"esoc-social-comment-input-holder-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7",{"name":"xif","hash":{},"fn":this.program(19, data, 0),"inverse":this.program(26, data, 0)})) != null ? stack1 : "")
    + "      </div>\r\n\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_id != '' && (this.extended_info.attachment_subtype ==\r\n    this.messages.shortcutAttachmentSubtype || this.extended_info.attachment_subtype == this\r\n    .messages.documentAttachmentSubtype)",{"name":"xif","hash":{},"fn":this.program(35, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n        </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.noMoreData == false",{"name":"xif","hash":{},"fn":this.program(41, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        <span class=\"esoc-social-comment-delete\"></span>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_activityfeedstandard', t);
return t;
});
/* END_TEMPLATE */
;

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/impl/activityfeedheader',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "  <div class=\"esoc-comment-list-header-divider\"></div>\r\n";
},"3":function(depth0,helpers,partials,data) {
    var stack1;

  return "            "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.actionType : stack1), depth0))
    + "\r\n";
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "            "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.textmsg : stack1), depth0))
    + "\r\n";
},"7":function(depth0,helpers,partials,data) {
    var helper;

  return "            <span class=\"esoc-social-comment-timestamp\">"
    + this.escapeExpression(((helper = (helper = helpers.created_at_iso8601 || (depth0 != null ? depth0.created_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"created_at_iso8601","hash":{}}) : helper)))
    + "</span>\r\n";
},"9":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <span class=\"esoc-social-comment-timestamp\">\r\n              <span class=\"esoc-social-comment-timestamp-ago\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.modifiedAt : stack1), depth0))
    + "\">\r\n              </span>\r\n              "
    + this.escapeExpression(((helper = (helper = helpers.modified_at_iso8601 || (depth0 != null ? depth0.modified_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"modified_at_iso8601","hash":{}}) : helper)))
    + "\r\n            </span>\r\n";
},"11":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div class=\"esoc-comment-msg binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <span class=\"esoc-activity-object-information "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n        <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\"\r\n           class=\"esoc-social-mime-icon  "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"\r\n           aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n        <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-object-name\"\r\n           title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">\r\n          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\r\n        </a>\r\n      </span>\r\n    </div>\r\n";
},"13":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div class=\"esoc-comment-msg binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-social-comment-details binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n        <div class=\"esoc-comment-user-details\">\r\n          <span class=\"esoc-reply-user-widget\"></span>\r\n        <span class=\"esoc-activityfeed-actiontype esoc-activityfeed-header-status\">\r\n          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.status : stack1), depth0))
    + "\r\n        </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n";
},"15":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div class=\"esoc-comment-msg binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-activity-object-information "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(16, data, 0),"inverse":this.program(18, data, 0)})) != null ? stack1 : "")
    + "        <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-object-name\"\r\n           title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n      </div>\r\n    </div>\r\n";
},"16":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon csui-icon-group\"\r\n             title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">\r\n            <span class=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" />\r\n            <span class=\"csui-icon csui-icon-shortcut-overlay\"></span>\r\n          </a>\r\n";
},"18":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n";
},"20":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div class=\"esoc-comment-msg binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-activity-object-information "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.inactiveClass : stack1), depth0))
    + "\">\r\n        <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\" class=\"esoc-social-mime-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></a>\r\n        <a href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.defaultActionUrl : stack1), depth0))
    + "\"\r\n           class=\"esoc-object-name  esoc-object-name-with-version\"\r\n           title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "</a>\r\n        <span class=\"esoc-social-version\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.version : stack1), depth0))
    + "</span>\r\n        <span class=\"esoc-version-number\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.version_name : stack1), depth0))
    + "</span>\r\n      </div>\r\n    </div>\r\n";
},"22":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.sgm_description != ''",{"name":"xif","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"23":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-extended-view-mode\">\r\n          <div class=\"esoc-social-comment-data\">\r\n            <div class=\"esoc-description\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.sgm_description : stack1), depth0))
    + "</div>\r\n          </div>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-down-dark\"></span></a>\r\n          <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n             class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n            <span class=\"icon-arrow-up-dark\"></span></a>\r\n        </div>\r\n";
},"25":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <div class=\"esoc-extended-view-mode\">\r\n        <div class=\"esoc-social-comment-data\"></div>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-down-dark\"></span></a>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-up-dark\"></span></a>\r\n      </div>\r\n    </div>\r\n";
},"27":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <div class=\"esoc-extended-view-mode\">\r\n        <div class=\"esoc-social-comment-data\">"
    + ((stack1 = ((helper = (helper = helpers.commentText || (depth0 != null ? depth0.commentText : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"commentText","hash":{}}) : helper))) != null ? stack1 : "")
    + "</div>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-down-dark\"></span></a>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-up-dark\"></span></a>\r\n      </div>\r\n";
},"29":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div class=\"esoc-social-comment-list-actions binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.enableComments : stack1),{"name":"if","hash":{},"fn":this.program(30, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "    </div>\r\n";
},"30":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div class=\"esoc-social-comment-container esoc-socialactions-getcomments\">\r\n          <a class=\"esoc-social-comment-container\" href=\"javascript:void(0);\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + "\">\r\n          <span class=\"esoc-activity-feed-comment\">\r\n            <span class=\"esoc-cs-icon-feed-comment\" data-value="
    + this.escapeExpression(((helper = (helper = helpers.data_id || (depth0 != null ? depth0.data_id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"data_id","hash":{}}) : helper)))
    + " title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + "\"></span>\r\n          </span>\r\n          </a>\r\n        </div>\r\n";
},"32":function(depth0,helpers,partials,data) {
    var stack1;

  return "  <div class=\"esoc-social-attachment "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentInactiveClass : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(33, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.documentAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(35, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n    <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-name\"\r\n       title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "</a>\r\n  </div>\r\n";
},"33":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <span class=\"csui-icon-group esoc-social-attachment-icon\"\r\n            title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">\r\n            <span class=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentMimeTypeClass : stack1), depth0))
    + "\" />\r\n            <span class=\"csui-icon csui-icon-shortcut-overlay\"></span>\r\n          </span>\r\n";
},"35":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentMimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\"></a>\r\n";
},"37":function(depth0,helpers,partials,data) {
    var helper;

  return "  <div id=\""
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\" class=\"esoc-social-activity-load-more\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.isFirstItem : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n<a href=\"javascript:void(0);\" class=\"esoc-activity-focus-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userProfileLink : stack1), depth0))
    + "\"></a>\r\n<div class=\"esoc-profileimg-block\">\r\n    <span class=\"esoc-userprofile-img\">\r\n        <img class=\"esoc-userprofile-img-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.user : depth0)) != null ? stack1.id : stack1), depth0))
    + " binf-img-circle\" src=\"\" />\r\n    </span>\r\n</div>\r\n\r\n<div class=\"esoc-commentinfo-block-wrapper esoc-activityfeed-header binf-col-lg-12 binf-col-md-12\r\nbinf-col-sm-12 binf-col-xs-12\">\r\n\r\n  <!-- first line - begin: <<user-display-name>> <<action-type>> <<time-stamp>> -->\r\n  <div class=\"esoc-commentinfo-block binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div class=\"esoc-social-comment-details binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-comment-user-details\">\r\n        <span class=\"esoc-user-widget\"></span>\r\n        <span class=\"esoc-activityfeed-actiontype\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 4 || this.feed_event_type == 2",{"name":"xif","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7 || this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.modified_at_iso8601 == ''",{"name":"xif","hash":{},"fn":this.program(7, data, 0),"inverse":this.program(9, data, 0)})) != null ? stack1 : "")
    + "        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- first line - end: <<user-display-name>> <<action-type>> <<time-stamp>> -->\r\n\r\n  <!-- second line - begin: <<object-mime-type>> <<object-name>> version <<version-number>>-->\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 4",{"name":"xif","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 2",{"name":"xif","hash":{},"fn":this.program(13, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7",{"name":"xif","hash":{},"fn":this.program(15, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(20, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  <!-- second line - end: <<object-mime-type>> <<object-name>> version <<version-number>>-->\r\n\r\n  <!-- third line - begin:FFT(Free FlowText)<<comment/reply/description/attribute-change-text>>-->\r\n  <div class=\"esoc-acitivity-feed-fft binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div id=\"esoc-social-comment-input-holder-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7 || this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(22, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 9",{"name":"xif","hash":{},"fn":this.program(25, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type != 7 && this.feed_event_type != 8 && this.feed_event_type != 9",{"name":"xif","hash":{},"fn":this.program(27, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  </div>\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.showCommentIcon : depth0),{"name":"if","hash":{},"fn":this.program(29, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "</div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_id != '' && (this.extended_info.attachment_subtype ==\r\n    this.messages.shortcutAttachmentSubtype || this.extended_info.attachment_subtype == this\r\n    .messages.documentAttachmentSubtype)",{"name":"xif","hash":{},"fn":this.program(32, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "<!-- third line - end:FFT(Free FlowText)<<comment/reply/description/attribute-change-text>>-->\r\n\r\n</div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.noMoreData == false",{"name":"xif","hash":{},"fn":this.program(37, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "<span class=\"esoc-social-comment-delete\"></span>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_impl_activityfeedheader', t);
return t;
});
/* END_TEMPLATE */
;

csui.define('css!esoc/lib/jquery.ui/themes/opentext/jquery-ui',[],function(){});
/*
 * TODO: remove this file, and change the occurances to point to "csui/lib/jquery.ui/js/jquery-ui"
 */

csui.define('esoc/lib/jquery-ui', ['module',
    'csui/lib/jquery.ui/js/jquery-ui',
    'css!esoc/lib/jquery.ui/themes/opentext/jquery-ui.css'
], function (module, ui) {
    //console.warn(" 'esoc/lib/jquery-ui' is deprecated, instead, use" +
    //             " 'csui/lib/jquery.ui/js/jquery-ui' ");
    return ui;
});
/*
 * Extending jquery-ui auto-complete to support @, template...
 */
csui.define('esoc/widgets/socialactions/mentions',['module', 'csui/lib/jquery', 'esoc/widgets/common/util', 'esoc/lib/jquery-ui'], function (module, $, CommonUtil) {

  (function ($, window, document, undefined) {
    $.widget("ui.triggeredAutocomplete", $.extend(true, {}, $.ui.autocomplete.prototype, {

      options: {
        trigger: "@",
        commonUtil: CommonUtil,
        allowDuplicates: false
      },

      _create: function () {

        var self = this;
        this.id_map = {};
        this.stopIndex = -1;
        this.stopLength = -1;
        this.contents = '';
        this.cursorPos = 0;

        /** Fixes some events improperly handled by ui.autocomplete */
        this.element.on('keydown.autocomplete.fix', function (e) {
          switch (e.keyCode) {
          case $.ui.keyCode.ESCAPE:
            self.close(e);
            break;
          case $.ui.keyCode.UP:
          case $.ui.keyCode.DOWN:
            if (!self.menu.element.is(":visible")) {
              e.stopImmediatePropagation();
            }
          }
        });

        // Check for the id_map as an attribute.  This is for editing.

        var id_map_string = this.element.attr('id_map');
        if (id_map_string) {
          this.id_map = JSON.parse(id_map_string);
        }

        this.ac = $.ui.autocomplete.prototype;
        this.ac._create.apply(this, arguments);

        this.updateHidden();

        // Select function defined via options.
        this.options.select = function (event, ui) {
          sessionStorage.removeItem("esoc-user-mentions-info");
          var contents = self.element[0].textContent;
          //Fetch the cursor position for the div
          var cursorPos = self.getCursor(contents);
          var inputPos = self.getCaretPosition(self.element[0]);
          var selectedContent = "";
          if (ui.item.id !== -1) {
            selectedContent = '(' + self.options.trigger + ui.item.id + ')';
          } else {
            selectedContent = self.options.trigger + self.userterm;
            return false;
          }
          if (typeof InstallTrigger !== 'undefined') { //Firefox
            var spanTag = $('<span />');
            spanTag.css("visibility", "hidden");
            spanTag.addClass('esoc-span-mention');
            spanTag[0].innerText = selectedContent;
            $(self.element)[0].appendChild(spanTag[0]);
            var textBoxWidth = $(spanTag[0]).width();
            $(self.element)[0].removeChild(spanTag[0]);

            var mentionedTag = $('<input />');
            mentionedTag.attr({
              id: 'data-userid',
              type: 'text',
              value: selectedContent,
              disabled: 'true'
            });
            mentionedTag.addClass('esoc-user-mention');
            mentionedTag.css("width", textBoxWidth + "px");
          }
          else { //other than Firefox
            mentionedTag = $('<input />');
            mentionedTag.attr({
              type: "button",
              value: selectedContent
            });
            mentionedTag.addClass('esoc-user-mention');
          }
          setTimeout(function () {
            if (self.options.commonUtil.globalConstants.MAX_CHAR_LIMIT <
                contents.length + selectedContent.length) {
              return false;
            }
            if (false || !!document.documentMode) { // IE
              if (self.node.nodeName === "DIV" || self.node.nodeName === 'P') {
                if (ui.item.id !== -1) {
                  self.element[0].innerHTML = self.element[0].innerHTML.substring(0,
                          (self.caretPos - self.length_of_query)) + mentionedTag[0].innerHTML +
                                              self.element[0].innerHTML.substring(self.caretPos,
                                                  self.element[0].innerHTML.length);
                  self.replaceSelection(mentionedTag[0]);
                }
              } else {
                self.replaceTextNodeWithMention(self, mentionedTag[0]);
              }
            } else { // other than IE
              self.replaceTextNodeWithMention(self, mentionedTag[0]);
            }
          }, 0);

          $(this).trigger('focus');
          $(this).trigger("input");
          return false;
        };

        this.replaceSelection = (function () {
          if (window.getSelection) {
            return function (content) {
              var range, sel = window.getSelection();
              var node = typeof content === 'string' ? document.createTextNode(content) : content;
              if (sel.getRangeAt && sel.rangeCount) {
                range = sel.getRangeAt(0);
                range.deleteContents();
                if (typeof InstallTrigger !== 'undefined') { //Firefox
                  range.insertNode(document.createTextNode('\u00A0'));
                  range.insertNode(node);
                  range.insertNode(document.createTextNode('\u00A0'));
                } else {
                  range.insertNode(node);
                }
                range.setStart(node, 0);

                window.setTimeout(function () {
                  range = document.createRange();
                  range.setStartAfter(node);
                  range.collapse(true);
                  sel.removeAllRanges();
                  sel.addRange(range);
                }, 0);
              }
            }
          } else if (document.selection && document.selection.createRange) {
            return function (content) {
              var range = document.selection.createRange();
              if (typeof content === 'string') {
                range.text = content;
              } else {
                range.pasteHTML(content.outerHTML);
              }
            }
          }
        })();

        this.replaceTextNodeWithMention = function (options, mentionTag) {
          options.node.splitText(options.index_for_split);
          if (!!options.node.nextSibling) {
            options.node.nextSibling.splitText(options.length_of_query);
            options.node.nextSibling.nodeValue = "";
          } else {
            options.node.nodeValue.splitText(options.length_of_query);
            options.node.nodeValue.nodeValue = "";
          }

          options.replaceSelection(mentionTag);
        }

        // Don't change the input as you browse the results.
        this.options.focus = function (event, ui) {
          return false;
        }
        this.options.close = function (event, ui) {
          sessionStorage.removeItem("esoc-user-mentions-info");
          return false;
        }
        this.menu.options.blur = function (event, ui) {
          return false;
        }

        // Any changes made need to update the hidden field.
        this.element.on('focus', function () {
          self.updateHidden();
        });
        this.element.on('change', function () {
          self.updateHidden();
        });
      },

      // If there is an 'img' then show it beside the label.

      _renderItem: function (ul, item) {
        if (item.id !== -1) {
          if (item.img !== undefined) {
            return $("<li></li>")
                .data("item.autocomplete", item)
                .append("<div class='ui-menu-item-wrapper'>" + "<a>" +
                        "<span class='image_user_placeholder esoc-user-mention-default-avatar'>" + item.initails + "</span><img src='esoc-user-mention-avatar" +
                        item.img + "' /><span>" + item.label + "</span></a></div>")
                .appendTo(ul);
          }
          else if (item.id !== undefined) {

            var listElement          = document.createElement('li'),
                divElement           = document.createElement('div'),
                anchorElement        = document.createElement('a'),
                defaultAvatarElement = document.createElement('span'),
                imgElement           = document.createElement('img'),
                spanElement          = document.createElement('span');

            $(listElement).attr({'class': 'ui-menu-item', 'role': 'presentation'});
            divElement.setAttribute('class', 'ui-menu-item-wrapper');
            imgElement.setAttribute('class', 'esoc-autosuggestion-img');
            spanElement.setAttribute('class', 'esoc-autosuggestion-name');
            $(spanElement).text(item.label + " (" + item.id + ")");
            defaultAvatarElement.setAttribute('class',
                'image_user_placeholder esoc-user-mention-default-avatar');
            $(defaultAvatarElement).addClass('esoc-user-default-avatar-' + item.value);
            $(defaultAvatarElement)[0].innerText = item.initials;
            $(defaultAvatarElement).css("background",item.userbackgroundcolor);
            anchorElement.appendChild(defaultAvatarElement);
            anchorElement.appendChild(imgElement);
            anchorElement.appendChild(spanElement);
            divElement.appendChild(anchorElement);
            listElement.appendChild(divElement);
            var userProfilePicOptions = {
              context: item.context,
              userid: item.value,
              photoElement: $(imgElement),
              defaultPhotElement: $(defaultAvatarElement),
              photoUrl: item.photo_url
            }
            this.options.commonUtil.setProfilePic(userProfilePicOptions);
            return $(listElement).data("item.autocomplete", item).appendTo(ul);
          }
        }
        else {
          return $("<li></li>")
              .append(
                  "<div class='ui-menu-item-wrapper'>" + "<a class='esoc-autosuggestion-text'>" +
                  item.label + "</a></div>")
              .appendTo(ul);
        }
      },

      // This stops the input box from being cleared when traversing the menu.

      _move: function (direction, event) {
        if (!this.menu.element.is(":visible")) {
          this.search(null, event);
          return;
        }
        /*if ( this.menu.first() && /^previous$/i.test(direction) ||
         this.menu.last() && /^next$/i.test(direction) ) {
         this.menu.deactivate();
         return;
         }*/
        this.menu[direction](event);
      },

      search: function (value, event) {

        var contents = this.element.html();
        var cursorPos = this.getCursor(contents);
        this.contents = contents;
        this.cursorPos = cursorPos;
        var that = this;

        // Include the character before the trigger and check that the trigger is not in the middle of a word
        // This avoids trying to match in the middle of email addresses when '@' is used as the trigger
        var inputPos = this.getCaretPosition(this.element[0]),
            query    = this.element[0].textContent.substring(0, inputPos),
            regex    = new RegExp("(^|\\s)([" + this.options.trigger + "][^\W-]*)$");
        if (query.match(/\s@/g) !== null && query.match(/\s@/g).length >= 1) {
          var re = new RegExp(/\s@/g);
          var termIndex = 0, matchString;
          while ((matchString = re.exec(query)) != null) {
            termIndex = matchString.index;
          }
          query = query.substring(termIndex, query.length);
        }
        var result = regex.exec(query);

        if (result && result[2]) {
          // Get the characters following the trigger and before the cursor position.
          // Get the contents up to the cursortPos first then get the lastIndexOf the trigger to find the search term.

          contents = query.substring(0, inputPos);
          /*if(result[2].match(/\@@/g)){
              result[2] = result[2].substring(1, result[2].length);
          }*/
          var term = result[2].substring(1, result[2].length).toLowerCase();
          this.length_of_query = term.length + this.options.trigger.length;
          var range = "";
          setTimeout(function () {
            if (window.getSelection && window.getSelection().getRangeAt) {
              range = window.getSelection().getRangeAt(0);
            } else if (document.selection && document.selection.createRange) {
              range = document.selection.createRange();
            }
            that.node = range.startContainer;
            if (false || !!document.documentMode) { // IE
              if (that.node.nodeName === 'DIV' || that.node.nodeName === 'P') {
                var cursorPosition = that.getCaretPosition(that.node);
                that.index_for_split = cursorPosition - that.length_of_query;
                that.nodeCurPos = that.insertNodeAtCaret(that.node,
                    document.createTextNode('\u0001'));
                that.caretPos = that.insertNodeAtCaret(that.element[0],
                    document.createTextNode('\u0001'));
              } else {
                that.index_for_split = range.startOffset - that.length_of_query;
              }
            } else { // other than IE
              that.index_for_split = range.startOffset - that.length_of_query;
            }
          }, 10);
          this.userterm = term;

          // Only query the server if we have a term and we haven't received a null response.
          // First check the current query to see if it already returned a null response.

          if (term.length > 0) {
            // Updates the hidden field to check if a name was removed so that we can put them back in the list.
            this.updateHidden();
            return this._search(term);
          }
          else {
            this.close();
          }
        } else {
          this.close();
        }
      },

      // Slightly altered the default ajax call to stop querying after the search produced no results.
      // This is to prevent unnecessary querying.

      _initSource: function () {
        var self = this, array, url, label;
        if ($.isArray(this.options.source)) {
          array = this.options.source;
          this.source = function (request, response) {
            response($.ui.autocomplete.filter(array, request.term));
          };
        } else if (typeof this.options.source === "string") {
          url = this.options.source;
          this.source = function (request, response) {
            if (self.xhr) {
              self.xhr.abort();
            }
            self.xhr = $.ajax({
              url: url,
              data: request,
              dataType: 'json',
              success: function (data) {
                if (data != null) {
                  response($.map(data, function (item) {
                    if (typeof item === "string") {
                      label = item;
                    }
                    else {
                      label = item.label;
                    }
                    // If the item has already been selected don't re-include it.
                    if (!self.id_map[label] || self.options.allowDuplicates) {
                      return item
                    }
                  }));
                  self.stopLength = -1;
                  self.stopIndex = -1;
                }
                else {
                  // No results, record length of string and stop querying unless the length decreases
                  self.stopLength = request.term.length;
                  self.stopIndex = self.contents.lastIndexOf(self.options.trigger);
                  self.close();
                }
              }
            });
          };
        } else {
          this.source = this.options.source;
        }
      },

      destroy: function () {
        $.Widget.prototype.destroy.call(this);
      },

      // Gets the position of the cursor in the input box.

      getCursor: function (contents) {
        var range;
        if (window.getSelection && window.getSelection().getRangeAt) {
          range = window.getSelection().getRangeAt(0);
        } else if (document.selection && document.selection.createRange) {
          range = document.selection.createRange();
        }
        var textVal = window.getSelection().focusNode.textContent;
        textVal = textVal.substring(1, range.endOffset)
        var cursorPos = contents.lastIndexOf(textVal) + textVal.length;
        return cursorPos;
      },
      insertNodeAtCaret: function (element, node) {
        var sel = window.getSelection();
        var cPosition = 0;
        if (sel.rangeCount) {
          var range = sel.getRangeAt(0);
          range.collapse(false);
          range.insertNode(node);
          range = range.cloneRange();
          range.selectNodeContents(node);
          range.collapse(false);
          sel.removeAllRanges();
          sel.addRange(range);
          cPosition = element.innerHTML.indexOf("\u0001");
          node.parentNode.removeChild(node);
        }
        return cPosition;
      },
      getCaretCharacterOffset: function (element) {
        var caretOffset = 0;
        if (typeof window.getSelection !== "undefined") {
          var range = window.getSelection().getRangeAt(0);
          var preCaretRange = range.cloneRange();
          preCaretRange.selectNodeContents(element);
          preCaretRange.setEnd(range.endContainer, range.endOffset);
          caretOffset = preCaretRange.toString().length;
        } else if (typeof document.selection !== "undefined" &&
                   document.selection.type !== "Control") {
          var textRange = document.selection.createRange();
          var preCaretTextRange = document.body.createTextRange();
          preCaretTextRange.moveToElementText(element);
          preCaretTextRange.setEndPoint("EndToEnd", textRange);
          caretOffset = preCaretTextRange.text.length;
        }
        return caretOffset;
      },
      // Populates the hidden field with the contents of the entry box but with
      // ID's instead of usernames.  Better for storage.

      updateHidden: function () {
        var trigger = this.options.trigger;
        var top = this.element.scrollTop();
        var contents = this.element.val();
        for (var key in this.id_map) {
          var find = trigger + key;
          find = find.replace(/[^a-zA-Z 0-9@]+/g, '\\$&');
          var regex = new RegExp(find, "g");
          var old_contents = contents;
          contents = contents.replace(regex, trigger + '[' + this.id_map[key] + ']');
          if (old_contents === contents) {
            delete this.id_map[key];
          }
        }
        $(this.options.hidden).val(contents);
        this.element.scrollTop(top);
      },
      getCharacterOffsetWithin: function (range, node) {
        var treeWalker = document.createTreeWalker(
            node,
            NodeFilter.SHOW_TEXT,
            function (node) {
              var nodeRange = document.createRange();
              nodeRange.selectNode(node);
              return nodeRange.compareBoundaryPoints(Range.END_TO_END, range) < 1 ?
                     NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
            },
            false
        );

        var charCount = 0;
        while (treeWalker.nextNode()) {
          charCount += treeWalker.currentNode.length;
        }
        if (range.startContainer.nodeType === 3) {
          charCount += range.startOffset;
        }
        return charCount;
      },
      getCaretPosition: function (containerEl) {
        var range = window.getSelection().getRangeAt(0);
        return this.getCharacterOffsetWithin(range, containerEl);
      }
    }));
  })($, window, document);
  return $;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/socialactions/attachmentpopovertemplate',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var helper;

  return "  <span id=\"esoc-social-selected-attachment-dialog-title\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.popoverTitle || (depth0 != null ? depth0.popoverTitle : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"popoverTitle","hash":{}}) : helper)))
    + "\"\r\n       class=\"esoc-social-attachment-dialog-title\">\r\n    <span class=\"esoc-social-attachment-label\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.popoverTitle || (depth0 != null ? depth0.popoverTitle : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"popoverTitle","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.popoverTitle || (depth0 != null ? depth0.popoverTitle : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"popoverTitle","hash":{}}) : helper)))
    + "</span>\r\n  </span>\r\n";
},"3":function(depth0,helpers,partials,data) {
    var helper;

  return "  <div class=\"esoc-social-attachment-dialog\">\r\n    <div class=\"esoc-social-attachment-row\">\r\n      <span id=\"esoc-social-attachment-cs-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n            class=\"esoc-social-attachment-cs-icon\"></span>\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-attachment-cs-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n         class=\"esoc-social-attachment-cs\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.fromContentServer || (depth0 != null ? depth0.fromContentServer : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"fromContentServer","hash":{}}) : helper)))
    + "\">\r\n        <span>"
    + this.escapeExpression(((helper = (helper = helpers.fromContentServer || (depth0 != null ? depth0.fromContentServer : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"fromContentServer","hash":{}}) : helper)))
    + "</span>\r\n      </a>\r\n    </div>\r\n    <div class=\"esoc-social-attachment-row\">\r\n      <span id=\"esoc-social-attachment-desktop-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n            class=\"esoc-social-attachment-desktop-icon\"></span>\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-attachment-desktop-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n         class=\"esoc-social-attachment-desktop\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.fromYourDesktop || (depth0 != null ? depth0.fromYourDesktop : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"fromYourDesktop","hash":{}}) : helper)))
    + "\">\r\n        <span>"
    + this.escapeExpression(((helper = (helper = helpers.fromYourDesktop || (depth0 != null ? depth0.fromYourDesktop : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"fromYourDesktop","hash":{}}) : helper)))
    + "</span>\r\n      </a>\r\n    </div>\r\n  </div><input type=\"file\" id=\""
    + this.escapeExpression(((helper = (helper = helpers.desktopAttachmentInputId || (depth0 != null ? depth0.desktopAttachmentInputId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"desktopAttachmentInputId","hash":{}}) : helper)))
    + "\" name=\"AddDesktopDoc\"\r\n               style=\"display:none\" />\r\n";
},"5":function(depth0,helpers,partials,data) {
    var helper;

  return "  <div id=\"esoc-social-selected-attachment-dialog\">\r\n    <div class=\"esoc-social-selected-file row-fluid\">\r\n\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-selected-file-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.filename || (depth0 != null ? depth0.filename : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filename","hash":{}}) : helper)))
    + "\"\r\n         class=\"esoc-social-selected-file-icon "
    + this.escapeExpression(((helper = (helper = helpers.filemimetypeicon || (depth0 != null ? depth0.filemimetypeicon : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filemimetypeicon","hash":{}}) : helper)))
    + " binf-col-lg-1 binf-col-md-1 binf-col-sm-1 binf-col-xs-1 esoc-social-no-padding-right binf-pull-left\" />\r\n\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-attachment-name-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n         class=\"esoc-social-attachment-name binf-col-lg-6 binf-col-md-6 binf-col-sm-6 binf-col-xs-6 esoc-social-no-padding-right\"\r\n         title=\""
    + this.escapeExpression(((helper = (helper = helpers.filename || (depth0 != null ? depth0.filename : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filename","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.filename || (depth0 != null ? depth0.filename : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filename","hash":{}}) : helper)))
    + "</a>\r\n            <span id=\"esoc-social-attachment-size-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-social-attachment-size binf-col-lg-3 binf-col-md-3 binf-col-sm-3 binf-col-xs-3\r\n                  esoc-social-no-padding-right\">"
    + this.escapeExpression(((helper = (helper = helpers.filesize || (depth0 != null ? depth0.filesize : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filesize","hash":{}}) : helper)))
    + "</span>\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-attachment-delete-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-social-attachment-icon-delete binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2\r\n                  esoc-social-no-padding-right\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.deletetitle || (depth0 != null ? depth0.deletetitle : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"deletetitle","hash":{}}) : helper)))
    + "\"></a>\r\n    </div>\r\n  </div>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var helper;

  return "  <div id=\"esoc-social-selected-attachment-dialog\">\r\n    <div class=\"esoc-social-selected-file row-fluid\">\r\n\r\n            <span class=\"csui-icon-group\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.filename || (depth0 != null ? depth0.filename : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filename","hash":{}}) : helper)))
    + "\">\r\n                  <span id=\"esoc-social-selected-file-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n                        class=\"esoc-social-selected-file-icon esoc-social-mime-icon esoc-comment-valign "
    + this.escapeExpression(((helper = (helper = helpers.filemimetypeicon || (depth0 != null ? depth0.filemimetypeicon : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filemimetypeicon","hash":{}}) : helper)))
    + " binf-col-lg-1 binf-col-md-1 binf-col-sm-1 binf-col-xs-1 esoc-social-no-padding-right binf-pull-left\" />\r\n                  <a href=\"javascript:void(0);\" class=\"csui-icon csui-icon-shortcut-overlay\"></a>\r\n            </span>\r\n\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-attachment-name-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n         class=\"esoc-social-attachment-name binf-col-lg-6 binf-col-md-6 binf-col-sm-6 binf-col-xs-6 esoc-social-no-padding-right esoc-social-shortcut-name\"\r\n         title=\""
    + this.escapeExpression(((helper = (helper = helpers.filename || (depth0 != null ? depth0.filename : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filename","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.filename || (depth0 != null ? depth0.filename : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"filename","hash":{}}) : helper)))
    + "</a>\r\n      <span\r\n          class=\"esoc-social-attachment-size binf-col-lg-4 binf-col-md-4 binf-col-sm-4 binf-col-xs-4 esoc-social-no-padding-right\"></span>\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-attachment-delete-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n         class=\"esoc-social-attachment-icon-delete binf-col-lg-1 binf-col-md-1 binf-col-sm-4 binf-col-xs-1 esoc-social-no-padding-right esoc-shortcut-delete-icon\"\r\n         title=\""
    + this.escapeExpression(((helper = (helper = helpers.deletetitle || (depth0 != null ? depth0.deletetitle : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"deletetitle","hash":{}}) : helper)))
    + "\"></a>\r\n    </div>\r\n  </div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.popoverTitle : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.attachFilesPopover : depth0),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.attachmentPopover : depth0),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.shortcutPopover : depth0),{"name":"if","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_socialactions_attachmentpopovertemplate', t);
return t;
});
/* END_TEMPLATE */
;

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/socialactions/maskingtemplate',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"esoc-profile-img-load-container esoc-comment-masking-container\">\r\n  <div class=\"esoc-profile-img-loader\">\r\n    <div class=\"esoc-profile-img-inner-border\"></div>\r\n  </div>\r\n</div>";
}});
Handlebars.registerPartial('esoc_widgets_socialactions_maskingtemplate', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/socialactions/util',['module',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'esoc/widgets/socialactions/mentions',
      'csui/utils/namedsessionstorage',
      'csui/utils/url',
      'csui/utils/base',
      'csui/dialogs/node.picker/node.picker',
      'hbs!esoc/widgets/socialactions/attachmentpopovertemplate',
      'hbs!esoc/widgets/socialactions/maskingtemplate',
      'esoc/widgets/common/util',
      'csui/utils/nodesprites',
      'csui/utils/user.avatar.color',
      'esoc/widgets/userwidget/userwidget',
      'i18n!esoc/widgets/socialactions/nls/lang',
      'i18n'
    ],
    function (module, $, _, Mentions, NamedSessionStorage, URL, Base, NodePicker,
        AttachmentPopoverTemplate, MaskingTemplate, CommonUtil, NodeSpriteCollection,
        UserAvatarColor, UserWidget,
        Lang, i18n) {

      var  getElementOffset = function (ele) {
            return ele.is(':visible') ? ele.offset() : {top: 0, left: 0};
          };
      var Utils = {
        commonUtil: CommonUtil,
        base: Base,
        namedSessionStorage: new NamedSessionStorage("esoc-user-mentions-info"),
        attachmentPopoverTemplate: AttachmentPopoverTemplate,
        maskingTemplate: MaskingTemplate,
        lang: Lang,

        /**
         * this method updates the current model, and requires the below arguments
         * @param args = {url, type, data {id, status, ATT_ID, replace}, dataType, model}
         */
        updateCommentAjaxCall: function (args) {
          var commentListItem = args.model,
              commentToDelete = commentListItem.model;
          if (args.requestType === 'AttachmentDelete') {
            $.ajax(commentListItem.options.model.collection.connector.extendAjaxOptions({
              url: args.url,
              type: args.type,
              dataType: args.dataType,
              data: args.data,
              success: this.onDeleteSuccess.bind(this, args),
              error: this.onDeleteFailure.bind(this, args)
            }));
          }
          else {
            // Confirmation dialog close is not handled on deletion
            // can be removed once it is handled
            if ($(document.body).hasClass('binf-comment-dialog-open')) {
              $(document.body).removeClass('binf-modal-open');
            }
            commentToDelete.destroy({
              wait: true,
              success: this.onDeleteSuccess.bind(this, args),
              error: this.onDeleteFailure.bind(this, args)
            });
          }
        },
        onDeleteSuccess: function (args, data, status, jXHR) {
          var commentListItem         = args.model,
              requestType             = args.requestType,
              commentsCollectionModel = commentListItem.collection,
              self                    = this,
              commentToDelete         = commentListItem.model;

          // TODO: call success callback
          commentListItem.options.commentConfigOptions.commentAction = true;
          var max_id        = commentListItem.collection.models.length,
              fetchNextPage = false,
              model         = commentListItem.collection.models[max_id - 1];
          model = model || args.model.model;
          max_id = model.id;

          switch (requestType) {
          case 'CommentDelete':
            if (commentsCollectionModel.models.length) {
              fetchNextPage = !(commentsCollectionModel.models[commentsCollectionModel.models.length -
                                                               1].attributes.noMoreData);
              fetchNextPage = fetchNextPage &&
                              commentsCollectionModel.models.length ===
                              self.commonUtil.globalConstants.FETCH_NEXT_PAGE_MODELS_LENGTH;
            }
            self.hideMask(commentListItem.$el);
            commentListItem.destroy();
            commentsCollectionModel.remove(commentListItem.model);
            if (fetchNextPage) {
              commentsCollectionModel.defaults.params[self.commonUtil.globalConstants.MAX_ID] = max_id;
              commentsCollectionModel.fetch({remove: false});
            }
            var totalComments = 0;
            if (jXHR.xhr.responseJSON) {
              totalComments = jXHR.xhr.responseJSON.commentCount;
            } else {
              totalComments = commentListItem.collection.models.length;
              if (commentListItem.collection.find(commentToDelete)) {
                totalComments--;
              }
            }
            if (commentListItem.options.commentConfigOptions.tablecellwidget) {
              commentListItem.util.commonUtil.updateCommentCount({
                currentNodeModel: commentListItem.options.commentConfigOptions.currentNodeModel,
                commentCount: totalComments
              });
            }
            if (commentsCollectionModel.models.length === 0) {
              $("#esoc-social-comment-container").find(
                  ".esoc-social-comment-body-divider").each(function () {
                $(this).remove();
              });
              $("#esoc-social-comment-container").css("border-bottom", "0px solid #ffffff");
              $("#esoc-social-comment-form-buttons-container").addClass(
                  "esoc-social-form-minheight");
            }
            break;
          case 'ReplyDelete':
            var showSeeMoreLink = false;
            if (commentsCollectionModel.models.length > 0) {
              showSeeMoreLink = !commentsCollectionModel.models[commentsCollectionModel.models.length -
                                                                1].attributes.noMoreData;
            }
            fetchNextPage = showSeeMoreLink &&
                            commentsCollectionModel.models.length ===
                            self.commonUtil.globalConstants.FETCH_NEXT_PAGE_MODELS_LENGTH;
            if (fetchNextPage) {
              $(".esoc-social-reply-seemore:visible").trigger("click");
            }
            commentListItem.$el.find(".esoc-social-reply-seemore").remove();
            self.hideMask(commentListItem.$el);
            commentListItem.destroy();
            commentsCollectionModel.remove(commentListItem.model);
            showSeeMoreLink && commentsCollectionModel.models.length >
                               self.commonUtil.globalConstants.SHOW_SEE_MORE_MODELS_LENGTH ?
            $(".esoc-social-reply-seemore:last").show(1000) : "";
            commentListItem.options.commentConfigOptions.parentCollectionView.triggerMethod(
                'update:scrollbar');
            break;
          default:
            var myResponse = (JSON.parse(data)).status;
            commentListItem.model.attributes.data_id = myResponse.data_id;
            commentListItem.model.attributes.created_at_iso8601 = myResponse.created_at_iso8601;
            commentListItem.model.attributes.modified_at_iso8601 = self.base.formatFriendlyDateTimeNow(
                myResponse.modified_at_iso8601);
            commentListItem.model.attributes.text = myResponse.text;
            commentListItem.model.attributes.feed_event_type = myResponse.feed_event_type;
            commentListItem.model.attributes.user.name = myResponse.user.name;
            commentListItem.model.attributes.user.screen_name = myResponse.user.screen_name;
            commentListItem.model.attributes.user.profile_image_url = myResponse.user.profile_image_url;
            if (requestType ===
                self.commonUtil.globalConstants.REQUEST_TYPE_ATTACHMENT_DELETE) {
              if (!(myResponse.extended_info && myResponse.extended_info.attachment_id)) {
                commentListItem.model.attributes.extended_info.attachment_id = '';
              }
            }
            self.hideMask(commentListItem.$el);
            commentListItem.render();
            if (commentListItem.model.collection.models[commentListItem.model.collection.length -
                                                        1].attributes.noMoreData === false) {
              $(".esoc-social-reply-seemore:last").show();
            }
          }
          commentListItem.showSeeMoreLink(
              commentListItem.$el.find(commentListItem.contentTypeElement));
        },
        onDeleteFailure: function (args, xhr, status, text) {
          var model = args.model;
          this.hideMask(model.$el);
          //TODO: To handle the error messages which we have to show to the user
          model.showSeeMoreLink(model.$el.find(model.contentTypeElement));
          this.commonUtil.openErrorDialog({
            parent: ".esoc-social-comment-widget",
            errorContent: xhr.responseJSON ?
                          (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                           xhr.responseJSON.error) :
                          this.lang.defaultErrorMessageForUpdateComment
          });
        },
        /**
         * this method positions the cursor in input type elements to the position passed through arguments.
         * @param args = {input, pos}
         */
        setSelectionRange: function (input, pos) {
          var selectionStart = pos,
              selectionEnd   = pos;
          if (input.setSelectionRange) {
            $(input).trigger("focus");
            input.setSelectionRange(selectionStart, selectionEnd);
          } else if (input.createTextRange) {
            var range = input.createTextRange();
            range.collapse(true);
            range.moveEnd('character', selectionEnd);
            range.moveStart('character', selectionStart);
            range.select();
          }
        },
        /**
         * Opens the confirmation dialog based on the arguments.
         * on clicking cancel button, hides the dialog
         * on clicking delete button, updateCommentAjaxCall method is called
         * @param args = {dialogtitle, dialogmessage, {url, type, data {id, status, ATT_ID, replace}, dataType, model}}
         */
        openConfirmationDialog: function (args) {
          var dialog = $('#esoc-social-dialog');
          dialog.binf_modal({
            "backdrop": "static",
            "show": false,
            /**
             *Confirmation dialog opens on comment box rather on 'body', hence
             * padding is not required on overflow which is calculated for 'body'
             */
            "paddingWhenOverflowing": false
          });
          var that = this;
          dialog.on('show.binf.modal', function (event) {
            var modal = $(this);
            dialog.addClass("esoc-social-delete-dialog-mask");
            modal.find('#myModalTitle').text(args.dialogtitle);
            dialog.find(".binf-modal-backdrop").remove();
            modal.find('#myModalConfirmationText').text(args.dialogmessage);

            var clonedDialog;
            var top;
            clonedDialog = $(this).clone();
            clonedDialog.css('display', 'block');
            clonedDialog.appendTo(document.body);
            top = Math.round(($(".esoc-social-comment-widget").height() -
                              clonedDialog.find('.binf-modal-content').height()) / 2) + 10;
            top = top > 0 ? top : 0;
            clonedDialog.remove();
            $('.esoc-social-modal-content').attr("style", "margin-top:" + top + "px !important");

            $(".esoc-social-dialog-delete-button").off('click').on('click', function (event) {
              dialog.hide();
              dialog.off();
              dialog.removeData('binf.modal');
              that.updateCommentAjaxCall(args.ajaxParams);
              that.setFocusOnDefaultElement();
            });

            $('.esoc-social-dialog-cancel-button').on('keydown', function (e) {
              if ((e.keyCode || e.which) === 9) {
                $('.esoc-social-dialog-delete-button').trigger("focus");
                e.preventDefault();
              }
            });
          });
          dialog.on('shown.binf.modal', function (event) {
            $('.esoc-social-dialog-cancel-button').trigger("focus");
          });
          dialog.on('hidden.binf.modal', function (event) {
            //Confirmation dialog cancel removes the class but
            // required in 'modal within modal' scenario
            if (!$(document.body).hasClass('binf-comment-dialog-open')) {
              $(document.body).addClass('binf-modal-open');
            }
            that.hideMask(args.ajaxParams.model.$el);
            var modal = $(this);
            modal.find('#myModalTitle').text('');
            modal.find('#myModalConfirmationText').text('');
            dialog.removeClass("esoc-social-delete-dialog-mask");
            dialog.off();
            $(document.activeElement).trigger("blur");
            var _ele = $("#esoc-social-comment-title")[0];
            $(_ele).trigger("focus");
            document.activeElement = _ele;
          });

        },
        /**
         * On clicking Escape and clicking outside of the modal window.The widget will close.
         */
        closeCommentDialog: function (event, callbackFun) {
          var unbindWidgetFromBody = false,
              _e                   = event || window.event;
          if (_e.type === 'popstate' || _e.type === 'hashchange') {
            unbindWidgetFromBody = true;
          }
          if ((_e.type === 'keyup' || _e.type === 'keydown') &&
              (_e.keyCode === 27 || _e.which === 27)) {
            var _ele = $('.esoc-social-comment-attachment').next(".binf-popover:visible").length ===
                       0 ?
                       $('.esoc-social-attachment-file').next(".binf-popover:visible") :
                       $('.esoc-social-comment-attachment').next(".binf-popover:visible");
            var emojiEle = $(".esoc-social-comment-emoticon").siblings(
                ".binf-popover.emoji-menu:visible");
            if (_ele.is(':visible')) {
              _ele.binf_popover('hide');
              _ele.hide();
              _ele.prev().trigger("focus");
              _e.stopImmediatePropagation();
            } else if (emojiEle.length) {
              if (event && event.data && event.data.util && event.data.util.emojiObj) {
                event.data.util.emojiObj.hide();
                delete event.data.util.emojiObj;
              }
            } else {
              if (!$('.binf-modal-dialog').is(':visible')) {
                unbindWidgetFromBody = true;
              }
              if ($('#esoc-social-dialog').is(':visible')) {
                $(this).find('.esoc-social-dialog-cancel-button').trigger('click');
              }
              if (!$('#esoc-social-dialog').is(':visible') && $('.cs-dialog').is(':visible')) {
                unbindWidgetFromBody = true;
              }
              if (unbindWidgetFromBody) {
                if ($(document.body).hasClass('binf-modal-open') &&
                    $(document.body).hasClass('binf-comment-dialog-open')) {
                  $(document.body).removeClass('binf-modal-open');
                  $(document.body).removeClass('binf-comment-dialog-open');
                } else if ($(document.body).hasClass('binf-comment-dialog-open')) {
                  $(document.body).removeClass('binf-comment-dialog-open');
                } else {
                  $(document.body).addClass('binf-modal-open');
                }
                $(document).off(_e.type);
                $("[id^='esoc-social-comment-widget-mask_']").removeAttr('tabindex');
                $(".cs-expanded.activityfeed-expand.esoc.cs-dialog.binf-modal.binf-fade.binf-in").attr(
                    'tabindex', '-1');
                $(".esoc-user-widget-dialog.cs-dialog.binf-modal.binf-fade.binf-in").attr(
                    'tabindex',
                    '-1').prop("disabled", false);
                var dialogOptions = _e.data.dialogOptions;
                if (dialogOptions) {
                  var element = dialogOptions.currentTarget;
                  if (_e.type === 'keydown') {
                    $(element).on('keyup', function (e) {
                      if ($(element).is(':focus')) {
                        $(element).off('keyup');
                        e.stopPropagation();
                      }
                    });
                  }
                  if (element) {
                    $(element).trigger("focus");
                    setTimeout(function () {
                      $(element).trigger("focus");
                    }, 1);
                  }
                }
              }
            }
          }
          if (!$(_e.target).closest('.esoc-socialactions-getcomments').length &&
              _e.type === 'click') {
            if (!($(_e.target).closest('[id*=esoc-social-comment-widget]').length &&
                !$(_e.target).closest('[id*=esoc-social-comment-widget-mask_]').length) &&
                !$(_e.target).closest('[class*=ui-autocomplete]').length &&
                !$('#esoc-social-dialog').is(':visible') && !$("#mdAlert").is(':visible')) {
              unbindWidgetFromBody = true;
            }
          }
          if (unbindWidgetFromBody && _e.data && _e.data.dialogOptions &&
              _e.data.dialogOptions.commentsHeaderView) {
            _e.data.dialogOptions.commentsHeaderView.disengageModalKeyboardFocusOnClose();
            delete _e.data.dialogOptions.commentsHeaderView;
          }
          unbindWidgetFromBody ?
          _e.data.callbackFun(_e.data.dialogOptions) : "";
          if (_e.keyCode === 27 || _e.which === 27) {
            if ($(".cs-dialog").length > 0) {
              $(".cs-dialog").eq(0).trigger("focus");
            }
          }
          $(".esoc-acitivityfeed-collection").css("overflow", "");
        },
        /**
         *    open file browse window,
         *        if shortcut is disabled and desktop attachments is enabled ,
         *        if no attachment is added yet.
         *    @param args = {event, popoverSource, inputElement, socialActions}
         */
        showBrowsePopup: function (event, popoverSource, inputElement, socialActions) {
          if (!socialActions.shortcutsEnabled && socialActions.attachementsEnabled &&
              inputElement.val().length === 0) {
            this.selectAttachment(event, inputElement);
          }
        },
        /**
         *    Triggers click event on file type element to open file browse window.
         *    @param args = {event,inputElement}
         */
        selectAttachment: function (event, inputElement) {
          event.preventDefault();
          event.stopPropagation();
          inputElement.trigger("click");
        },
        /**
         * Resets the attachment input element
         * @param inputElement
         * @param socialActions
         */
        resetAttachmentInput: function (inputElement, socialActions) {
          if (inputElement.length > 0) {
            inputElement.val("");
            if (inputElement[0].files && navigator.appVersion &&
                navigator.appVersion.indexOf("MSIE 10") !== -1) {
              inputElement.wrap('<form>').parent('form').trigger('reset');
              inputElement.unwrap();
              inputElement[0].files[0] = '';
            }
            if (socialActions.attachementsEnabled && socialActions.shortcutsEnabled &&
                inputElement[0].files) {
              inputElement.remove();
            }
          }
        },
        /**
         *    Resets the popup based on document attachment permissions.
         *    @param args = { event, popoverSource, inputElement, socialActions }
         */
        resetAttachmentPopup: function (event, popoverSource, inputElement, socialActions) {
          this.resetAttachmentInput(inputElement, socialActions);
          popoverSource.attr('data-binf-original-title', '');
          popoverSource.attr('data-binf-content', '');
          if (socialActions.attachementsEnabled && socialActions.shortcutsEnabled) {
            var _e = event || window.event;
            _e.preventDefault();
            _e.stopPropagation();
            popoverSource.binf_popover('show');
            $(".esoc-social-comment-dialog-att-minheight").removeClass(
                "esoc-social-comment-dialog-att-minheight");
            $(".esoc-social-comment-widget").addClass("esoc-social-comment-dialog-minheight");
          } else {
            popoverSource.binf_popover('hide');
            popoverSource.binf_popover('destroy');
            $(".esoc-social-comment-dialog-att-minheight").removeClass(
                "esoc-social-comment-dialog-att-minheight");
            $(".esoc-social-comment-dialog-minheight").removeClass(
                "esoc-social-comment-dialog-minheight");
          }
          popoverSource.trigger("focus");
          this.setCommentDialogPointer();
        },
        /**
         *    Hides the popup based on attachment permissions.
         *    @param args = { popoverSource, inputElement, socialActions }
         */
        hideAttachmentPopup: function (popoverSource, inputElement, socialActions) {
          this.resetAttachmentInput(inputElement, socialActions);
          popoverSource.attr('data-binf-original-title', '');
          popoverSource.attr('data-binf-content', '');
          popoverSource.binf_popover('hide');
          if (socialActions !== undefined && socialActions.attachementsEnabled &&
              !socialActions.shortcutsEnabled) {
            popoverSource.binf_popover('destroy');
          }
          $(".esoc-social-comment-dialog-minheight").removeClass(
              "esoc-social-comment-dialog-att-minheight");
          this.setCommentDialogPointer();
        },
        /**
         *    Shows attachment popover based on permissions
         *    @param args = {attachmentIcon, args}
         */
        showAttachmentPopOver: function (attachmentIcon, args) {
          if (args.socialActions !== undefined && args.socialActions.attachementsEnabled &&
              args.socialActions.shortcutsEnabled) {
            this.showAttachFilesPopOver(attachmentIcon, args);
          } else {
            var that = this;
            attachmentIcon.off("click").on("click", function (e) {
              var desktopAttachmentInput = $("#" + args.desktopAttachmentInputId);
              if (!args.socialActions.attachementsEnabled && args.socialActions.shortcutsEnabled) {
                if (args.shortcutIdHolder.val().length === 0) {
                  that.hideAttachmentPopup(attachmentIcon, desktopAttachmentInput,
                      args.socialActions);
                  that.openTargetPicker(attachmentIcon, args);
                }
              } else {
                if (desktopAttachmentInput.val().length === 0) {
                  that.hideAttachmentPopup(attachmentIcon, desktopAttachmentInput,
                      args.socialActions);
                }
                desktopAttachmentInput.off("change").on("change", function (e) {
                  if (desktopAttachmentInput.val().length > 0) {
                    that.showSelectedAttachmentPopOver(attachmentIcon, args);
                  }
                });
                that.showBrowsePopup(e, attachmentIcon, desktopAttachmentInput, args.socialActions);
              }
              $('.esoc-social-comment-attachment-header').attr('title',
                  that.commonUtil.lang.attachFile);
              $('.esoc-social-comment-attachment').attr('title', that.commonUtil.lang.attachFile);
            });
          }
        },
        showAttachFilesPopOver: function (popoverTarget, args) {
          var that          = this,
              id            = args.id,          
              uniqueId      = args.uniqueId,
              contentparams = {
                "attachFilesPopover": true,
                "id": id,
                "fromContentServer": this.commonUtil.lang.fromContentServer,
                "fromYourDesktop": this.commonUtil.lang.fromYourDesktop,
                "desktopAttachmentInputId": args.desktopAttachmentInputId
              },
              titleparams   = {
                "popoverTitle": this.commonUtil.lang.attachFile
              },
              content       = this.attachmentPopoverTemplate(contentparams),
              title         = this.attachmentPopoverTemplate(titleparams);
          popoverTarget.binf_popover({
            content: content,
            title: title,
            delay: {"show": 100}, //set some delay to the popovers because In Desktop
            // applications like SAP server will take some time for loading a images.
            placement: function (tip, element) { //$this is implicit           
              var offset          = getElementOffset($(element)),
                  elementPos      = offset.top,
                  containerpos    = getElementOffset($("#esoc-social-comment-container")).top,
                  containerHeight = $("#esoc-social-comment-container").height(),
                  _tempElement    = $('<div/>').attr("style", "display:block; left:-5000px;")
                      .addClass("esoc-temp-attach-div")
                      .append(popoverTarget.data("binf.popover").tip());
              $(tip).addClass("esoc-social-attachment-popover");
              $("#esoc-social-comment-input-holder-" + uniqueId).append(_tempElement);
              var attachmentHeight = this.$tip.height();
              _tempElement.remove();
              var position = containerHeight - (elementPos - containerpos),
                  retValue = "bottom";
              if ($(element).hasClass("esoc-social-attachment-file-alone")) {
                if (i18n.settings.rtl) {
                  retValue = "left";
                } else {
                  retValue = "right"; // If RTL is enabled this value should become 'left'

                }

              } else if (containerHeight > position + attachmentHeight &&
                         position < attachmentHeight) {
                retValue = "top";
              }
              var commentContainer = $("#esoc-social-comment-container");
              var classAdd = "";
              if (popoverTarget.hasClass("esoc-social-attachment-file-alone")) {
                classAdd = "status-attachment-alone-init-min-height";
              } else if (popoverTarget.hasClass("comment esoc-social-attachment-file")) {
                classAdd = "status-attachment-init-min-height";
              } else if (popoverTarget.parent().attr('id') === "esoc-social-edit-comment-icons-" +
                         id) {
                classAdd = "esoc-edit-init-min-height";
              }
              if (commentContainer.find(".esoc-social-comment-list-item").length <= 1) {
                commentContainer.find(".esoc-social-comment-list-item").addClass(classAdd);
              } else {
                commentContainer.find(".esoc-social-comment-list-item").removeClass(
                    "status-attachment-init-min-height status-attachment-alone-init-min-height esoc-edit-init-min-height");
              }
              return retValue;
            }
          });

          popoverTarget.on('shown.binf.popover', function (e) {
            var desktopAttachmentInput = $("#" + args.desktopAttachmentInputId);
            $('#esoc-social-attachment-desktop-' +
              id).off("click touchstart").on("click touchstart", function (e) {
              desktopAttachmentInput.val("");
              e.stopPropagation();
              desktopAttachmentInput.trigger('click');
            });
            desktopAttachmentInput.off("change").on("change", function (e) {
              if (!args.attachFiles) {
                if (desktopAttachmentInput.val().length > 0) {
                  that.showSelectedAttachmentPopOver(popoverTarget, args);
                }
              } else {
                if (desktopAttachmentInput.val().length > 0) {
                  desktopAttachmentInput.appendTo(popoverTarget);
                  args.itemview.uploadAttachment();
                }
              }
            });
            $('#esoc-social-attachment-cs-' + id).off("click").on("click",
                function (e) {
                  that.openTargetPicker(popoverTarget, args);
                });
            $(".esoc-social-comment-widget").addClass("esoc-social-comment-dialog-minheight");
            that.setCommentDialogPointer();
          });
          this.hidePopOvers();
        },
        /**
         *    Opens target picker
         *    @param args = {popoverTarget, args}
         */
        openTargetPicker: function (popoverTarget, args) {
          var that       = this,
              nodePicker = new NodePicker({
                connector: args.connector,
                dialogTitle: this.commonUtil.lang.targetPickerTitle,
                resolveShortcuts: true
              });
          nodePicker.show().done(function (response) {
            if (response.nodes.length) {
              var node = response.nodes[0];
              args.node = node;
              if (args.shortcutIdHolder.length > 0) {
                args.shortcutIdHolder.val(args.node.get("id"));
                if (!args.attachFiles) {
                  that.showSelectedShortcutPopOver(popoverTarget, args);
                } else {
                  args.itemview.uploadAttachment();
                }
              } else {
                that.showSelectedShortcutPopOver(popoverTarget, args);
              }
            }
            $('.esoc-social-comment-attachment-header').attr('title',
                that.commonUtil.lang.attachFile);
            $('.esoc-social-comment-attachment').attr('title', that.commonUtil.lang.attachFile);
          }).always(function () {
            popoverTarget.trigger("focus");
          });
        },
        hidePopOvers: function () {
          var that = this;
          $('.esoc-social-comment-widget').on('click', function (e) {
            $('.esoc-social-comment-widget [aria-describedby]').each(function () {
              if (!$(this).is(e.target) && $(this).has(e.target).length === 0 &&
                  $('.binf-popover').has(e.target).length === 0 &&
                  !$(e.target).is($(".esoc-social-comment-load-more:last"))) {
                $(this).binf_popover('hide');
                $(".esoc-social-comment-dialog-minheight").removeClass(
                    "esoc-social-comment-dialog-minheight");
                $(".esoc-social-comment-dialog-att-minheight").removeClass(
                    "esoc-social-comment-dialog-att-minheight");
                that.setCommentDialogPointer();
              }
            });
          });
        },
        showSelectedAttachmentPopOver: function (popoverTarget, args) {
          var desktopAttachmentInput = $("#" + args.desktopAttachmentInputId),
              file                   = desktopAttachmentInput[0].files[0],
              that                   = this,
              size                   = '0 B',
              id                     = args.id,
              titleparams,
              contentparams;
          if (file.size !== 0) {
            var i = Math.floor(Math.log(file.size) / Math.log(1024));
            size = Math.ceil(file.size / Math.pow(1024, i)) + ' ' +
                   ['B', 'KB', 'MB', 'GB', 'TB'][i];
          }
          if (args.socialActions.attachementsEnabled && args.socialActions.shortcutsEnabled &&
              desktopAttachmentInput.length > 0) {
            desktopAttachmentInput.appendTo(popoverTarget);
          }

          var fileMimeType = file.type;
          if (fileMimeType === "") {
            var fileName = file.name;
            var fileExtn = fileName.split('.').pop().toLowerCase();
            //Except opera other browsers are not giving mime type info along with file object, hence the following hack fix for now.
            if ($.inArray(fileExtn, ["zip", "rar", "war", "jar"]) > -1) {
              fileMimeType = "application/zip";
            } else if ($.inArray(fileExtn, ["json", "properties"]) > -1) {
              fileMimeType = "text/plain";
            }
          }
          var virtualModel = {
            attributes: {
              "type": 144
            },
            "mime_type": fileMimeType,
            "container": false,
            get: function (key) {
              return this[key];
            }
          };
          contentparams = {
            "attachmentPopover": true,
            "id": id,
            "filesize": size,
            "filename": file.name,
            "filemimetypeicon": NodeSpriteCollection.findClassByNode(virtualModel),
            "deletetitle": this.commonUtil.lang.deleteComment
          };

          titleparams = {
            "popoverTitle": this.commonUtil.lang.attachmentPopoverTitle
          };
          var toolTip = this.commonUtil.lang.attachFile;
          popoverTarget.attr('data-binf-original-title',
              this.attachmentPopoverTemplate(titleparams));
          popoverTarget.attr('data-binf-content', this.attachmentPopoverTemplate(contentparams));
          popoverTarget.binf_popover('show');
          popoverTarget.on('shown.binf.popover', function (e) {
            $('.esoc-social-comment-attachment-header').attr('title', toolTip);
            $('.esoc-social-comment-attachment').attr('title', toolTip);
            $('#esoc-social-attachment-delete-icon-' + id).off("click keydown").on("click" +
                                                                                   " keydown",
                function (e) {
                  if ((e.keyCode || e.which) === 32 || e.type === 'click') {
                    that.resetAttachmentPopup(e, popoverTarget, desktopAttachmentInput,
                        args.socialActions);
                  }
                });
            var popOverContent = $("<div />").html(popoverTarget.attr('data-binf-content'));
            if (popOverContent.find(".esoc-social-selected-file").length > 0) {
              $(".esoc-social-comment-dialog-minheight").removeClass(
                  "esoc-social-comment-dialog-minheight");
              $(".esoc-social-comment-widget").addClass("esoc-social-comment-dialog-att-minheight");
            } else {
              $(".esoc-social-comment-dialog-att-minheight").removeClass(
                  "esoc-social-comment-dialog-att-minheight");
              $(".esoc-social-comment-widget").addClass("esoc-social-comment-dialog-minheight");
            }
            that.setCommentDialogPointer();
            $('#esoc-social-attachment-delete-icon-' + id).trigger("focus");
          });
          this.hidePopOvers();
        },
        showSelectedShortcutPopOver: function (popoverTarget, args) {
          var isShortcut   = !!args.node.attributes.original_id ? true : false,
              virtualModel = {
                attributes: {
                  "type": isShortcut ? args.node.attributes.original_id.type
                                     : args.node.get("type")
                },
                "mime_type": isShortcut ? args.node.attributes.original_id.mime_type
                                        : args.node.get("mime_type"),
                "container": isShortcut ? args.node.attributes.original_id.container
                                        : args.node.get("container"),
                get: function (key) {
                  return this[key];
                }
              };

          var that          = this,
              contentparams = {
                "shortcutPopover": true,
                "id": args.node.get("id"),
                "filename": args.node.get("name"),
                "filemimetypeicon": NodeSpriteCollection.findClassByNode(virtualModel),
                "deletetitle": this.commonUtil.lang.deleteComment
              },
              titleparams   = {
                "popoverTitle": this.commonUtil.lang.attachmentPopoverTitle
              };
          if (args.shortcutIdHolder.length > 0) {
            args.shortcutIdHolder.val(contentparams.id);
          }
          var toolTip = that.commonUtil.lang.attachFile;
          popoverTarget.attr('data-binf-original-title',
              this.attachmentPopoverTemplate(titleparams));
          popoverTarget.attr('data-binf-content', this.attachmentPopoverTemplate(contentparams));
          popoverTarget.binf_popover('show');
          popoverTarget.on('shown.binf.popover', function (e) {
            $('.esoc-social-comment-attachment-header').attr('title', toolTip);
            $('.esoc-social-comment-attachment').attr('title', toolTip);
            $('#esoc-social-attachment-delete-icon-' + contentparams.id).off("click keydown").on(
                "click keydown",
                function (e) {
                  if ((e.keyCode || e.which) === 32 || e.type === 'click') {
                    that.resetAttachmentPopup(e, popoverTarget, args.shortcutIdHolder,
                        args.socialActions);
                  }
                });
            $(".esoc-social-comment-dialog-minheight").removeClass(
                "esoc-social-comment-dialog-minheight");
            $(".esoc-social-comment-widget").addClass("esoc-social-comment-dialog-att-minheight");
            that.setCommentDialogPointer();
            $('#esoc-social-attachment-delete-icon-' + contentparams.id).trigger("focus");
          });
          this.hidePopOvers();
        },
        /**
         * Handles ajax call with attachment
         * @param args = {url, type, data {id, status, ATT_ID, replace}, dataType, model}
         */
        updateWithAttachmentAjaxCall: function (args) {
          var url       = args.url,
              type      = args.type,
              data      = args.data,
              that      = args.itemview,
              self      = this,
              commentId = args.commentId,
              feedType  = args.feedType,
              deferred  = $.Deferred();
          $.ajax(that.model.collection.connector.extendAjaxOptions({
            url: url,
            type: type,
            data: data,
            contentType: false,
            crossDomain: true,
            processData: false,
            success: function (data, status, jXHR) {
              that.options.commentConfigOptions.commentAction = true;
              that.model.attributes.text = data.status.text;
              if (data.status.extended_info.attachment_id) {
                that.model.attributes.attachmentCommands = data.status.attachmentCommands;
                that.model.attributes.extended_info.attachment_parent_data_id = data.status.extended_info.object_id;
                that.model.attributes.extended_info.attachment_name = data.status.extended_info.attachment_name;
                that.model.attributes.extended_info.attachment_size = data.status.extended_info.attachment_size;
                that.model.attributes.extended_info.attachment_icon_id = data.status.extended_info.attachment_icon_id;
                that.model.attributes.extended_info.attachment_original_data_id = data.status.extended_info.attachment_original_data_id;
                that.model.attributes.extended_info.attachment_id = data.status.extended_info.attachment_id;
                that.model.attributes.extended_info.attachment_subtype = parseInt(
                    data.status.extended_info.attachment_subtype,
                    10);
                that.model.attributes.extended_info.attachment_mime_type = data.status.extended_info.attachment_mime_type;
                if (that.model.attributes.extended_info.attachment_subtype === 1) {
                  that.model.attributes.extended_info.attachment_original_sub_type = parseInt(
                      data.status.extended_info.attachment_original_sub_type,
                      10);
                  that.model.attributes.extended_info.attachment_original_mime_type = data.status.extended_info.attachment_original_mime_type;
                  that.model.attributes.extended_info.attachment_original_container = data.status.extended_info.attachment_original_container;
                }
              } else {
                that.model.attributes.extended_info.attachment_id = '';
              }
              that.model.attributes.modified_at_iso8601 = self.base.formatFriendlyDateTimeNow(
                  data.status.modified_at_iso8601);
              self.hideMask(that.$el);
              that.render();
              if (that.model.collection.models[that.model.collection.length -
                                               1].attributes.noMoreData === false) {
                $(".esoc-social-reply-seemore:last").show();
              }
              that.showSeeMoreLink(that.$el.find(that.contentTypeElement));
              self.setFocusOnDefaultElement();
              !!that.options.commentConfigOptions.parentCollectionView ?
              that.options.commentConfigOptions.parentCollectionView.triggerMethod(
                  'update:scrollbar') :
              that.options.parentCollectionView.triggerMethod('update:scrollbar');
              deferred.resolve();
            },
            error: function (xhr, status, text) {
              self.hideMask(that.$el);
              var args = {
                parent: ".esoc-social-comment-widget",
                errorContent: xhr.responseJSON ?
                              (xhr.responseJSON.errorDetail ? xhr.responseJSON.errorDetail :
                               xhr.responseJSON.error) :
                              self.lang.defaultErrorMessageForUpdateWithAttachment
              }
              if (feedType === "comment") {
                $(".esoc-comment-attachment").show();
              } else {
                $(".esoc-reply-attachment").show();
              }

              $('[data-binf-original-title]').each(function () {
                if ($('[id^="popover"]').css("display") !== "none") {
                  $(this).binf_popover('hide');
                }
              });
              self.commonUtil.openErrorDialog(args);
              that.showSeeMoreLink(that.$el.find(that.contentTypeElement));
              self.setFocusOnDefaultElement();
              deferred.reject();
            }
          }));
          return deferred.promise();
        },
        /**
         *  jQuery Autosuggestion response.
         */
        triggerAutoCompleteSuggestion: function (suggestionOptions) {
          var that             = this,
              _element         = suggestionOptions.element,
              _appendToElement = suggestionOptions.appendToElement;

          _element.triggeredAutocomplete({
            hidden: '#hidden_inputbox',
            minLength: 2,
            autoFocus: true,
            source: function (request, response) {
              var queryString = request.term,
                  resData     = {};
              if (request.term.split(" ").length > 3 || request.term.split(/\n/g).length !== 1 ||
                  request.term[0] === '@') {
                this.close();
                return false;
              }
              if (!that.namedSessionStorage.get("querystring" + queryString)) {
                resData = that.autoCompleteAjax(suggestionOptions.connector, request);
                that.namedSessionStorage.set("querystring" + queryString, resData);
              } else {
                resData = that.namedSessionStorage.get("querystring" + queryString);
              }

              response($.map(resData, function (item) {
                var userbackgroundcolor = UserAvatarColor.getUserAvatarColor(item);
                return {
                  label: item.first_name && item.last_name ?
                         item.first_name + " " + item.last_name : item.name,
                  value: item.id,
                  initials: item.initials,
                  id: item.name,
                  photo_url: item.photo_url,
                  userbackgroundcolor: userbackgroundcolor,
                  context: suggestionOptions.context
                }
              }));

              if (queryString.length <= 2 || queryString.trim().length > 1) {
                if (!resData.length) {
                  resData = [{
                    label: that.lang.noResults,
                    value: ""
                  }]
                  response($.map(resData, function (item) {
                    return {
                      label: item.label,
                      value: item.value,
                      id: -1
                    }
                  }));
                }
              }
            },
            trigger: "@",
            appendTo: _appendToElement,
            open: function () {
              $('.ui-autocomplete').css('width', $(_appendToElement).width());
            }

          });
        },
        /**
         *  jQuery Autosuggestion response.
         */
        autoCompleteAjax: function (connector, request) {
          var respData = {},
              csBaseUrl = URL.combine(connector.connection.url, "members"),
              queryparam = request.term.length === 1 ? request.term.trim() : request.term;

          $.ajax(connector.extendFetchOptions({
            url: csBaseUrl,
            dataType: "json",
            async: false,
            data: {
              limit: 5,
              where_type: 0,
              query: queryparam
            },
            success: function (res) {
              respData = res.data;
            }
          }));
          return respData;
        },
        //TODO: Moved this method to commonutil and so need to remove this method from
        // here and update its references
        updateQueryStringValues: function (uri, key, value) {
          var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i"); // Alternate RegEx Patter/([?&]z)=([^#&]*)/g
          var separator = uri.indexOf('?') !== -1 ? "&" : "?";
          if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
          }
          else {
            return uri + separator + key + "=" + value;
          }
        },
        createRemoteObject: function (options) {
          var roid         = options.socialActionsInstanse.model.attributes.roid,
              parent_id    = options.socialActionsInstanse.model.attributes.socialactions.ParentID,
              csBaseUrl    = options.socialActionsInstanse.options.connector.connection.url,
              createROIUrl = csBaseUrl + this.commonUtil.REST_URLS.csCreateROI,
              retVal       = {"csid": "", "error": ""},
              self         = this;
          $.ajax(options.socialActionsInstanse.options.connector.extendAjaxOptions({
            url: createROIUrl,
            type: "POST",
            dataType: "json",
            data: {
              name: roid,
              remote_object_id: roid,
              parent_id: parent_id,
              type: self.commonUtil.globalConstants.ROI_OBJECT_TYPE
            },
            async: false,
            success: function (res) {
              retVal.csid = res.id;
            },
            error: function (res) {
              retVal.csid = "";
              retVal.error = res.responseJSON.error;
              var args = {
                parent: ".esoc-social-comment-widget",
                errorContent: res.responseJSON ?
                              (res.responseJSON.errorDetail ? res.responseJSON.errorDetail :
                               res.responseJSON.error) :
                              self.lang.defaultErrorMessageForCreateRemoteObject
              }
              self.commonUtil.openErrorDialog(args);
            }
          }));
          return retVal;
        },
        /**
         * Below function used for toggling between attachment icon and emoji icon.
         * @param args = {_element}
         */
        hidePopover: function (_element) {
          $('.esoc-social-comment-widget [aria-describedby]').each(function () {
            $(this).binf_popover('hide');
          });
        },
        /**
         * Below function used for auto Adjustment of comment widget pointer.
         */
        setCommentDialogPointer: function () {
          this.widgetBaseElement = $(this.widgetBaseElement).width() === 0 ?
                                   $("[data-value=" + $(this.widgetBaseElement).attr("data-value") +
                                     "]") : this.widgetBaseElement;
          var widgetDialog        = $(this.widgetDialog),
              widgetDialogPointer = $(this.widgetDialogPointer),
              widgetBaseElement   = $(this.widgetBaseElement),
              setDialogCenter     = false;
          widgetDialog.css({"position": "absolute", "left": "0", "top": "0"});
          widgetDialogPointer.css({
            "position": "absolute",
            "left": "0",
            "top": "0"
          }).addClass("esoc-socialactions-widget-arrow-left");
          var leftPos = parseInt(widgetBaseElement.width() + 10, 10);
          widgetDialog.position({
            my: "left top",
            at: "left+" + leftPos + " top -" + (widgetBaseElement.parent().height()),
            of: this.widgetBaseElement,
            collision: "flipfit flipfit"
          });
          var widgetDialogLeftPos  = getElementOffset(widgetDialog).left,
              widgetDialogRightPos = getElementOffset(widgetDialog).left + widgetDialog.width(),
              targetElementLeftPos = getElementOffset(widgetBaseElement).left,
              targetElementTopPos  = getElementOffset(widgetBaseElement).top,
              baseWrapsParent      = widgetBaseElement.parent().height() ===
                                     widgetBaseElement.height();
          if (baseWrapsParent) {
            // if the comment icon's height and it's parent element's heights are equal,
            // then comment dialog's top should consider wrapper element's height
            targetElementTopPos = getElementOffset(widgetBaseElement).top +
                                  Math.ceil(widgetBaseElement.height() / 4) + 2;
          }
          if (widgetDialogLeftPos < targetElementLeftPos) {
            widgetDialogPointer.css({
              "position": "absolute",
              "left": widgetDialogRightPos,
              "top": targetElementTopPos
            })
            if (i18n.settings.rtl) {
              widgetDialogPointer.removeClass("esoc-socialactions-widget-arrow-right").addClass(
                  "esoc-socialactions-widget-arrow-left");
            } else {
              widgetDialogPointer.removeClass("esoc-socialactions-widget-arrow-left").addClass(
                  "esoc-socialactions-widget-arrow-right");
            }
            setDialogCenter = parseInt($(widgetDialogPointer).css("left").replace("px", ""), 10) +
                              1 > getElementOffset(widgetBaseElement).left;
          } else {
            widgetDialogPointer.css({
              "position": "absolute",
              "left": widgetDialogLeftPos - 10,
              "top": targetElementTopPos
            });
            if (i18n.settings.rtl) {
              widgetDialogPointer.removeClass("esoc-socialactions-widget-arrow-left").addClass(
                  "esoc-socialactions-widget-arrow-right");
            } else {
              widgetDialogPointer.removeClass("esoc-socialactions-widget-arrow-right").addClass(
                  "esoc-socialactions-widget-arrow-left");
            }
            setDialogCenter = parseInt($(widgetDialogPointer).css("left").replace("px", ""), 10) +
                              1 < (getElementOffset(widgetBaseElement).left + widgetBaseElement.width());
          }
          var widgetDialogBottomPos        = getElementOffset(widgetDialog).top + widgetDialog.height(),
              widgetDialogPointerBottomPos = getElementOffset(widgetDialogPointer).top + 25;
          if (widgetDialogBottomPos < widgetDialogPointerBottomPos) {
            widgetDialog.css("top",
                parseInt(getElementOffset(widgetDialog).top + (baseWrapsParent ? 0 : 20), 10));
          } else {
            if (widgetDialogBottomPos - widgetDialogPointerBottomPos > 20) {
              widgetDialog.css("top",
                  parseInt(getElementOffset(widgetDialog).top - (baseWrapsParent ? 0 : 20), 10));
            }
          }
          if (setDialogCenter) {
            widgetDialog.css({"left": $(window).width() / 2 - widgetDialog.width() / 2});
            widgetDialogPointer.css({"opacity": "0"});
          } else {
            widgetDialogPointer.css({"opacity": "1"});
          }
        },
        /**
         * Check the element is valid and has value
         * @param args = {_element}
         */
        isValidInput: function (_element) {
          if (_element !== undefined && _element.val() !== undefined && _element.val().length > 0) {
            return true;
          } else {
            return false;
          }
        },

        getUser: function (agrs) {
          var userWidget = new UserWidget(agrs);
          return userWidget;
        },
        /**
         * Apply masking for given element
         * @param args = {_element}
         */
        showMask: function (_element) {
          _element.append(this.maskingTemplate());
          _element.find(".esoc-comment-masking-container").addClass("esoc-progress-display");
        },
        /**
         * Removes masking for given element
         * @param args = {_element}
         */
        hideMask: function (_element) {
          _element.find(".esoc-comment-masking-container").remove();
        },
        onMentionNameEdit: function (event) {
          var children = $(event.currentTarget).children();
          for (var i = 0; i < children.length; i++) {
            if (($(event.currentTarget).children()[i].tagName === 'DIV') ||
                ($(event.currentTarget).children()[i].tagName === 'P')) {
              if ($(event.currentTarget).children()[i].textContent.charAt(0) === '@') {
                $(event.currentTarget).children()[i].innerHTML = " " +
                                                                 $(event.currentTarget).children()[i].innerHTML;
                this.setCursorPosition(event, i);
              }
            }
            if (typeof InstallTrigger !== 'undefined') {
              if ($(event.currentTarget).children('br').length !== 0) {
                var brTagValue = $(event.currentTarget).children('br').get(i);
                if (brTagValue && brTagValue.nextSibling &&
                    brTagValue.nextSibling.textContent.charAt(0) ===
                    '@') {
                  $(event.currentTarget).children('br').get(i).nextSibling.textContent =
                      " " + $(event.currentTarget).children('br').get(i).nextSibling.textContent;
                  this.setCursorPosition(event, i);
                }
              }
            }
          }
        },
        setCursorPosition: function (event, n) {
          var div_id = event.currentTarget.id;
          var el = document.getElementById(div_id);
          var range = document.createRange();
          var sel = window.getSelection();
          if (typeof InstallTrigger !== 'undefined') {
            range.setStart($(event.currentTarget).children('br').get(n).nextSibling, 2);
          } else {
            range.setStart(el.children[n], 1);
          }
          sel.removeAllRanges();
          sel.addRange(range);
          $(el).trigger("focus");
        },
        /*
         * sets focus on default element, this element focus is set to support tabbing
         */
        setFocusOnDefaultElement: function (e) {
          $("#esoc-social-focus-element").trigger("focus");
        },

        /**
         * Creates button element in the contenteditable div for mentions  to get chicklet
         * functionality
         *
         * @param emojiArea
         */
        createChickletForMentions: function (emojiArea) {
          var mentions = emojiArea.find("span.esoc-widget-user-display-name");
          for (var i = 0; i < mentions.length; i++) {
            var j, currentMention, imgElements, textNode;
            currentMention = $(mentions[i]);
            imgElements = currentMention.find("img");
            for (j = 0; j < imgElements.length; j++) {
              textNode = document.createTextNode($(imgElements[j]).attr("alt"));
              mentions[i].replaceChild(textNode, imgElements[j]);
            }
            if (typeof InstallTrigger !== 'undefined') { //Firefox
              var spanTag = $('<span />');
              spanTag.css("visibility", "hidden");
              spanTag.addClass('esoc-span-mention');
              spanTag[0].innerText = mentions[i].innerHTML;
              document.body.appendChild(spanTag[0]);
              var textBoxWidth = $(spanTag[0]).width() - mentions[i].innerHTML.length;
              document.body.removeChild(spanTag[0]);
              var inputElement = $('<input />');
              inputElement.attr({
                id: 'data-userid',
                type: 'text',
                value: mentions[i].innerHTML,
                disabled: 'true'
              });
              inputElement.addClass('esoc-user-mention');
              inputElement.css("width", textBoxWidth + "px");
              emojiArea[0].replaceChild(inputElement[0], mentions[i]);
            } else { //Other than Firefox
              var buttonElement = $('<input />');
              buttonElement.attr({
                id: $(mentions[i]).attr("data-userid"),
                type: "button",
                value: mentions[i].innerHTML
              });
              buttonElement.addClass('esoc-user-mention');
              emojiArea[0].replaceChild(buttonElement[0], mentions[i]);
            }
          }
          if (typeof InstallTrigger !== 'undefined') { //Firefox
            emojiArea[0].innerHTML = "&nbsp;" + emojiArea[0].innerHTML + "&nbsp;";
          }
        },
        setCursorPositionAtStartOFMention: function (event) {
          if (!!window.chrome && !!window.chrome.webstore) { // Chrome browser
            var range = document.createRange();
            var sel = window.getSelection();
            range.setStart(event.currentTarget, 0);
            sel.removeAllRanges();
            sel.addRange(range);
          }
        },
        applySpaceKeyEvent: function (e) {
          if ((e.keyCode || e.which) === 32) {
            e.preventDefault();
            $(e.currentTarget).trigger("click");
          }
        }
      }
      return Utils;
    });

csui.define('esoc/widgets/socialactions/comment/server.adaptor.mixin',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  "csui/lib/underscore",
  'csui/utils/url',
  "esoc/widgets/socialactions/util"
], function ($, Backbone, _, Url, Util) {
  'use strict';

  var ServerAdaptorMixin = {
    mixin: function (prototype) {
      return _.extend(prototype, {
        makeServerAdaptor: function (options) {
          return this;
        },

        sync: function (method, model, options) {
          switch (method) {
            case 'create':
              _.extend(options, {
                contentType: false,
                crossDomain: true,
                processData: false,
                url: this.connector.connection.url +
                     Util.commonUtil.REST_URLS.csPostCommentRESTUrl
              });
              break;
            case 'delete':
              _.extend(options, {
                url: this.connector.connection.url +
                    this.attributes.actions.deleteAction.href  + "?id=" + this.id
              });
              break;
          }

          return Backbone.Collection.prototype.sync.apply(this, arguments);
        }

      });
    }

  };

  return ServerAdaptorMixin;
});

csui.define('esoc/widgets/socialactions/comment.model',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  'csui/models/mixins/expandable/expandable.mixin',
  'csui/models/mixins/resource/resource.mixin',
  'csui/models/mixins/uploadable/uploadable.mixin',
  'csui/models/mixins/including.additional.resources/including.additional.resources.mixin',
  'esoc/widgets/socialactions/comment/server.adaptor.mixin'
], function ($, Backbone, ExpandableMixin, ResourceMixin, UploadableMixin,
    IncludingAdditionalResourcesMixin, ServerAdaptorMixin) {
  var Comment = Backbone.Model.extend({
    defaults: {
      id: 0,
      data_id: 0,
      created_at: "-",
      modified_at: "",
      text: "-",
      feed_event_type: 0,
      user: {
        name: "-",
        screen_name: "-" /* TODO: for now just giving user display name, need to provide more details here like user profile image,.... */,
        profile_image_url: "-"
      },
      noMoreData: true,
      actions: {},
      extended_info: {}
    },
    constructor: function Comment(attributes, options) {
      Backbone.Model.prototype.constructor.apply(this, arguments);

      this.makeResource(options)
          .makeIncludingAdditionalResources(options)
          .makeUploadable(options)
          .makeExpandable(options)
          .makeServerAdaptor(options);

    },
    isNew: function () {
      return this.id === 0;
    }
  });

  IncludingAdditionalResourcesMixin.mixin(Comment.prototype);
  ExpandableMixin.mixin(Comment.prototype);
  UploadableMixin.mixin(Comment.prototype);
  ResourceMixin.mixin(Comment.prototype);
  ServerAdaptorMixin.mixin(Comment.prototype);

  return Comment;
});
csui.define('esoc/widgets/socialactions/commentscollection/server.adaptor.mixin',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  "csui/lib/underscore",
  'csui/utils/url',
  "csui/utils/base",
  'csui/behaviors/default.action/impl/defaultaction'
], function ($, Backbone, _, Url, Base, DefaultActionController) {
  'use strict';

  var ServerAdaptorMixin = {
    mixin: function (prototype) {
      return _.extend(prototype, {
        makeServerAdaptor: function (options) {
          return this;
        },
        base: Base,
        url: function () {
          return this.getCommentsRESTUrl;
        },
        fetch: function (options) {
          options.params = $.extend(this.defaults.params, options.params);
          var defaultActionController = new DefaultActionController(),
              commands                = {
                commands: defaultActionController.actionItems.getAllCommandSignatures(
                    defaultActionController.commands)
              };
          this.getCommentsRESTUrl = Url.appendQuery(this.defaults.csRESTUrl,
              Url.combineQueryString($.param(options.params), commands));
          Backbone.Collection.prototype.fetch.apply(this, arguments);
        },
        parse: function (response) {
          this.util.commonUtil.globalConstants.MAX_CHAR_LIMIT = (this.maxMessageLength !== undefined &&
                                                                 parseInt(this.maxMessageLength, 10) >
                                                                 0) ?
                                                                parseInt(this.maxMessageLength, 10) :
                                                                (response.config_settings.maxMessageLength ?
                                                                 response.config_settings.maxMessageLength :
                                                                 this.commonUtil.globalConstants.MAX_CHAR_LIMIT);
          var returnData = JSON.parse(JSON.stringify(response.data));
          delete this.defaults.params[this.util.commonUtil.globalConstants.SINCE_ID];
          return this.parseCommentsCollectionResponse(returnData);
        },
        parseCommentsCollectionResponse: function (jsonResponse) {
          for (var response in jsonResponse) {
            var currentObj = jsonResponse[response];
            //remove trailing and leading spaces from text.
            currentObj.text = $.trim(currentObj.text);
            //Begin: convertDateTimeStamp
            currentObj.created_at_iso8601 = this.base.formatFriendlyDateTimeNow(
                currentObj.created_at_iso8601);
            if (currentObj.modified_at_iso8601 !== "" &&
                currentObj.modified_at_iso8601 !== undefined) {
              currentObj.modified_at_iso8601 = this.base.formatFriendlyDateTimeNow(
                  currentObj.modified_at_iso8601);
            }
            //End: convertDateTimeStamp
          }
          return jsonResponse;
        },

        sync: function (method, model, options) {
          return Backbone.Collection.prototype.sync.apply(this, arguments);
        }

      });
    }

  };

  return ServerAdaptorMixin;
});

csui.define('esoc/widgets/socialactions/commentscollection.model',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  "csui/lib/underscore",
  "csui/utils/base",
  'csui/utils/url',
  'csui/utils/namedsessionstorage',
  'csui/behaviors/default.action/impl/defaultaction',
  "esoc/widgets/socialactions/comment.model",
  "esoc/widgets/socialactions/util",
  'csui/models/mixins/expandable/expandable.mixin',
  'csui/models/mixins/resource/resource.mixin',
  'csui/models/mixins/uploadable/uploadable.mixin',
  'csui/models/mixins/including.additional.resources/including.additional.resources.mixin',
  'esoc/widgets/socialactions/commentscollection/server.adaptor.mixin',
  'i18n!esoc/widgets/socialactions/nls/lang'
], function ($, Backbone, _, Base, Url, NamedSessionStorage, DefaultActionController, CommentModel,
    Util, ExpandableMixin, ResourceMixin,
    UploadableMixin, IncludingAdditionalResourcesMixin, ServerAdaptorMixin, Lang) {

  var CommentsCollectionModel = Backbone.Collection.extend({
    defaults: {
      params: {
        data_id: "",
        commands: "default"
      },

      csRESTUrl: ""
    },
    model: CommentModel,
    util: Util,
    namedSessionStorage: new NamedSessionStorage(Util.commonUtil.globalConstants.ESOCIAL_USER_INFO),
    getCommentsRESTUrl: "",
    context: "",
    currentNodeModel: undefined,
    constructor: function CommentsCollectionModel(options) {
      delete this.defaults.params[this.util.commonUtil.globalConstants.MAX_ID];
      delete this.defaults.params[this.util.commonUtil.globalConstants.SINCE_ID];
      this.defaults.params = $.extend(this.defaults.params, options.params);
      this.defaults.params.sort_by_nid = true;
      this.defaults.params.data_id = options.nodeID;
      this.getCommentsRESTUrl = options.connector.connection.url;
      this.context = options.context;

      if (options.statusInfo && options.statusInfo.getStatusUrl) {
        this.getCommentsRESTUrl += options.statusInfo.getStatusUrl;
        this.getCommentsRESTUrl = Util.updateQueryStringValues(this.getCommentsRESTUrl,
            "conversation_id", options.statusInfo.conversation_id);
        this.getCommentsRESTUrl = Util.updateQueryStringValues(this.getCommentsRESTUrl, "item_id",
            options.statusInfo.item_id);
      } else {
        this.getCommentsRESTUrl += this.util.commonUtil.REST_URLS.csGetCommentRESTUrl;
      }
      this.defaults.csRESTUrl = this.getCommentsRESTUrl;
      this.getCommentsRESTUrl += $.param(this.defaults.params);

      // Enable this model for communication with the CS REST API
      if (options && options.connector) {
        options.connector.assignTo(this);
      }

      Backbone.Collection.prototype.constructor.apply(this, arguments);

      this.currentNodeModel = options.currentNodeModel;

      this.makeResource(options)
          .makeIncludingAdditionalResources(options)
          .makeUploadable(options)
          .makeExpandable(options)
          .makeServerAdaptor(options);

    },
    initialize: function () {
    },
    fetchError: function (collection, response) {
      var args = {
        parent: "body",
        errorContent: response.responseJSON ?
                      ( response.responseJSON.errorDetail ? response.responseJSON.errorDetail :
                        response.responseJSON.error) : Lang.defaultErrorMessageCommentsFetch
      };
      Util.commonUtil.openErrorDialog(args);
    }

  });

  IncludingAdditionalResourcesMixin.mixin(CommentsCollectionModel.prototype);
  ExpandableMixin.mixin(CommentsCollectionModel.prototype);
  UploadableMixin.mixin(CommentsCollectionModel.prototype);
  ResourceMixin.mixin(CommentsCollectionModel.prototype);
  ServerAdaptorMixin.mixin(CommentsCollectionModel.prototype);

  return CommentsCollectionModel;
});

csui.define('esoc/widgets/socialactions/socialactions.model',[
  // MVC component support
  'csui/lib/backbone',
  // CS REST API URL parsing and combining
  'csui/utils/url',
  'csui/utils/namedsessionstorage',
  'esoc/widgets/common/util'
], function (Backbone, Url, NamedSessionStorage, CommonUtil) {

  var SocialActionsModel = Backbone.Model.extend({

    // Declare model properties with default values
    defaults: {
      attachementsEnabled: true,
      chatEnabled: true,
      commentingOpen: true,
      commentsEnabled: true,
      likesEnabled: true,
      taggingEnabled: true,
      threadingEnabled: true,
      csid: "",
      rockey: "",
      roid: ""
    },

    connector: "",
    commonUtil: CommonUtil,

    namedSessionStorage: new NamedSessionStorage(),

    // Constructor gives an explicit name to the object in the debugger
    constructor: function SocialActionsModel(attributes, options) {
      this.defaults.rockey = options.rockey;
      this.defaults.roid = options.roid;
      this.defaults.csid = options.csid;
      Backbone.Model.prototype.constructor.apply(this, arguments);

      // Enable this model for communication with the CS REST API
      if (options && options.connector) {
        options.connector.assignTo(this);
      }
    },

    // Computes the REST API URL using the connection options
    url: function () {
      var restUrl = Url.combine(this.connector.connection.url, this.commonUtil.REST_URLS.csGetROI);
      restUrl += "rockey=" + encodeURIComponent(this.attributes.rockey) + "&roid=" +
                 encodeURIComponent(this.attributes.roid);
      if (this.namedSessionStorage.get(this.attributes.rockey + this.attributes.roid) !==
          undefined) {
        restUrl += "&csid=" +
                   this.namedSessionStorage.get(this.attributes.rockey + this.attributes.roid);
      } else if (this.attributes.csid !== "" && this.attributes.csid.toString().length > 0) {
        restUrl += "&csid=" + this.attributes.csid;
      }
      return restUrl;
    },

    // Massage the server response, so that it looks like object attributes
    parse: function (response) {
      // All attributes are placed below the `data` key
      var responseData = JSON.parse(JSON.stringify(response.available_settings));
      if (this.attributes.rockey + this.attributes.roid !== "" &&
          this.attributes.rockey + this.attributes.roid.toString().length > 0) {
        this.namedSessionStorage.set(this.attributes.rockey + this.attributes.roid,
            responseData.CSID);
      }
      var data = {socialactions: responseData};
      return data;
    }

  });

  return SocialActionsModel;

});

csui.define('esoc/widgets/socialactions/reply/server.adaptor.mixin',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  "csui/lib/underscore",
  'csui/utils/url',
  "esoc/widgets/socialactions/util"
], function ($, Backbone, _, Url, Util) {
  'use strict';

  var ServerAdaptorMixin = {
    mixin: function (prototype) {
      return _.extend(prototype, {
        makeServerAdaptor: function (options) {
          return this;
        },

        sync: function (method, model, options) {
          switch (method) {
            case 'create':
              _.extend(options, {
                contentType: false,
                dataType: "text",
                crossDomain: true,
                processData: false,
                url: this.connector.connection.url +
                     Util.commonUtil.REST_URLS.csPostCommentRESTUrl
              });
              break;
            case 'delete':
              _.extend(options, {
                url: this.connector.connection.url +
                    this.attributes.actions.deleteAction.href  + "?id=" + this.id
              });
              break;
          }

          return Backbone.Collection.prototype.sync.apply(this, arguments);
        }

      });
    }

  };

  return ServerAdaptorMixin;
});

csui.define('esoc/widgets/socialactions/reply.model',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  'csui/models/mixins/expandable/expandable.mixin',
  'csui/models/mixins/resource/resource.mixin',
  'csui/models/mixins/uploadable/uploadable.mixin',
  'csui/models/mixins/including.additional.resources/including.additional.resources.mixin',
  'esoc/widgets/socialactions/reply/server.adaptor.mixin'
], function ($, Backbone, ExpandableMixin, ResourceMixin, UploadableMixin,
    IncludingAdditionalResourcesMixin, ServerAdaptorMixin) {
  var Reply = Backbone.Model.extend({
    defaults: {
      id: 0,
      data_id: 0,
      created_at: "-",
      text: "-",
      feed_event_type: 0,
      user: {
        name: "-",
        screen_name: "-" /* TODO: for now just giving user display name, need to provide more details here like user profile image,.... */,
        profile_image_url: "-"
      },
      noMoreData: true,
      actions: {},
      extended_info: {}
    },
    constructor: function Reply(attributes, options) {
      Backbone.Model.prototype.constructor.apply(this, arguments);

      this.makeResource(options)
          .makeIncludingAdditionalResources(options)
          .makeUploadable(options)
          .makeExpandable(options)
          .makeServerAdaptor(options);

    },
    isNew: function () {
      return this.id === 0;
    }
  });

  IncludingAdditionalResourcesMixin.mixin(Reply.prototype);
  ExpandableMixin.mixin(Reply.prototype);
  UploadableMixin.mixin(Reply.prototype);
  ResourceMixin.mixin(Reply.prototype);
  ServerAdaptorMixin.mixin(Reply.prototype);

  return Reply;
});
csui.define('esoc/widgets/socialactions/replycollection/server.adaptor.mixin',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  "csui/lib/underscore",
  "csui/utils/base",
  'csui/utils/url',
  'csui/behaviors/default.action/impl/defaultaction'
], function ($, Backbone, _, Base, Url, DefaultActionController) {
  'use strict';

  var ServerAdaptorMixin = {
    mixin: function (prototype) {
      return _.extend(prototype, {
        makeServerAdaptor: function (options) {
          return this;
        },
        url: function () {
          return this.getRepliesUrl;
        },
        fetch: function (options) {
          if (options && options.params) {
            delete options.params["data_id"];
            delete this.defaults.params["data_id"];
          }
          options.params = $.extend(this.defaults.params, options.params);
          var defaultActionController = new DefaultActionController(),
              commands                = {commands: defaultActionController.actionItems.getAllCommandSignatures(
                  defaultActionController.commands)};
          this.getRepliesUrl = Url.appendQuery(this.defaults.csRESTUrl,
              Url.combineQueryString($.param(options.params), commands));
          Backbone.Collection.prototype.fetch.apply(this, arguments);
        },
        parse: function (response, options) {
          if (response.data[0].reply_count !== undefined && response.data[0].id === options.item_id) {
            if (document.getElementById("reply_link_count_" + options.item_id)) {
              document.getElementById("reply_link_count_" + options.item_id).innerHTML = '(' +
                                                                                         response.data[0].reply_count +
                                                                                         ')';
            } else {
              var countDivId = 'reply_link_count_' + response.data[0].id;
              document.getElementById("reply_link_" + options.item_id).innerHTML += '<span id =' +
                                                                                    countDivId +
                                                                                    '>(' +
                                                                                    response.data[0].reply_count +
                                                                                    ' )</span>';
            }
            options.parentCommentModel.attributes.reply_count = response.data[0].reply_count;
          } else if (document.getElementById("reply_link_count_" + options.item_id)) {
            document.getElementById("reply_link_count_" + options.item_id).innerHTML = "";
          }
          for (var res  in  response.data) { // Iterates   over response to remove the actual comment(i.e. parent of replies) from the list
            if (response.data[res].id === response.data[res].extended_info.conversation_id) {
              response.data.splice(res, 1);
            }
          }
          var returnData = JSON.parse(JSON.stringify(response.data));
          return this.parseReplyCollectionResponse(returnData);
        },
        parseReplyCollectionResponse: function (jsonResponse) {
          for (var response in jsonResponse) {
            var currentObj = jsonResponse[response];
            //remove trailing and leading spaces from text.
            currentObj.text = $.trim(currentObj.text);
            //Begin: convertDateTimeStamp
            currentObj.created_at_iso8601 = Base.formatFriendlyDateTimeNow(
                currentObj.created_at_iso8601);
            if (currentObj.modified_at_iso8601 !== "" &&
                currentObj.modified_at_iso8601 !== undefined) {
              currentObj.modified_at_iso8601 = Base.formatFriendlyDateTimeNow(
                  currentObj.modified_at_iso8601);
            }
          }
          //End: convertDateTimeStamp
          return jsonResponse;
        },
        fetchSuccess: function (collection, response, options) {
          $(".esoc-social-reply-seemore").hide();
          $(options.selEle).parent().parent().next().find('a:first').trigger("focus");
          if (response.data[response.data.length - 1] &&
              response.data[response.data.length - 1].noMoreData === false) {
            $(".esoc-social-reply-seemore:last").show();
          }
          var showMoreLinks = response.data.length > 0 &&
                              response.data[response.data.length - 1].noMoreData;
          for (var colItem in collection.models) {
            collection.models[colItem].attributes.noMoreData = showMoreLinks;
          }
        },
        fetchError: function (collection, response) {
        }

      });
    }

  };

  return ServerAdaptorMixin;
});

csui.define('esoc/widgets/socialactions/replycollection.model',[
  'csui/lib/underscore',
  "csui/lib/jquery",
  "csui/lib/backbone",
  'csui/utils/url',
  'csui/behaviors/default.action/impl/defaultaction',
  'csui/utils/contexts/factories/connector',
  "esoc/widgets/socialactions/reply.model",
  "esoc/widgets/common/util",
  'csui/models/mixins/expandable/expandable.mixin',
  'csui/models/mixins/resource/resource.mixin',
  'csui/models/mixins/uploadable/uploadable.mixin',
  'csui/models/mixins/including.additional.resources/including.additional.resources.mixin',
  'esoc/widgets/socialactions/replycollection/server.adaptor.mixin'
], function (_, $, Backbone, Url, DefaultActionController, ConnectorFactory, ReplyModel, CommonUtil,
    ExpandableMixin, ResourceMixin, UploadableMixin, IncludingAdditionalResourcesMixin, ServerAdaptorMixin) {

  var ReplyCollectionModel = Backbone.Collection.extend({
    defaults: {
      params: {},
      csRESTUrl: ""
    },
    model: ReplyModel,
    thisjQuery: $,
    commonUtil: CommonUtil,
    constructor: function ReplyCollectionModel(options) {
      options.connector = options.connector || options.context.getObject(ConnectorFactory);
      delete this.defaults.params[this.commonUtil.globalConstants.MAX_ID];
      delete this.defaults.params[this.commonUtil.globalConstants.SINCE_ID];
      this.defaults.params = $.extend(this.defaults.params, options.params);
      this.defaults.params.sort_by_nid = true;
      this.getRepliesUrl = options.connector.connection.url;
      this.getRepliesUrl += options.getRepliesUrl;
      this.defaults.csRESTUrl = this.getRepliesUrl;
      this.getRepliesUrl += $.param(this.defaults.params);

      // Enable this model for communication with the CS REST API
      if (options && options.connector) {
        options.connector.assignTo(this);
      }

      Backbone.Collection.prototype.constructor.apply(this, arguments);

      this.makeResource(options)
          .makeIncludingAdditionalResources(options)
          .makeUploadable(options)
          .makeExpandable(options)
          .makeServerAdaptor(options);

    },
    initialize: function () {
    }
  });

  IncludingAdditionalResourcesMixin.mixin(ReplyCollectionModel.prototype);
  ExpandableMixin.mixin(ReplyCollectionModel.prototype);
  UploadableMixin.mixin(ReplyCollectionModel.prototype);
  ResourceMixin.mixin(ReplyCollectionModel.prototype);
  ServerAdaptorMixin.mixin(ReplyCollectionModel.prototype);

  return ReplyCollectionModel;
});

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/socialactions/reply',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <span class=\"esoc-social-comment-timestamp\">\r\n              <span class=\"esoc-social-comment-timestamp-ago\"></span>\r\n              <span class=\"esoc-social-comment-blue\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.modifiedAt : stack1), depth0))
    + "</span>\r\n              <span class=\"esoc-social-timestamp-text\">"
    + this.escapeExpression(((helper = (helper = helpers.modified_at_iso8601 || (depth0 != null ? depth0.modified_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"modified_at_iso8601","hash":{}}) : helper)))
    + "</span>\r\n            </span>\r\n";
},"3":function(depth0,helpers,partials,data) {
    var helper;

  return "            <span\r\n                class=\"esoc-social-comment-timestamp esoc-social-timestamp-text\">"
    + this.escapeExpression(((helper = (helper = helpers.created_at_iso8601 || (depth0 != null ? depth0.created_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"created_at_iso8601","hash":{}}) : helper)))
    + "</span>\r\n";
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <a href=\"javascript:void(0);\"\r\n               class=\"esoc-social-comment-button esoc-social-comment-icon-edit\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\"></a>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <div class=\"esoc-social-comment-icon-spacer\"></div>\r\n            <a href=\"javascript:void(0);\"\r\n               class=\"esoc-social-comment-button esoc-social-reply-delete-confirm esoc-social-comment-icon-delete\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteReply : stack1), depth0))
    + "\" data-binf-toggle=\"modal\"\r\n               data-binf-target=\"#esoc-social-dialog\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteReply : stack1), depth0))
    + "\"></a>\r\n";
},"9":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <div class=\"esoc-social-comment-icon-spacer\"></div>\r\n            <a href=\"javascript:void(0);\"\r\n               class=\"esoc-social-comment-button esoc-social-comment-icon-hide\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.hide : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.hide : stack1), depth0))
    + "\"></a>\r\n";
},"11":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(12, data, 0),"inverse":this.program(15, data, 0)})) != null ? stack1 : "");
},"12":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div id=\"esoc-social-reply-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n             class=\"binf-col-lg-8 binf-col-md-8 binf-col-sm-10 binf-col-xs-10 esoc-social-attachment\">\r\n          <span class=\"csui-icon-group esoc-social-attachment-icon\"\r\n                title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">\r\n            <a href=\"javascript:void(0);\" id=\"esoc-social-selected-file-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2\r\n                  "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" />\r\n            <a href=\"javascript:void(0);\" class=\"csui-icon csui-icon-shortcut-overlay\"></a>\r\n          </span>\r\n\r\n          <div class=\"binf-col-lg-9 binf-col-md-9 binf-col-sm-9 binf-col-xs-9 esoc-social-attachment-name\">\r\n            <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-download\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "</a>\r\n          </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.addshortcut : stack1),{"name":"if","hash":{},"fn":this.program(13, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n";
},"13":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <a href=\"javascript:void(0);\" id=\"esoc-social-reply-attachment-icon-delete-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n               class=\"binf-col-lg-1 binf-col-md-1 binf-col-sm-1 binf-col-xs-1 reply esoc-social-reply-attachment-icon-delete\"\r\n               data-binf-toggle=\"modal\" data-binf-target=\"#esoc-social-dialog\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteReply : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteReply : stack1), depth0))
    + "\"></a>\r\n";
},"15":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.documentAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(16, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"16":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div id=\"esoc-social-reply-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n             class=\"binf-col-lg-8 binf-col-md-8 binf-col-sm-10 binf-col-xs-10 esoc-social-attachment\">\r\n          <a href=\"javascript:void(0);\"\r\n             class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2 esoc-social-attachment-icon "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\"></a>\r\n\r\n          <div class=\"binf-col-lg-7 binf-col-md-7 binf-col-sm-7 binf-col-xs-7 esoc-social-attachment-name\">\r\n            <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-download\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "</a>\r\n          </div>\r\n          <div\r\n              class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2 esoc-social-attachment-size\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_size : stack1), depth0))
    + "</div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.addattachment : stack1),{"name":"if","hash":{},"fn":this.program(13, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n      ";
},"18":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.actions.addattachment || this.actions.addshortcut",{"name":"xif","hash":{},"fn":this.program(19, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"19":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <div class=\"esoc-social-reply-list-actions binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n          <span class=\"esoc-reply-attachment\">\r\n            <a class=\"reply esoc-social-attachment-file\" href=\"javascript:void(0)\" data-html=\"true\"\r\n               data-binf-placement=\"bottom\"> "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachFile : stack1), depth0))
    + " </a>\r\n          </span>\r\n        </div>\r\n";
},"21":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "  <div id=\"show_more_"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <a href=\"javascript:void(0);\" class=\"esoc-social-reply-seemore\"\r\n       style=\"display:none\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.seeMoreRepiles : stack1), depth0))
    + "</a>\r\n  </div>\r\n";
},"23":function(depth0,helpers,partials,data) {
    var helper;

  return "  <input type=\"file\" id=\"esoc-social-replyedit-desktop-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" name=\"AddDesktopDoc\"\r\n         style=\"display:none\" /><input type=\"file\"\r\n                                       id=\"esoc-social-replylist-desktop-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n                                       name=\"AddDesktopDoc\" style=\"display:none\" />\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-comment-body-divider\"></div>\r\n<div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-comment-list-divider\"></div>\r\n<div class=\"esoc-profileimg-block\">\r\n  <span class=\"esoc-userprofile-img\">\r\n    <img class=\"esoc-userprofile-img-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.user : depth0)) != null ? stack1.id : stack1), depth0))
    + " binf-img-circle\" src=\"\"></img>\r\n  </span>\r\n</div>\r\n<div class=\"esoc-commentinfo-block-wrapper binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div class=\"esoc-commentinfo-block binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div class=\"esoc-social-comment-details\">\r\n      <div class=\"esoc-social-comment-user-details binf-col-lg-10 binf-col-md-10 binf-col-sm-10 binf-col-xs-10\">\r\n        <span class=\"esoc-user-widget\"></span>\r\n        <span class=\"esoc-social-timestamp\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.modified_at_iso8601 : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + "        </span>\r\n      </div>\r\n      <div class=\"esoc-social-comment-icon-holder binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2\">\r\n        <div class=\"esoc-social-comment-icon-holder esoc-social-comment-icon-holder-inner\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.edit : stack1),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.deleteAction : stack1),{"name":"if","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.hide : stack1),{"name":"if","hash":{},"fn":this.program(9, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div class=\"binf-alert binf-alert-danger binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-warning\"\r\n         role=\"alert\"></div>\r\n    <div class=\"esoc-extended-view-mode\">\r\n      <div\r\n          class=\"esoc-social-reply-data esoc-social-reply-comment-data esoc-social-comment-text binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"\r\n          data-id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"text","hash":{}}) : helper)))
    + "</div>\r\n      <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n         class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n        <span class=\"icon-arrow-down\"></span></a>\r\n      <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n         class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n        <span class=\"icon-arrow-up\"></span></a>\r\n    </div>\r\n    <div id=\"esoc-social-reply-input-holder-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-social-reply-input-holder binf-col-lg-8\r\n    binf-col-md-8 binf-col-sm-7 binf-col-xs-5\">\r\n            <textarea class=\"esoc-social-reply-data-textarea esoc-social-reply-data-textarea-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n                      placeholder=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.writeAComment : stack1), depth0))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"text","hash":{}}) : helper)))
    + "</textarea>\r\n\r\n      <div id=\"esoc-suggestion-reply-item_"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"></div>\r\n    </div>\r\n\r\n    <div class=\"esoc-social-reply-icons-container binf-col-lg-4 binf-col-md-4 binf-col-sm-5 binf-col-xs-7\">\r\n      <div class=\"esoc-social-edit-icons\" id=\"esoc-social-edit-reply-icons-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">\r\n        <a href=\"javascript:void(0);\" id=\"esoc-social-reply-edit-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n           class=\"esoc-social-comment-attachment\" data-html=\"true\" data-binf-placement=\"bottom\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachFile : stack1), depth0))
    + "\"\r\n        ></a>\r\n        <a href=\"javascript:void(0);\"\r\n           class=\"esoc-social-comment-emoticon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + " esoc-social-comment-emoticon esoc-social-reply-emoticon\"\r\n           id=\"esoc-social-reply-emoticon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\"></a>\r\n      </div>\r\n    </div>\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_id : stack1),{"name":"if","hash":{},"fn":this.program(11, data, 0),"inverse":this.program(18, data, 0)})) != null ? stack1 : "")
    + "\r\n    <div class=\"esoc-social-reply-list-update binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <button class=\"esoc-social-reply-update binf-btn binf-btn-primary\">\r\n        "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "\r\n      </button>\r\n      <button class=\"esoc-social-reply-cancel binf-btn binf-btn-default\">\r\n        "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "\r\n      </button>\r\n      <span class=\"esoc-social-reply-hidden-text\">"
    + this.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"text","hash":{}}) : helper)))
    + "</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.noMoreData : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(21, data, 0)})) != null ? stack1 : "")
    + "<span class=\"esoc-social-reply-delete\"></span>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.actions.addattachment && !this.actions.addshortcut",{"name":"xif","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "<input type=\"hidden\" id=\"esoc-social-reply-cs-shortcut-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "-attachfiles\" value=\"\" /><input\r\n    type=\"hidden\" id=\"esoc-social-reply-cs-shortcut-edit-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" value=\"\" />\r\n<div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-comment-body-divider\"></div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_socialactions_reply', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/socialactions/replylist.view',[
  'require',
  'csui/lib/jquery',
  'csui/lib/backbone',
  'csui/lib/underscore',
  'csui/lib/marionette',
  'csui/lib/moment',
  'csui/lib/handlebars',
  'csui/utils/contexts/factories/connector',
  'i18n!esoc/widgets/socialactions/nls/lang',
  'hbs!esoc/widgets/socialactions/reply',
  'esoc/widgets/userwidget/userwidget',
  'esoc/widgets/socialactions/util',
  'csui/utils/url',
  'csui/utils/nodesprites',
  'csui/utils/namedsessionstorage',
  'esoc/widgets/userwidget/util',
  'csui/lib/handlebars.helpers.xif'
], function (require, $, Backbone, _, Marionette, Moment, Handlebars, ConnectorFactory, lang,
    ReplyTemplate, UserWidget, Util, Url, NodeSpriteCollection, NamedSessionStorage,
    UserWidgetUtil) {

  var ReplyListItem = Marionette.ItemView.extend({
    tagName: "li",
    className: 'esoc-social-reply-list-item binf-col-lg-12 col-md-12 binf-col-sm-12 binf-col-xs-12',
    momentJS: Moment,
    util: Util,
    namedSessionStorage: new NamedSessionStorage(Util.commonUtil.globalConstants.ESOCIAL_USER_INFO),
    template: ReplyTemplate,
    templateHelpers: function () {
      var mimeTypeClass = "", objReplyModel, subType;
      if (this.model.attributes && this.model.attributes.extended_info &&
          this.model.attributes.extended_info.attachment_subtype) {
        objReplyModel = this.model;
        mimeTypeClass = "csui-icon mime_document";
        subType = this.model.attributes.extended_info.attachment_subtype;
        objReplyModel.attributes.type = subType === 1 ?
                                        this.model.attributes.extended_info.attachment_original_sub_type :
                                        subType;
        objReplyModel.attributes.mime_type = subType === 1 ?
                                             this.model.attributes.extended_info.attachment_original_mime_type :
                                             this.model.attributes.extended_info.attachment_mime_type;
        objReplyModel.attributes.container = subType === 1 ?
                                             this.model.attributes.extended_info.attachment_original_container :
                                             this.model.attributes.extended_info.attachment_container;
        mimeTypeClass = NodeSpriteCollection.findClassByNode(objReplyModel);
      }
      var messages = {
        seeMoreRepiles: lang.seeMoreReplies,
        attachFile: lang.attachFile,
        modifiedAt: lang.modifiedAt,
        update: lang.update,
        cancel: lang.cancel,
        writeAComment: lang.writeAComment,
        deleteReply: lang.deleteComment,
        edit: lang.edit,
        hide: lang.hide,
        attachmentDeleteDescription: lang.attachmentDeleteDescription,
        attachmentDeleteTitle: lang.attachmentDeleteTitle,
        uploadAttachment: lang.uploadAttachment,
        deleteReplyheader: lang.deleteReplyheader,
        confirmationTextforReplyDelete: lang.confirmationTextforReplyDelete,
        shortcutAttachmentSubtype: this.util.commonUtil.globalConstants.SHORTCUT_ATTACHMENT_SUBTYPE,
        documentAttachmentSubtype: this.util.commonUtil.globalConstants.DOCUMENT_ATTACHMENT_SUBTYPE,
        emoticon: lang.emoticon,
        more: lang.more,
        less: lang.less,
        mimeTypeClass: mimeTypeClass
      }
      this.uniqueId = _.uniqueId();
      return {
        messages: messages
      };
    },
    initialize: function (options) {
      var containHttp = options.model.collection.options.csBaseUrl.indexOf('http') === 0;
      if (containHttp) {
        if (options.model.collection.options.csBaseUrl !== undefined) {
          var baseUrlTokens = options.model.collection.options.csBaseUrl.split(/[\/]+/);
          if (this.model.attributes.extended_info !== undefined &&
              this.model.attributes.extended_info.attachment_icon_id !== undefined) {
            this.model.attributes.extended_info.attachment_icon_id = baseUrlTokens[0] + "//" +
                                                                     baseUrlTokens[1] +
                                                                     this.model.attributes.extended_info.attachment_icon_id;
          }
        }
      }
    },
    events: {
      "click .esoc-social-comment-icon-edit": "onEditReply",
      "click .esoc-social-comment-icon-hide": "onHideReply",
      "click .esoc-social-comment-icon-delete.esoc-social-reply-delete-confirm": "onRemoveModel",
      "keydown .esoc-social-comment-icon-delete.esoc-social-reply-delete-confirm": "onClickWithSpaceKey",
      "click .esoc-social-reply-update": "onUpdateReply",
      "click .esoc-social-reply-cancel": "onUpdateCancelReply",
      "input .esoc-social-editable": "onEditTextChanged",
      "input .esoc-social-reply-data-textarea": "onEditTextKeyPress",
      "input .esoc-reply-emoji-comment": "onEditTextKeyPress",
      "keyup .esoc-reply-emoji-comment": "onEditTextKeyPress",
      "change .esoc-social-reply-data-textarea": "onEditTextKeyPress",
      "focus .esoc-social-reply-data-textarea": "onFocusEditTextKey",
      "click .esoc-social-reply-seemore": "fetchMoreReplies",
      "click .reply.esoc-social-reply-attachment-icon-delete": "onReplyAttachmentDelete",
      "click .reply.esoc-social-attachment-file": "selectAttachment",
      "keydown .reply.esoc-social-attachment-file": "onClickWithSpaceKey",
      "focus .esoc-reply-emoji-comment": "onFocusEditTextKey",
      "click .esoc-social-reply-emoticon": "onEmojiPress",
      "click .esoc-social-comment-attachment": "onAttachementPress",
      "click .esoc-social-attachment-icon, .esoc-social-attachment-download": "openAttachment",
      "click .esoc-see-more-activity": "showMoreContent",
      "click .esoc-see-less-activity": "showLessContent",
      "mousedown .esoc-reply-emoji-comment .esoc-user-mention": "onReplyEditEmojiMentionMouseClick"
    },

    constructor: function ReplyListItem(options) {
      this.options = options || {};
      this.options.connector = this.options.connector ||
                               this.options.context.getObject(ConnectorFactory);
      Marionette.ItemView.prototype.constructor.apply(this, arguments);
    },
    onClickWithSpaceKey: function (e) {
      Util.applySpaceKeyEvent(e);
    },
    remove: function () {
      var self = this;
      this.$el.fadeOut(function () {
        Marionette.ItemView.prototype.remove.call(self);
        self.util.setCommentDialogPointer();
      });
    },
    onFocusEditTextKey: function (e) {
      e.preventDefault();
      e.stopPropagation();
    },
    openAttachment: function (e) {
      e.preventDefault();
      e.stopPropagation();
      this.trigger("click:attachment");
    },
    onEditReply: function (e) {
      e.preventDefault();
      e.stopPropagation();
      if ($(".esoc-social-comment-cancel:visible").length > 0) {
        $(".esoc-social-comment-cancel:visible").trigger("click");
      }
      if ($(".esoc-social-reply-cancel:visible").length > 0) {
        var prevParent          = $(".esoc-social-reply-cancel:visible").closest(
            "li.esoc-social-reply-list-item"),
            prevExpandedHeight  = $(prevParent).find(".esoc-social-reply-data").height(),
            prevcollapsedHeight = $(prevParent).find(
                "#esoc-social-comment-reply-list-" + this.model.attributes.id).height(),
            previousId          = parseInt(
                $(prevParent.children()).find("div[data-id]")[0].getAttribute("data-id"),
                10);
        $(".esoc-social-reply-cancel:visible").trigger("click");
      }
      //TODO @rpuppala: Need to verify the cases for below items
      //this.$el.find(".esoc-social-reply-data").attr("class", "binf-col-lg-9 binf-col-md-8 col-sm-7 binf-col-xs-5 esoc-social-reply-data");
      //this.$el.addClass("esoc-social-editable-parent").find(".esoc-social-reply-data").hide().addClass("esoc-social-editable");
      //this.$el.addClass("esoc-social-editable-parent").find(".esoc-social-reply-data-textarea").addClass("esoc-social-editable").show().trigger("focus");
      this.$el.find(".esoc-social-comment-icon-holder, .esoc-social-reply-list-actions").hide();
      this.$el.find(".esoc-social-reply-list-update").show();
      this.$el.find(".esoc-social-edit-icons").show();
      this.$el.find(".esoc-social-edit-icons").animate({opacity: 1.0}, 0);
      this.$el.find(".esoc-social-edit-icons").addClass("esoc-social-editable-attachment-icons");
      this.applyReplyEmoji(e);
      this.$el.find('[class*="esoc-social-reply-comment-data"]').hide();
      var _emojiArea = this.$el.find(".emoji-wysiwyg-editor");
      this.util.createChickletForMentions(_emojiArea);
      _emojiArea.show().trigger("focus");
      this.$el.find("#esoc-social-reply-attachment-icon-delete-" +
                    this.model.attributes.id).addClass("esoc-social-reply-edit");
      if ((!this.model.collection.socialActions.attachementsEnabled &&
           !this.model.collection.socialActions.shortcutsEnabled) ||
          this.model.attributes.extended_info.attachment_id !== "") {
        this.$el.find("#esoc-social-reply-edit-attachment-" + this.model.attributes.id).hide();
        this.$el.find(".esoc-social-reply-data").hide().addClass("esoc-social-editable-icons");
        this.$el.find(".esoc-social-edit-icons").addClass("esoc-social-icon-when-no-attachment");
        this.$el.find(".esoc-reply-emoji-comment").addClass("esoc-social-input-when-no-attachment");
      }
      //this.util.setSelectionRange(this.$el.find(".esoc-social-reply-data-textarea")[0], 0);
      //apply emoji's

      var _eleCommentContainer = $("#esoc-social-comment-container")[0],
          currentId            = this.model.id;
      if (currentId < previousId) {
        _eleCommentContainer.scrollTop = _eleCommentContainer.scrollTop +
                                         ( prevExpandedHeight - prevcollapsedHeight );
      }

      var attachmentPopOverArgs = {
        socialActions: this.model.collection.socialActions,
        id: this.model.attributes.id,
        uniqueId: this.uniqueId,
        desktopAttachmentInputId: "esoc-social-replyedit-desktop-attachment-" +
                                  this.model.attributes.id,
        shortcutIdHolder: this.$el.find("#esoc-social-reply-cs-shortcut-edit-" +
                                        this.model.attributes.id),
        connector: this.options.connector
      };
      this.util.showAttachmentPopOver(this.$el.find('#esoc-social-reply-edit-attachment-' +
                                                    this.model.attributes.id),
          attachmentPopOverArgs);
      this.$el.find("#esoc-social-reply-edit-attachment-" + this.model.attributes.id).attr("title",
          lang.attachFile);
      this.util.commonUtil.preventDrop(this.$el.find(".esoc-reply-emoji-comment"));
      var that = this;
      this.$el.find("#esoc-social-comment-reply-list-" + this.model.attributes.id).on("paste",
          function (e) {
            var maxCharters         = that.util.commonUtil.globalConstants.MAX_CHAR_LIMIT,
                existingReplyLength = $(
                    ".esoc-social-reply-data-textarea-" + that.model.id).val().length;
            that.util.commonUtil.onCommentFormPaste(e, existingReplyLength, maxCharters);
            $(".esoc-social-reply-data-textarea-" +
              that.model.id).innerHTML = ($(
                "#esoc-social-comment-reply-list-" + this.model.attributes.id).html());
            that.onEditTextKeyPress(e);
          });
      this.$el.find(".esoc-see-more").hide();
      this.$el.find(".esoc-see-less").hide();
      this.options.parentCollectionView.triggerMethod("update:scrollbar");
    },
    onEditTextKeyPress: function (event) {
      this.util.onMentionNameEdit(event);
      var _eleTextArea = this.$el.find('[class*="esoc-social-reply-data-textarea-"]'),
          _eleTextVal  = _eleTextArea.val(),
          _eleDataDiv  = this.$el.find(".esoc-social-reply-data"),
          _eleEmojiDiv = this.$el.find(
              "#esoc-social-comment-reply-list-" + this.model.attributes.id),
          maxCharLimit = this.util.commonUtil.globalConstants.MAX_CHAR_LIMIT;

      _eleDataDiv.text(_eleTextVal);
      var _e = event || window.event;
      if (_eleTextVal.length > maxCharLimit) {
        var replyTxt = _eleTextVal.substr(0, maxCharLimit);
        _eleTextArea.val(replyTxt);
        _eleDataDiv.text(replyTxt);
        _eleEmojiDiv.html("")[0].textContent = replyTxt;
        this.util.commonUtil.addEmoji(_eleEmojiDiv, false, this.options.connector);
        this.util.commonUtil.placeCaretAtEnd(_eleEmojiDiv);
        _e.preventDefault();
      }
    },
    onRender: function (e) {
      var objModel = this.model, that = this;
      this.inactivateUnsupportedSubType(objModel);
      this.listenTo(this.options.model.collection, 'sync', function () {
        var objModel = that.model, inactiveClass = 'esoc-social-comment-inactive';
        that.$el.find("#esoc-social-reply-attachment-" + objModel.attributes.id +
                      " .esoc-social-attachment-name").removeClass(inactiveClass);
        that.$el.find("#esoc-social-reply-attachment-" + objModel.attributes.id +
                      " .esoc-social-attachment-icon").removeClass(inactiveClass);
        that.inactivateUnsupportedSubType(objModel);
      });
      if (this.model.collection.socialActions.attachementsEnabled &&
          this.model.collection.socialActions.shortcutsEnabled) {
        var attachmentPopOverArgs = {
          id: "attachfile-" + this.model.attributes.id,
          uniqueId: this.uniqueId,
          socialActions: this.model.collection.socialActions,
          desktopAttachmentInputId: "esoc-social-replylist-desktop-attachment-" +
                                    this.model.attributes.id,
          shortcutIdHolder: this.$el.find("#esoc-social-reply-cs-shortcut-" +
                                          this.model.attributes.id + "-attachfiles"),
          attachFiles: true,
          itemview: this,
          connector: this.options.connector
        };
        this.util.showAttachmentPopOver(this.$el.find('.esoc-social-attachment-file'),
            attachmentPopOverArgs);
      }
      if (this.model.attributes.user !== undefined && this.model.attributes.user.id !== undefined) {
        if (!UserWidget) {
          UserWidget = require('esoc/widgets/userwidget/userwidget');
        }
        var defaultOptions = {
          userid: this.model.attributes.user.id,
          context: this.options.context,
          showUserProfileLink: true,
          showMiniProfile: true,
          UserWidget: UserWidget
        };
        var userWidgetOptions = _.extend({
          placeholder: this.$el.find('.esoc-user-widget')
        }, defaultOptions);
        UserWidget.getUser(userWidgetOptions);
        var userProfilePicOptions = _.extend({
          placeholder: this.$el.find('.esoc-profileimg-block'),
          showUserWidgetFor: 'profilepic',
          userWidgetWrapperClass: "esoc-social-comment-userprofile-pic"
        }, defaultOptions);
        UserWidget.getUser(userProfilePicOptions);
      }
      //apply emoji's
      this.applyReplyEmoji(e);
      var context = this.options.context;
      UserWidgetUtil.displayUserWidget(context, this.$el);
    },
    onShow: function (e) {
      if ($.inArray(this.model.attributes.feed_event_type, [7, 8]) !== -1) {
        this.$el.find(".esoc-social-reply-data").css("white-space", "inherit");
      }
      this.util.setCommentDialogPointer();
      var context = this.options.context;
      UserWidgetUtil.displayUserWidget(context, this.$el);

      if ($.inArray(this.model.attributes.feed_event_type, [7, 8, 9]) === -1) {
        this.showSeeMoreLink(this.$el.find(this.contentTypeElement));
      }
      this.options.parentCollectionView.triggerMethod("update:scrollbar");
    },

    showSeeMoreLink: function (_ele) {
      var _e = $(_ele)[0];
      $(_e).addClass("esoc-see-more-content");
      $(_e).addClass("esoc-see-min-height");
      this.util.setCommentDialogPointer(_ele);
      var that = this;
      setTimeout(function () {
        if (that.util.commonUtil.isTextOverflown(_e)) {
          that.$el.find(".esoc-see-more").show();
          $(_e).addClass("esoc-see-more-activity");
        }
        $(_e).removeClass("esoc-see-min-height");
        that.options.parentCollectionView.triggerMethod("update:scrollbar");
      }, 1000);
    },

    contentTypeElement: ".esoc-extended-view-mode",
    showMoreContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.util.commonUtil.showMoreContent(e, this, this.$el.find(this.contentTypeElement));
        this.util.setCommentDialogPointer(e);
        e.preventDefault();
        e.stopPropagation();
      }
    },

    showLessContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.util.commonUtil.showLessContent(e, this, this.$el.find(this.contentTypeElement));
        this.util.setCommentDialogPointer(e);
        e.preventDefault();
        e.stopPropagation();
      }
    },

    onUpdateCancelReply: function (e) {
      this.$el.removeClass("esoc-social-editable-parent").find(".esoc-social-reply-data-textarea-" +
                                                               this.model.attributes.id).removeClass(
          "esoc-social-editable").val(
          this.$el.find(".esoc-social-reply-hidden-text").text()).hide();
      //apply emoji's
      var that = this;
      that.applyReplyEmoji(e);
      this.$el.find(".esoc-social-comment-icon-holder, .esoc-social-reply-list-actions").show();
      this.$el.find("#esoc-social-reply-attachment-" + this.model.attributes.id).show();
      this.$el.find(".esoc-social-reply-list-update").hide();
      this.$el.find(".esoc-social-warning").hide();
      this.$el.find(".esoc-social-edit-icons").hide();
      this.$el.removeClass("esoc-social-editable-parent").find(
          ".esoc-social-reply-data").removeClass("esoc-social-editable");
      this.$el.find(".esoc-social-reply-data").attr("class",
          "binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-reply-data esoc-social-reply-comment-data");
      this.$el.find("#esoc-social-reply-attachment-icon-delete-" +
                    this.model.attributes.id).removeClass("esoc-social-reply-edit");
      if ((!this.model.collection.socialActions.attachementsEnabled &&
           !this.model.collection.socialActions.shortcutsEnabled) ||
          this.model.attributes.extended_info.attachment_id !== "") {
        this.$el.find(".esoc-social-reply-data").removeClass("esoc-social-editable-icons");
        this.$el.find(".esoc-social-edit-icons").removeClass("esoc-social-icon-when-no-attachment");
        this.$el.find(".esoc-reply-emoji-comment").removeClass(
            "esoc-social-input-when-no-attachment");
      }
      var editAttachmentIcon = this.$el.find('#esoc-social-reply-edit-attachment-' +
                                             this.model.attributes.id);
      var inputFileAttachment = this.$el.find('#esoc-social-replyedit-desktop-attachment-' +
                                              this.model.attributes.id);
      if (editAttachmentIcon.attr("data-binf-original-title") &&
          editAttachmentIcon.attr("data-binf-original-title").length > 0) {
        this.util.hideAttachmentPopup(editAttachmentIcon, inputFileAttachment,
            this.model.collection.socialActions);
      }
      this.$el.find(".esoc-comment-emoji").hide();
      var _emojiArea = this.$el.find(".esoc-reply-emoji-comment");
      _emojiArea.hide();
      this.$el.find('[class*="esoc-social-reply-comment-data"]').show();
      this.$el.find("#esoc-social-reply-cs-shortcut-edit-" + this.model.attributes.id).val("");
      this.util.setFocusOnDefaultElement(e);
      var context = this.options.context;
      UserWidgetUtil.displayUserWidget(context, this.$el);
      this.showSeeMoreLink(this.$el.find(this.contentTypeElement));
      this.options.parentCollectionView.triggerMethod("update:scrollbar");
      this.$el.find(".esoc-social-comment-icon-edit:first-child").trigger("focus");
    },
    onUpdateReply: function (e) {
      var editElement        = this.$el.find('[class*="esoc-social-reply-data-textarea-"]'),
          editValue          = editElement !== undefined ? editElement.val().trim() : "",
          commentId          = this.model.attributes.id,
          updateReplyRESTUrl = this.model.attributes.actions.edit.href,
          shortcutId         = $("#esoc-social-reply-cs-shortcut-edit-" + commentId),
          formData           = new FormData(),
          desktopDoc         = $("#esoc-social-replyedit-desktop-attachment-" + commentId),
          replace;
      editValue = this.util.commonUtil.revHtmlEntities(editValue);
      formData.append("commands", "default");
      if (shortcutId.val() !== "") {
        formData.append("ATT_ID", parseInt(shortcutId.val(), 10));
        replace = true;
      }
      else if (desktopDoc.length > 0) {
        var file = desktopDoc[0].files[0];
        if (file) {
          formData.append("AddDesktopDoc", file);
          replace = true;
        } else {
          replace = false;
        }
      } else {
        replace = this.$el.find(".esoc-social-reply-edit").is(":hidden");
      }
      this.util.showMask(this.$el);
      formData.append("status", editValue);
      formData.append("id", commentId);
      formData.append("replace", replace);
      var that = this;
      if (editValue !== "") {
        var ajaxParams = {
          "url": that.options.connector.connection.url + updateReplyRESTUrl,
          "type": that.model.attributes.actions.edit.method,
          "dataType": "text",
          "data": formData,
          "itemview": this,
          "baseURL": this.model.collection.options.csBaseUrl
        };
        this.util.updateWithAttachmentAjaxCall(ajaxParams).done(function () {
          that.$el.find(".esoc-social-comment-icon-edit:first-child").trigger("focus");
        });
      } else {
        this.$el.find("#esoc-social-comment-reply-list-" + this.model.attributes.id).trigger("focus");
        this.util.hideMask(this.$el);
      }
      this.$el.find("#esoc-social-reply-attachment-icon-delete-" +
                    this.model.attributes.id).removeClass("esoc-social-reply-edit");
    },
    onHideReply: function (e) {
    },
    onRemoveModel: function (e) {
      this.util.showMask(this.$el);
      var commentId     = this.model.attributes.id,
          deleteRESTUrl = this.model.attributes.actions.deleteAction.href,
          that          = this,
          ajaxParams    = {
            "url": that.options.connector.connection.url + deleteRESTUrl + "?id=" +
                   commentId,
            "type": that.model.attributes.actions.deleteAction.method,
            "model": this,
            "async": false,
            "requestType": "ReplyDelete"
          };
      var args = {
        dialogtitle: this.templateHelpers().messages.deleteReplyheader, //TODO: code re-factor on "this.templateHelpers().messages"
        dialogmessage: this.templateHelpers().messages.confirmationTextforReplyDelete,
        ajaxParams: ajaxParams
      }
      this.util.openConfirmationDialog(args);
    },
    destroy: function (e) {
      this.undelegateEvents();
      this.off();
      this.remove();
    },
    fetchMoreReplies: function (e) {
      var collection = this.model.collection;
      delete collection.defaults.params[this.util.commonUtil.globalConstants.SINCE_ID];
      collection.fetch({
        remove: false,
        selEle: this.$el.find(".esoc-social-reply-seemore"),
        params: {max_id: this.model.attributes.id},
        success: collection.fetchSuccess,
        error: collection.fetchError
      });
    },
    onReplyAttachmentDelete: function (e) {
      if (e.target.classList.contains("esoc-social-reply-edit")) {
        e.preventDefault();
        e.stopPropagation();
        this.$el.find("#esoc-social-reply-attachment-" + this.model.attributes.id).hide();
        this.$el.find("#esoc-social-reply-edit-attachment-" + this.model.attributes.id).show();
        this.$el.find(".esoc-social-edit-icons").removeClass("esoc-social-icon-when-no-attachment");
        this.$el.find(".esoc-reply-emoji-comment").removeClass(
            "esoc-social-input-when-no-attachment");
        this.$el.find(".esoc-social-reply-data").removeClass("esoc-social-editable-icons");
        this.$el.find(".esoc-social-reply-data-textarea").removeClass("esoc-social-editable-icons");
        $("#esoc-social-comment-reply-list-" + this.model.attributes.id).trigger("focus");
      } else {
        var that = this;
        var replyId = this.model.attributes.id;
        var updateReplyRESTUrl = this.model.attributes.actions.edit.href;
        var _eleDiv = $("<div />").html(this.model.attributes.text);
        var eleTextVal = _eleDiv.text();
        var ajaxParams = {
          "url": that.options.connector.connection.url + updateReplyRESTUrl,
          "type": that.model.attributes.actions.edit.method,
          "dataType": "text",
          "data": {
            id: replyId,
            status: eleTextVal,
            replace: true
          },
          "model": that,
          "requestType": "AttachmentDelete"
        };
        var args = {
          dialogtitle: this.templateHelpers().messages.attachmentDeleteTitle,
          dialogmessage: this.templateHelpers().messages.attachmentDeleteDescription,
          ajaxParams: ajaxParams
        };
        this.util.openConfirmationDialog(args);
      }
    },
    uploadAttachment: function (e) {
      var replyId              = this.model.attributes.id,
          updateCommentRESTUrl = this.model.attributes.actions.edit.href,
          desktopDoc           = this.$el.find("#esoc-social-replylist-desktop-attachment-" +
                                               replyId),
          shortcutId           = $("#esoc-social-reply-cs-shortcut-" + replyId + "-attachfiles"),
          formData             = new FormData();
      formData.append("commands", "default");
      if (shortcutId.val() !== "") {
        formData.append("ATT_ID", parseInt(shortcutId.val(), 10));
      } else if (desktopDoc.length > 0) {
        var file = desktopDoc[0].files[0];
        formData.append("AddDesktopDoc", file);
      }
      var _eleDiv = $("<div />").html(this.model.attributes.text);
      var eleTextVal = _eleDiv.text();
      formData.append("id", replyId);
      formData.append("status", eleTextVal);
      this.$el.find(".esoc-reply-attachment").hide()
      this.util.showMask(this.$el);
      var ajaxParams = {
        "url": this.options.connector.connection.url + updateCommentRESTUrl,
        "type": this.model.attributes.actions.edit.method,
        "data": formData,
        "itemview": this,
        "baseURL": this.model.collection.options.csBaseUrl,
        "commentId": replyId,
        "feedType": "reply"
      };
      this.util.updateWithAttachmentAjaxCall(ajaxParams);
      shortcutId.val('');
      this.util.resetAttachmentInput(desktopDoc, this.model.collection.socialActions);
    },
    selectAttachment: function (e) {
      if (this.model.collection.socialActions.attachementsEnabled &&
          !this.model.collection.socialActions.shortcutsEnabled) {
        var that         = this,
            desktopInput = this.$el.find("#esoc-social-replylist-desktop-attachment-" +
                                         this.model.attributes.id);
        desktopInput.off("change").on("change", function (e) {
          if (desktopInput.val().length > 0) {
            that.uploadAttachment(e);
          }
        });
        this.openBrowseWindow(e, desktopInput);
      } else if (!this.model.collection.socialActions.attachementsEnabled &&
                 this.model.collection.socialActions.shortcutsEnabled) {
        var args = {
          shortcutIdHolder: $("#esoc-social-reply-cs-shortcut-" + this.model.attributes.id +
                              "-attachfiles"),
          "itemview": this,
          "attachFiles": true
        };
        this.util.openTargetPicker(this.$el.find('.esoc-social-attachment-file'), args);
      }
    },
    openBrowseWindow: function (e, desktopInput) {
      desktopInput.val("");
      desktopInput.trigger("click");
    },
    // TODO: need to move this to util.
    applyReplyEmoji: function (e) {
      if (this.model.attributes.id !== undefined) {
        this.$el.find(".emoji-wysiwyg-editor").remove();
        var _textArea = this.$el.find(".esoc-social-reply-data-textarea-" +
                                      this.model.attributes.id);
        _textArea.val(_textArea.val().replace(/&quot;/gi, "\""));
        var $wysiwyg   = _textArea.emojiarea({
              path: this.util.commonUtil.getEmojiPath(this.options.connector),
              wysiwyg: true,
              button: '.esoc-social-comment-emoticon-' + this.model.attributes.id,
              id: 'esoc-social-comment-reply-textarea-' + this.model.attributes.conversation_id,
              parent: this.$el.find("#esoc-social-edit-reply-icons-" + this.model.attributes.id),
              container: $("#esoc-social-comment-container"),
              util: this.util,
              widget: $(".esoc-social-comment-widget")
            }),
            _emojiArea = this.$el.find(".emoji-wysiwyg-editor");
        _textArea.hide();
        _emojiArea.hide();
        _emojiArea.addClass("esoc-reply-emoji-comment").attr({
          "id": "esoc-social-comment-reply-list-" + this.model.attributes.id,
          "data-text": this.templateHelpers().messages.writeAComment
        });
        var replyData = _emojiArea.html();
        replyData = this.util.commonUtil.onClickableUrl(replyData);
        this.$el.find('.esoc-social-reply-data').html(replyData);
        this.$el.find('[class*="esoc-social-reply-comment-data"]').html(replyData);
        _emojiArea.html(_emojiArea.html().replace(/\n/gi, "<br>"));
      }
      var suggestionOptions = {
        context: this.options.context,
        connector: this.options.connector,
        element: this.$el.find("#esoc-social-comment-reply-list-" + this.model.attributes.id),
        appendToElement: this.$el.find("[id^='esoc-suggestion-reply-item_']")
      };
      this.util.triggerAutoCompleteSuggestion(suggestionOptions);
    },
    onEmojiPress: function (e) {
      if (this.model.attributes.id !== undefined) {
        this.util.hidePopover(this.$el.find('.esoc-social-comment-emoticon-' +
                                            this.model.attributes.id));
      }
      e.stopPropagation();
    },
    onAttachementPress: function (e) {
      this.$el.find(".emoji-menu").hide();
    },
    onReplyEditEmojiMentionMouseClick: function (event) {
      this.util.setCursorPositionAtStartOFMention(event);
    },
    inactivateUnsupportedSubType: function (objModel) {
      if (!!objModel.collection) {
        this.attachmentModel = this.util.commonUtil.buildNodeModel(objModel,
            this.options.connector, true);

        if (this.options.parentCollectionView.defaultActionController) {
          if (!this.options.parentCollectionView.defaultActionController.hasAction(
                  this.attachmentModel)) {
            var inactiveClass = 'esoc-social-comment-inactive';
            this.$el.find("#esoc-social-reply-attachment-" + this.model.attributes.id +
                          " .esoc-social-attachment-name").addClass(inactiveClass);
            this.$el.find("#esoc-social-reply-attachment-" + this.model.attributes.id +
                          " .esoc-social-attachment-icon").addClass(inactiveClass);
          }
        }
      }
    }

  });
  return ReplyListItem;
});

csui.define('esoc/widgets/socialactions/replycollection.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/marionette',
  'esoc/widgets/socialactions/replylist.view',
  'csui/behaviors/default.action/default.action.behavior',
  'esoc/widgets/socialactions/util'
], function ($, _, Backbone, Marionette, ReplyListView, DefaultActionBehavior, Util) {
  var ReplyCollectionView = Marionette.CollectionView.extend({
    tagName: 'div',
    className: 'comments-list',
    childView: ReplyListView,
    util: Util,
    constructor: function ReplyCollectionView(options) {
      this.childViewOptions = options;
      Marionette.CollectionView.prototype.constructor.apply(this, arguments);
    },
    onRender: function () {
      this.$el.find(".esoc-social-reply-list-item").hide();
    },
    behaviors: {
      DefaultAction: {
        behaviorClass: DefaultActionBehavior
      }
    },
    childEvents: {
      'click:attachment': 'onClickAttachment'
    },
    onClickAttachment: function (target) {
      var objectArgs = {
        "node": target.attachmentModel,
        "callingViewInstance": this
      }
      this.util.commonUtil.openItem(objectArgs);
    }
  });
  return ReplyCollectionView;
});

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/socialactions/replytemplate',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <a href=\"javascript:void(0);\" id=\"esoc-social-reply-attachment\"\r\n             class=\"esoc-social-comment-attachment\" data-html=\"true\"\r\n             data-binf-placement=\"bottom\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachFile : stack1), depth0))
    + "\"></a>\r\n";
},"3":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.shortcutsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"4":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <a href=\"javascript:void(0);\" id=\"esoc-social-reply-attachment\"\r\n               class=\"esoc-social-comment-attachment\" data-html=\"true\"\r\n               data-binf-placement=\"bottom\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachFile : stack1), depth0))
    + "\"></a>\r\n";
},"6":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.shortcutsEnabled : stack1),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(7, data, 0)})) != null ? stack1 : "");
},"7":function(depth0,helpers,partials,data) {
    return "      <input type=\"file\" id=\"esoc-social-reply-desktop-attachment\" name=\"AddDesktopDoc\"\r\n             style=\"display:none\" />\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<div id=\"esoc-social-reply-create-container\" class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div id=\"esoc-social-reply-warning\" style=\"display:none\"\r\n       class=\"binf-alert binf-alert-danger esoc-social-warning\" role=\"alert\"></div>\r\n  <div id=\"esoc-social-reply-form-container\" class=\"esoc-social-reply-form-container\">\r\n    <div class=\"esoc-social-reply-form-mask\"></div>\r\n    <div id=\"esoc-social-reply-input-holder\" class=\"esoc-social-reply-input-holder\">\r\n        <div class=\"esoc-socialactions-widget-arrow-up\"></div>\r\n        <div class=\"esoc-social-reply-data\" style=\"display:none\"></div>\r\n        <textarea id=\"esoc-social-reply-input-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.replyId : stack1), depth0))
    + "\" class=\"esoc-social-reply-input binf-form-control\"\r\n                  placeholder=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.writeAComment : stack1), depth0))
    + "\"></textarea>\r\n        <div id=\"esoc-suggestion-reply-header_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.replyId : stack1), depth0))
    + "\"\r\n             class=\"esoc-suggestion-reply-header\"></div>\r\n    </div>\r\n\r\n    <div id=\"esoc-social-reply-form-buttons-container\"\r\n         class=\"esoc-social-reply-form-buttons-container\">\r\n      <div id=\"esoc-social-textinput-button-holder-reply\"\r\n           class=\"esoc-social-textinput-button-holder-reply\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachementsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + "        <a href=\"javascript:void(0);\"\r\n           class=\"esoc-social-reply-emoticon-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.replyId : stack1), depth0))
    + " esoc-social-comment-emoticon\"\r\n           id=\"esoc-social-reply-comment-emoticon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\"></a>\r\n        <button id=\"esoc-social-reply-submit\" disabled class=\"binf-btn binf-btn-primary esoc-social-reply-submit\"\r\n                type=\"submit\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.post : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.post : stack1), depth0))
    + "</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachementsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  <input type=\"hidden\" id=\"esoc-social-reply-cs-shortcut\" value=\"\" />\r\n\r\n  <div id=\"esoc-social-comment-body-divider\"></div>\r\n  <div id=\"esoc-social-reply-container\" class=\"binf-container esoc-social-reply-container\"></div>\r\n</div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_socialactions_replytemplate', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/socialactions/replyheader.view',[
  "csui/lib/jquery",
  "csui/lib/underscore",
  "csui/lib/backbone",
  "csui/lib/marionette",
  "csui/lib/handlebars",
  "csui/utils/base",
  "csui/utils/contexts/factories/connector",
  "esoc/widgets/socialactions/reply.model",
  "esoc/widgets/socialactions/util",
  "hbs!esoc/widgets/socialactions/replytemplate",
  "i18n!esoc/widgets/socialactions/nls/lang"
], function ($, _, Backbone, Marionette, Handlebars, Base, ConnectorFactory, Reply, Util, ReplyTemplate, lang) {
  var self = null;
  var ReplyHeaderView = Marionette.ItemView.extend({
    initialize: function (options) {
      this.options = options;
      this.options.connector = this.options.connector ||
                               this.options.context.getObject(ConnectorFactory);
      self = this;
    },
    options: {},
    base: Base,
    util: Util,
    _elements: {
      csuiSocialReplyInput: null,
      csuiSocialReplyInputHolder: null,
      csuiSocialReplySubmitButton: null,
      csuiSocialButtonsContainer: null,
      csuiSocialFormContainer: null,
      csuiSocialFormWarning: null,
      csuiSocialReplyHiddenData: null,
      csuiSocialReplyAttachmentPopupContent: null,
      csuiSocialReplyAttachmentPopupTitle: null,
      csuiSocialReplyShortcut: null
    },
    tagName: "div",
    template: ReplyTemplate,
    templateHelpers: function () {
      var messages = {
        post: lang.post,
        posting: lang.posting,
        writeAComment: lang.writeAComment,
        attachFile: lang.attachFile,
        replyId: this.options.item_id,
        emoticon: lang.emoticon
      }

      this.uniqueId = _.uniqueId();
      messages = $.extend(this.options.socialActions, messages);
      return {
        messages: messages
      };
    },
    events: {
      "click #esoc-social-reply-submit": "onReplyFormSubmit",
      "focus .esoc-reply-emoji": "onReplyFormFocus",
      "click .esoc-reply-emoji": "onReplyInputFocus",
      "input .esoc-reply-emoji": "onReplyFormKeypress",
      "click #esoc-social-reply-comment-emoticon": "onEmojiPress",
      "click .esoc-social-comment-attachment": "onAttachementPress",
      "keyup .esoc-reply-emoji": "onReplyFormKeypress",
      "change .esoc-social-reply-input": "onReplyFormKeypress",
      "mousedown .esoc-reply-emoji .esoc-user-mention": "onReplyEmojiMentionMouseClick"
    },
    onRender: function (e) {
      this._elements.csuiSocialReplyInput = this.$el.find("#esoc-social-reply-input-" +
                                                          this.options.item_id);
      this._elements.csuiSocialEmojiInput = this.$el.find(".esoc-reply-emoji");
      this._elements.csuiSocialReplyInputHolder = this.$el.find("#esoc-social-reply-input-holder");
      this._elements.csuiSocialReplySubmitButton = this.$el.find("#esoc-social-reply-submit");
      this._elements.csuiSocialButtonsContainer = this.$el.find(
          "#esoc-social-textinput-button-holder-reply");
      this._elements.csuiSocialFormContainer = this.$el.find("#esoc-social-reply-form-container");
      this._elements.csuiSocialFormWarning = this.$el.find(".esoc-social-warning");
      this._elements.csuiSocialReplyHiddenData = this.$el.find(".esoc-social-reply-data");
      this._elements.csuiSocialReplyShortcut = this.$el.find("#esoc-social-reply-cs-shortcut");
      this._elements.csuiSocialReplyAttachmentName = this.$el.find(
          "#esoc-social-reply-attachment-name");
      this._elements.csuiSocialReplyAttachmentSize = this.$el.find(
          "#esoc-social-reply-attachment-size");
      this._elements.csuiSocialReplyAttachmentIcon = this.$el.find("#esoc-social-reply-attachment");
      this._elements.csuiSocialReplyAttachmentPopupTitle = this.$el.find(
          "#esoc-social-reply-selected-attachment-dialog-title");
      this._elements.csuiSocialReplyAttachmentPopupContent = this.$el.find(
          "#esoc-social-reply-selected-attachment-dialog");

      if (this.options.canReply) {
        this._elements.csuiSocialFormContainer.show();
      } else {
        this._elements.csuiSocialFormContainer.hide();
      }
      this._elements.csuiSocialReplySubmitButton.hide();
      var attachmentPopOverArgs = {
        socialActions: this.options.socialActions,
        id: "reply",
        uniqueId: this.uniqueId,
        desktopAttachmentInputId: "esoc-social-reply-desktop-attachment",
        shortcutIdHolder: this._elements.csuiSocialReplyShortcut,
        connector: this.options.connector
      };
      this.util.showAttachmentPopOver(this._elements.csuiSocialReplyAttachmentIcon,
          attachmentPopOverArgs);
      this._elements.csuiSocialReplyAttachmentIcon.attr("title", lang.attachFile);
      $(".esoc-social-comment-widget").off("mousedown touchstart").on("mousedown touchstart",
          function (e) {
            self.onCommentDialogClick(e);
          });
      this.onReplyFormBlur();
    },
    onShow: function (e) {
      this.applyemoji(e);
      $("[id^='esoc-social-comment-widget-pointer']").on("click", function (e) {
        self.onCommentDialogClick(e);
      });
      var that = this;
      $("#esoc-social-comment-reply-header").on("paste", function (e) {
        var maxCharters         = that.util.commonUtil.globalConstants.MAX_CHAR_LIMIT,
            existingReplyLength = $("#esoc-social-reply-input-" +
                                    that.options.conversation_id).val().length;
        that.util.commonUtil.onCommentFormPaste(e, existingReplyLength, maxCharters);
        $("#esoc-social-reply-input-" +
          that.options.conversation_id).innerHTML = ($("#esoc-social-comment-reply-header").html());
        that.onReplyFormKeypress(e);
      });

      $("#esoc-social-comment-reply-header").on("mouseleave", function (e) {
        self.onCommentFormMouseLeave(e);
      });
      this.util.commonUtil.preventDrop($(".esoc-reply-emoji"));
    },
    onCommentDialogClick: function (e) {
      if (!(e.target.id === 'esoc-social-comment-reply-header' ||
            e.target.id === 'esoc-social-reply-comment-emoticon' ||
            e.target.id === 'esoc-social-reply-attachment' ||
            e.target.id === 'esoc-social-reply-desktop-attachment' ||
            $(e.target).parents('#esoc-social-comment-reply-header').length > 0 ||
            $(e.target).closest('.binf-popover').length > 0 ||
            e.target.id === 'esoc-social-reply-submit')) {
        this.onReplyFormBlur();
      }
    },
    onCommentFormMouseLeave: function (e) {
      this.$el.find("#esoc-social-reply-input-" +
                    this.options.item_id)[0].innerHTML = this.$el.find("#esoc-social-reply-input-" +
                                                                       this.options.item_id).val();
    },
    onReplyInputFocus: function (e) {
      this.$el.find(".esoc-reply-emoji").trigger("focus");
    },
    onReplyFormFocus: function (e) {
      var replyValue = this._elements.csuiSocialReplyInput.val().trim();
      if (replyValue !== undefined && replyValue !== '') {
        this.$el.find('#esoc-social-reply-submit').prop("disabled", false);
      } else {
        this.$el.find('#esoc-social-reply-submit').prop("disabled", true);
      }
      e.stopPropagation();
      e.preventDefault();
      this.$el.find(".esoc-reply-emoji").addClass("emoji-wysiwyg-editor-focus");
      this._elements.csuiSocialButtonsContainer.css({display: "block"});
      if (this.util.commonUtil.isIE() && this.$el.find(".esoc-reply-emoji").length > 0 &&
          this.$el.find(".esoc-reply-emoji")[0].textContent.length === 0) {
        this.$el.find(".esoc-reply-emoji").attr("data-text", "");
      }
      this._elements.csuiSocialButtonsContainer.animate({opacity: 1.0}, 0);
      this._elements.csuiSocialReplySubmitButton.show();
      if (!this.options.socialActions.attachementsEnabled &&
          !this.options.socialActions.shortcutsEnabled) {
        this._elements.csuiSocialButtonsContainer.addClass("esoc-social-icon-when-no-attachment");
        this._elements.csuiSocialReplyHiddenData.addClass("esoc-social-input-when-no-attachment");
        this.$el.find(".esoc-reply-emoji").addClass("esoc-social-input-when-no-attachment");
      }
      var adjustWidth = (this.$el.find(".esoc-reply-emoji").html() === "" ||
                         this.$el.find(".esoc-reply-emoji").html() === "<br>") ? true : false;
      this.adjustCommentAreaWidth(e, adjustWidth);
      if (this.$el.find(".esoc-social-attachment-popover").is(':visible')) {
        this._elements.csuiSocialReplyAttachmentIcon.binf_popover('hide');
      }
    },
    adjustCommentAreaWidth: function (e, adjustWidth) {
      var commentElement = this.$el.find(".esoc-reply-emoji");
      if (adjustWidth) {
        commentElement.css("width", "");
        commentElement.width(this.$el.find(".esoc-reply-emoji").width() -
                             parseInt(this.$el.find("#esoc-social-reply-submit").outerWidth() - 57,
                                 10));
        this.$el.find(".esoc-suggestion-reply-header").width(commentElement.outerWidth());
      }
    },
    onReplyFormBlur: function (e) {
      if (!this.$el.find(".esoc-social-comment-form-mask").is(':visible')) {
        var that = this;
        var replyString      = this.$el.find(
                "#esoc-social-reply-input-" + this.options.item_id).val(),
            contentDivString = this.$el.find(".esoc-reply-emoji").html(),
            desktopDoc       = this.$el.find("#esoc-social-reply-desktop-attachment"),
            attachedFile,
            shortcutVal;
        if (desktopDoc.length > 0 && desktopDoc[0].files && desktopDoc[0].files.length > 0) {
          attachedFile = desktopDoc[0].files[0];
        }
        if (this._elements.csuiSocialReplyShortcut.val().length > 0) {
          shortcutVal = parseInt(this._elements.csuiSocialReplyShortcut.val(), 10);
        }
        if ((replyString === undefined || replyString === '') &&
            (attachedFile === undefined || attachedFile === '') && shortcutVal === undefined &&
            (contentDivString === undefined || contentDivString === '' ||
             contentDivString === "<br>")) {
          this._elements.csuiSocialReplySubmitButton.hide();
          this._elements.csuiSocialButtonsContainer.hide();
          this._elements.csuiSocialButtonsContainer.animate({opacity: 0.0}, 0, function () {
            $(this).css({display: "none"});

          });
          $("#esoc-social-comment-reply-header").removeClass("emoji-wysiwyg-editor-focus").trigger("blur");
          if (this.util.commonUtil.isIE() && this.$el.find(".esoc-reply-emoji").length > 0 &&
              this.$el.find(".esoc-reply-emoji")[0].textContent.length === 0) {
            $(".esoc-reply-emoji").attr("data-text", this.templateHelpers().messages.writeAComment);
          }
          if (this._elements.csuiSocialReplyAttachmentIcon.attr("data-binf-original-title") &&
              this._elements.csuiSocialReplyAttachmentIcon.attr("data-binf-original-title").length > 0) {
            this.util.hideAttachmentPopup(this._elements.csuiSocialReplyAttachmentIcon,
                this.$el.find("#esoc-social-reply-desktop-attachment"), this.options.socialActions);
          }
          if (!this.options.socialActions.attachementsEnabled &&
              !this.options.socialActions.shortcutsEnabled) {
            this._elements.csuiSocialButtonsContainer.removeClass(
                "esoc-social-icon-when-no-attachment");
            this._elements.csuiSocialReplyHiddenData.removeClass(
                "esoc-social-input-when-no-attachment");
            this.$el.find(".esoc-reply-emoji").removeClass("esoc-social-input-when-no-attachment");
          }
        }
        var commentContainer = $("#esoc-social-comment-container").find(
            ".esoc-social-comment-list-item");
        if (commentContainer.length <= 1) {
          $(commentContainer).removeClass("").removeClass(
              "esoc-attachment-init-min-height esoc-emoji-init-min-height");
        }
      }

    },
    onReplyFormKeypress: function (event) {
      var replyValue = this._elements.csuiSocialReplyInput.val().trim();
      if (replyValue !== undefined && replyValue !== '') {
        this.$el.find('#esoc-social-reply-submit').prop("disabled", false);
      } else {
        this.$el.find('#esoc-social-reply-submit').prop("disabled", true);
      }
      this.util.onMentionNameEdit(event);
      var replyTextAreaEle = this.$el.find("#esoc-social-reply-input-" + this.options.item_id);
      var replyString = replyTextAreaEle.val();
      var maxCharLimit = this.util.commonUtil.globalConstants.MAX_CHAR_LIMIT;
      var _e = event || window.event;
      if (replyString.length > maxCharLimit) {
        var replyStr = replyString.substr(0, maxCharLimit);
        replyTextAreaEle.val(replyStr);
        this.$el.find("#esoc-social-comment-reply-header").html("")[0].textContent = replyStr;
        this.util.commonUtil.addEmoji(this.$el.find("#esoc-social-comment-reply-header"), false,
            this.options.model.connector);
        this.util.commonUtil.placeCaretAtEnd(this.$el.find("#esoc-social-comment-reply-header"));
        _e.preventDefault();
      }
    },
    onReplyFormSubmit: function (e) {
      e.stopPropagation();
      e.preventDefault();
      this._elements.csuiSocialReplyAttachmentIcon.binf_popover('hide');
      var replyValue = this._elements.csuiSocialReplyInput.val().trim(),
          that       = this,
          formData   = new FormData(),
          desktopDoc = this.$el.find("#esoc-social-reply-desktop-attachment"),
          attachedFile,
          shortcutVal,
          /* FormData methods are not supporting in some browsers like IE and some other modules
          need separate data fields so we are passing some temporary JSON object*/
          jsonFormData = {};
      if (desktopDoc.length > 0) {
        attachedFile = desktopDoc[0].files[0];
      }
      if (this._elements.csuiSocialReplyShortcut.val().length > 0) {
        shortcutVal = parseInt(this._elements.csuiSocialReplyShortcut.val(), 10);
      }
      if (replyValue.length) {
        this.$el.find('.esoc-social-reply-form-mask').show();
        this.$el.find('#esoc-social-reply-submit').html(lang.posting);
        this.adjustCommentAreaWidth(e, true);
        this.util.showMask(this.$el.find('.esoc-social-reply-form-mask'));
        this._elements.csuiSocialReplyInput.val("");
        if (shortcutVal) {
          jsonFormData["ATT_ID"] = shortcutVal;
        }
        else if (attachedFile) {
          jsonFormData["AddDesktopDoc"] = attachedFile;
        }
        jsonFormData["status"] = replyValue;
        jsonFormData["eventtype"] = 1;
        jsonFormData["in_reply_to_status_id"] = this.options.item_id;

        //Append all the fields from jsonFormData to formData
        _.each(jsonFormData, function (value, key) {
          formData.append(key, value);
        });
        // create a new reply
        new Reply({}, {
          connector: this.model.connector
        }).save({},{
          wait: true,
          dataType: "text",
          data: formData,
          jsonFormData: jsonFormData,
          parentCommentModel:this.model.options.parentCommentModel,
          success: this.onReplySubmitSuccess,
          error: this.onReplySubmitFailure.bind(this, desktopDoc)
        })
      }
      if (replyValue === undefined || replyValue === '') {
        this.$el.find("#esoc-social-comment-reply-header").trigger("focus");
      } else {
        this.util.resetAttachmentInput(desktopDoc, this.options.socialActions);
        this._elements.csuiSocialReplyShortcut.val("");
      }
    },
    removeMask: function (e) {
      self.$el.find('#esoc-social-reply-submit').html(lang.post);
      self.adjustCommentAreaWidth(e, true);
      self.util.hideMask(self.$el.find('.esoc-social-reply-form-mask'));
      self.$el.find('.esoc-social-reply-form-mask').hide();
    },
    onReplySubmitFailure:  function (desktopDoc, model, response, options) {
      this.util.resetAttachmentInput(desktopDoc, this.options.socialActions);
      this._elements.csuiSocialReplyShortcut.val("");
      this._elements.csuiSocialEmojiInput.html("");
      this.removeMask();
      $('textarea[id^="esoc-social-reply-input-"]').val("");
      var args = {
        parent: ".esoc-social-comment-widget",
        errorContent: response.responseJSON ?
                      ( response.responseJSON.errorDetail ? response.responseJSON.errorDetail :
                        response.responseJSON.error) : lang.defaultErrorMessageForReply
      };
      this.util.commonUtil.openErrorDialog(args);
    },
    onReplySubmitSuccess: function (model, response, options) {
      self.options.commentAction = true;
      self.$el.find(".esoc-reply-emoji")[0].textContent = "";
      self.removeMask();
      self.util.resetAttachmentInput(self.$el.find("#esoc-social-reply-desktop-attachment"),
          self.options.socialActions);
      self._elements.csuiSocialReplyShortcut.val("");
      self._elements.csuiSocialReplyAttachmentIcon.binf_popover('hide');
      self.$el.find('textarea[id^="esoc-social-reply-input-"]').text("").height("").trigger("blur");
      self.$el.find("#esoc-social-reply-form-container").height("");
      self.$el.find("#esoc-social-reply-warning").hide();
      self.$el.find(".esoc-reply-emoji").html("").trigger("blur");
      setTimeout(function () {
        self.onReplyFormBlur();
      }, 0);
      var collection = self.model;
      delete collection.defaults.params[self.util.commonUtil.globalConstants.MAX_ID];
      if (collection.length > 0) {
        var lastRenderedModelId = collection.at(0).id;
        collection.fetch({remove: false, params: {since_id: lastRenderedModelId}, at: 0});
      } else {
        collection.fetch({});
      }
      setTimeout(function () {
        self.$el.find("#esoc-social-comment-reply-header").trigger("focus");
      }, 200);
      self.$el.find('#esoc-social-reply-submit').attr('disabled', true);
    },
    applyemoji: function (e) {
      if (this.options.item_id !== undefined) {
        this.$el.find(".emoji-wysiwyg-editor").remove();
        var _textArea = this.$el.find("#esoc-social-reply-input-" + this.options.item_id);
        _textArea.val(_textArea.val().replace(/&quot;/gi, "\""));
        var $wysiwyg = _textArea.emojiarea({
          path: this.util.commonUtil.getEmojiPath(this.options.model.connector),
          wysiwyg: true,
          button: '.esoc-social-reply-emoticon-' + this.options.item_id,
          id: 'esoc-social-comment-reply-textarea-' + this.options.item_id,
          parent: this.$el.find("#esoc-social-textinput-button-holder-reply"),
          container: $("#esoc-social-comment-container"),
          util: this.util,
          widget: $(".esoc-social-comment-widget")
        });
        var _emojiArea = this.$el.find(".emoji-wysiwyg-editor");
        _emojiArea.addClass("esoc-reply-emoji").attr({
          "id": "esoc-social-comment-reply-header",
          "data-text": this.templateHelpers().messages.writeAComment
        });
        _textArea.hide();
        _emojiArea.show();
      }
      this.listenToOnce(this.model, 'sync', function () {
        var suggestionOptions = {
          context: this.options.context,
          connector: this.options.connector,
          element: this.$el.find("#esoc-social-comment-reply-header"),
          appendToElement: this.$el.find("[id^='esoc-suggestion-reply-header_']")
        };
        this.util.triggerAutoCompleteSuggestion(suggestionOptions);
        this.$el.find(".emoji-wysiwyg-editor").removeAttr("autocomplete");
      });
    },
    onEmojiPress: function (e) {
      var commentContainer = $("#esoc-social-comment-container").find(
          ".esoc-social-comment-list-item");
      if (commentContainer.length <= 1) {
        $(commentContainer).removeClass('esoc-attachment-init-min-height').addClass(
            'esoc-emoji-init-min-height');
      }
      if (this.options.item_id !== undefined) {
        this.util.hidePopover(this.$el.find(".esoc-social-reply-emoticon-" + this.options.item_id));
      }
      e.stopPropagation();
    },
    onAttachementPress: function (e) {
      var commentContainer = $("#esoc-social-comment-container").find(
          ".esoc-social-comment-list-item");
      if (commentContainer.length <= 1) {
        $(commentContainer).removeClass('esoc-emoji-init-min-height').addClass(
            'esoc-attachment-init-min-height');
      }

      this.$el.find(".emoji-menu").hide();
    },
    onReplyEmojiMentionMouseClick: function (event) {
      this.util.setCursorPositionAtStartOFMention(event);
    }
  });
  return ReplyHeaderView;
});

csui.define('esoc/widgets/socialactions/replycollectionbase',[
  'csui/lib/marionette',
  'csui/lib/jquery',
  'csui/utils/connector',
  'esoc/widgets/socialactions/replycollection.model',
  'esoc/widgets/socialactions/replycollection.view',
  'esoc/widgets/socialactions/replyheader.view'
], function (Marionette, $, Connector, ReplyCollectionModel, ReplyCollectionView, ReplyHeaderView) {
  function ReplyCollectionBase(options) {
    var replyRootWidget = $(options.parentNode);

    var replyCollectionModel = new ReplyCollectionModel(options);
    options.model = replyCollectionModel;
    replyCollectionModel.socialActions = options.socialActions;
    replyCollectionModel.options = options;
    var replyHeaderContainerRegion = new Marionette.Region({
      el: options.parentNode
    });
    replyHeaderContainerRegion.show(new ReplyHeaderView(options));

    var replyListRegion = new Marionette.Region({
      el: "#esoc-social-reply-container"
    });
    var replyCollectionView = new ReplyCollectionView({
      context: replyCollectionModel.options.context,
      collection: replyCollectionModel,
      parentCollectionView: options.parentCollectionView,
      commentConfigOptions: options,
      sort: true
    });
    replyListRegion.show(replyCollectionView);

    // get the replies from the server
    options.success = replyCollectionModel.fetchSuccess;
    options.error = replyCollectionModel.fetchError;
    replyCollectionModel.fetch(options);

    // transform supporting views
    replyRootWidget.css({display: "block"});
    replyRootWidget.animate({opacity: 1.0});

    this.getConfig = function () {
      return options;
    };
  }

  return ReplyCollectionBase;
});

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/socialactions/comment',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <span class=\"esoc-social-comment-timestamp\">\r\n              <span class=\"esoc-social-comment-timestamp-ago\"></span>\r\n              <span class=\"esoc-social-comment-blue\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.modifiedAt : stack1), depth0))
    + "</span>\r\n              <span class=\"esoc-social-timestamp-text\">"
    + this.escapeExpression(((helper = (helper = helpers.modified_at_iso8601 || (depth0 != null ? depth0.modified_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"modified_at_iso8601","hash":{}}) : helper)))
    + "</span>\r\n            </span>\r\n";
},"3":function(depth0,helpers,partials,data) {
    var helper;

  return "            <span\r\n                class=\"esoc-social-comment-timestamp esoc-social-timestamp-text\">"
    + this.escapeExpression(((helper = (helper = helpers.created_at_iso8601 || (depth0 != null ? depth0.created_at_iso8601 : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"created_at_iso8601","hash":{}}) : helper)))
    + "</span>\r\n";
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <a href=\"javascript:void(0);\"\r\n               class=\"esoc-social-comment-button esoc-social-comment-icon-edit\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.edit : stack1), depth0))
    + "\"></a>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <div class=\"esoc-social-comment-icon-spacer\"></div>\r\n            <a href=\"javascript:void(0);\"\r\n               class=\"esoc-social-comment-button esoc-social-comment-delete-confirm esoc-social-comment-icon-delete\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteComment : stack1), depth0))
    + "\" data-binf-toggle=\"modal\"\r\n               data-binf-target=\"#esoc-social-dialog\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteComment : stack1), depth0))
    + "\"></a>\r\n";
},"9":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <div class=\"esoc-social-comment-icon-spacer\"></div>\r\n            <a href=\"javascript:void(0);\"\r\n               class=\"esoc-social-comment-button esoc-social-comment-icon-hide\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.hide : stack1), depth0))
    + "\"></a>\r\n";
},"11":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <div class=\"esoc-social-comment-data binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"\r\n           data-id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">\r\n        <span class=\"esoc-social-text esoc-comment-valign\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.textmsg : stack1), depth0))
    + "</span>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(12, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n        <span class=\"esoc-object-name esoc-comment-valign\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.subtype != this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(14, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\r\n        </span>\r\n      </div>\r\n      <div class=\"esoc-extended-view-mode\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.sgm_description : stack1),{"name":"if","hash":{},"fn":this.program(16, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-down\"></span></a>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-up\"></span></a>\r\n      </div>\r\n\r\n      <div class=\"binf-alert binf-alert-danger binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-warning\"\r\n           role=\"alert\"></div>\r\n";
},"12":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <span class=\"esoc-social-mime-icon esoc-comment-valign csui-icon-group\">\r\n            <span class=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" />\r\n            <a href=\"javascript:void(0);\" class=\"csui-icon csui-icon-shortcut-overlay\"></a>\r\n          </span>\r\n";
},"14":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <span class=\"esoc-social-mime-icon esoc-comment-valign "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\"\r\n                  title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></span>\r\n";
},"16":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <div class=\"esoc-social-comment-data\">\r\n            <div class=\"esoc-description\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.sgm_description : stack1), depth0))
    + "</div>\r\n          </div>\r\n";
},"18":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 8",{"name":"xif","hash":{},"fn":this.program(19, data, 0),"inverse":this.program(21, data, 0)})) != null ? stack1 : "");
},"19":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <div class=\"esoc-social-comment-data binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"\r\n           data-id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">\r\n        <span class=\"esoc-social-text esoc-comment-valign\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.textmsg : stack1), depth0))
    + "</span>\r\n        <span class=\"esoc-object-name esoc-comment-valign\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">\r\n          <span class=\"esoc-social-mime-icon esoc-comment-valign "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\"\r\n                title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\"></span>\r\n          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.name : stack1), depth0))
    + "\r\n        </span>\r\n        <span class=\"esoc-social-version esoc-comment-valign\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.version : stack1), depth0))
    + "</span>\r\n        <span class=\"esoc-version-number esoc-comment-valign\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.version_name : stack1), depth0))
    + "</span>\r\n      </div>\r\n      <div class=\"esoc-extended-view-mode\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.sgm_description : stack1),{"name":"if","hash":{},"fn":this.program(16, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-down\"></span></a>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-up\"></span></a>\r\n      </div>\r\n      <div class=\"binf-alert binf-alert-danger binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-warning\"\r\n           role=\"alert\"></div>\r\n";
},"21":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 9",{"name":"xif","hash":{},"fn":this.program(22, data, 0),"inverse":this.program(24, data, 0)})) != null ? stack1 : "");
},"22":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <div class=\"esoc-extended-view-mode\">\r\n        <div class=\"esoc-social-comment-data binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"\r\n             data-id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"></div>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-down\"></span></a>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-up\"></span></a>\r\n      </div>\r\n      <div class=\"binf-alert binf-alert-danger binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-warning\"\r\n           role=\"alert\"></div>\r\n";
},"24":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <div class=\"esoc-extended-view-mode\">\r\n        <div\r\n            class=\"esoc-social-comment-data esoc-social-comment-text binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"\r\n            data-id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"text","hash":{}}) : helper)))
    + "</div>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-more esoc-see-more-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.more : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-down\"></span></a>\r\n        <a href=\"javascript:void(0);\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\"\r\n           class=\"esoc-see-less esoc-see-less-activity esoc-hide-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.less : stack1), depth0))
    + "\">\r\n          <span class=\"icon-arrow-up\"></span></a>\r\n      </div>\r\n      <div class=\"binf-alert binf-alert-danger binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-warning\"\r\n           role=\"alert\"></div>\r\n      <div id=\"esoc-social-comment-input-holder-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\" class=\"esoc-social-comment-input-holder\r\n      binf-col-lg-8 binf-col-md-8 binf-col-sm-7 binf-col-xs-5\">\r\n        <textarea class=\"esoc-social-comment-data-textarea esoc-social-comment-data-textarea-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n                  placeholder=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.writeAComment : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"text","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"text","hash":{}}) : helper)))
    + "</textarea>\r\n      </div>\r\n    ";
},"26":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.shortcutAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(27, data, 0),"inverse":this.program(30, data, 0)})) != null ? stack1 : "");
},"27":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div id=\"esoc-social-comment-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n             class=\"binf-col-lg-7 binf-col-md-7 binf-col-sm-9 binf-col-xs-9 esoc-social-attachment\">\r\n          <span class=\"csui-icon-group esoc-social-attachment-icon\"\r\n                title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">\r\n            <span id=\"esoc-social-selected-file-icon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2\r\n                  "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" />\r\n            <a href=\"javascript:void(0);\" class=\"csui-icon csui-icon-shortcut-overlay\"></a>\r\n          </span>\r\n\r\n          <div class=\"binf-col-lg-9 binf-col-md-9 binf-col-sm-9 binf-col-xs-9 esoc-social-attachment-name\">\r\n            <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-download\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "</a>\r\n          </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.addshortcut : stack1),{"name":"if","hash":{},"fn":this.program(28, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n";
},"28":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <a href=\"javascript:void(0);\" id=\"esoc-social-attachment-icon-delete-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n               class=\"binf-col-lg-1 binf-col-md-1 binf-col-sm-1 binf-col-xs-1 comment esoc-social-attachment-icon-delete\"\r\n               data-binf-toggle=\"modal\" data-binf-target=\"#esoc-social-dialog\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteComment : stack1), depth0))
    + "\"></a>\r\n";
},"30":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_subtype == this.messages.documentAttachmentSubtype",{"name":"xif","hash":{},"fn":this.program(31, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"31":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "        <div id=\"esoc-social-comment-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n             class=\"binf-col-lg-7 binf-col-md-7 binf-col-sm-9 binf-col-xs-9 esoc-social-attachment\">\r\n          <a href=\"javascript:void(0);\" class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2 esoc-social-attachment-icon\r\n             "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mimeTypeClass : stack1), depth0))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\"></a>\r\n\r\n          <div class=\"binf-col-lg-7 binf-col-md-7 binf-col-sm-7 binf-col-xs-7 esoc-social-attachment-name\">\r\n            <a href=\"javascript:void(0);\" class=\"esoc-social-attachment-download\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_name : stack1), depth0))
    + "</a>\r\n          </div>\r\n          <div\r\n              class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2 esoc-social-attachment-size\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_size : stack1), depth0))
    + "</div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.addattachment : stack1),{"name":"if","hash":{},"fn":this.program(28, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n      ";
},"33":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <span class=\"esoc-comment-reply\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.reply_count : depth0),{"name":"if","hash":{},"fn":this.program(34, data, 0),"inverse":this.program(37, data, 0)})) != null ? stack1 : "")
    + "        </span>\r\n";
},"34":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <a id=\"reply_link_"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-reply_link\" href=\"javascript:void(0)\">\r\n              "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.reply : stack1), depth0))
    + "\r\n              <span id=\"reply_link_count_"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">("
    + this.escapeExpression(((helper = (helper = helpers.reply_count || (depth0 != null ? depth0.reply_count : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"reply_count","hash":{}}) : helper)))
    + ")</span>\r\n            </a>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_id == '' && (this.actions.addattachment || this.actions.addshortcut)",{"name":"xif","hash":{},"fn":this.program(35, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"35":function(depth0,helpers,partials,data) {
    return "              <span class=\"item-separator\">|</span>\r\n";
},"37":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.reply : stack1)) != null ? stack1.can_reply : stack1),{"name":"if","hash":{},"fn":this.program(38, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"38":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "              <a id=\"reply_link_"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-reply_link\"\r\n                 href=\"javascript:void(0)\"> "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.reply : stack1), depth0))
    + " </a>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_id == '' && (this.actions.addattachment || this.actions.addshortcut)",{"name":"xif","hash":{},"fn":this.program(39, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"39":function(depth0,helpers,partials,data) {
    return "                <span class=\"item-separator\">|</span>\r\n";
},"41":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <a class=\"comment esoc-social-attachment-file "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachmentPositionClass : stack1), depth0))
    + "\"\r\n             href=\"javascript:void(0)\" data-html=\"true\"\r\n             data-binf-placement=\"bottom\"> "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachFile : stack1), depth0))
    + " </a>\r\n";
},"43":function(depth0,helpers,partials,data) {
    var helper;

  return "      <input type=\"file\" id=\"esoc-social-commentedit-desktop-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" name=\"AddDesktopDoc\"\r\n             style=\"display:none\" />\r\n      <input type=\"file\" id=\"esoc-social-commentlist-desktop-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" name=\"AddDesktopDoc\"\r\n             style=\"display:none\" />\r\n";
},"45":function(depth0,helpers,partials,data) {
    var helper;

  return "  <div id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" class=\"esoc-social-comment-load-more\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-comment-body-divider\"></div>\r\n<div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-comment-list-divider\"></div>\r\n<div class=\"esoc-profileimg-block\">\r\n  <span class=\"esoc-userprofile-img\">\r\n    <img class=\"esoc-userprofile-img-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.user : depth0)) != null ? stack1.id : stack1), depth0))
    + " binf-img-circle\" src=\"\" />\r\n  </span>\r\n</div>\r\n\r\n<div class=\"esoc-commentinfo-block-wrapper binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n\r\n  <div class=\"esoc-commentinfo-block binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n    <div class=\"esoc-social-comment-details\">\r\n      <div class=\"esoc-social-comment-user-details binf-col-lg-10 binf-col-md-10 binf-col-sm-10 binf-col-xs-10\">\r\n        <span class=\"esoc-user-widget\"></span>\r\n        <span class=\"esoc-social-timestamp\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.modified_at_iso8601 : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + "        </span>\r\n      </div>\r\n      <div class=\"esoc-social-comment-icon-holder binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2\">\r\n        <div class=\"esoc-social-comment-icon-holder esoc-social-comment-icon-holder-inner\">\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.edit : stack1),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.messages.feedEventType != 1 && this.actions.deleteAction",{"name":"xif","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.actions : depth0)) != null ? stack1.hide : stack1),{"name":"if","hash":{},"fn":this.program(9, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.feed_event_type == 7",{"name":"xif","hash":{},"fn":this.program(11, data, 0),"inverse":this.program(18, data, 0)})) != null ? stack1 : "")
    + "    <div class=\"esoc-social-icons-container binf-col-lg-4 binf-col-md-4 binf-col-sm-5 binf-col-xs-7\">\r\n      <div class=\"esoc-social-edit-icons\" id=\"esoc-social-edit-comment-icons-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">\r\n        <a href=\"javascript:void(0);\" id=\"esoc-social-comment-edit-attachment-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n           class=\"esoc-social-comment-attachment\" data-html=\"true\" data-binf-placement=\"bottom\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.editAttachment : stack1), depth0))
    + "\"\r\n        ></a>\r\n        <a href=\"javascript:void(0);\"\r\n           class=\"esoc-social-comment-emoticon esoc-social-comment-emotion-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n           id=\"esoc-social-comment-emoticon-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\"></a>\r\n      </div>\r\n    </div>\r\n    <div id=\"esoc-suggestion-comment-list_"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"></div>\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.extended_info : depth0)) != null ? stack1.attachment_id : stack1),{"name":"if","hash":{},"fn":this.program(26, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n    <div class=\"esoc-social-comment-list-actions binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.messages.feedEventType != 1 && this.messages.feedEventType != 2",{"name":"xif","hash":{},"fn":this.program(33, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      <span class=\"esoc-comment-attachment\">\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.extended_info.attachment_id == '' && (this.actions.addattachment || this.actions.addshortcut)",{"name":"xif","hash":{},"fn":this.program(41, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "      </span>\r\n    </div>\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.actions.addattachment && !this.actions.addshortcut",{"name":"xif","hash":{},"fn":this.program(43, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "    <input type=\"hidden\" id=\"esoc-social-comment-cs-shortcut-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "-attachfiles\" value=\"\" />\r\n    <input type=\"hidden\" id=\"esoc-social-comment-cs-shortcut-edit-"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" value=\"\" />\r\n\r\n    <div id=\"reply_"
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" data-id=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n         class=\"reply-thread-list binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"></div>\r\n\r\n    <div class=\"esoc-social-comment-list-update binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <button class=\"esoc-social-comment-update binf-btn binf-btn-primary\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "\">\r\n        "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.update : stack1), depth0))
    + "\r\n      </button>\r\n      <button class=\"esoc-social-comment-cancel binf-btn binf-btn-default\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "\">\r\n        "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "\r\n      </button>\r\n      <span class=\"esoc-social-comment-hidden-text\">"
    + this.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"text","hash":{}}) : helper)))
    + "</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.noMoreData : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(45, data, 0)})) != null ? stack1 : "")
    + "<span class=\"esoc-social-comment-delete\"></span>\r\n<div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-comment-body-divider\"></div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_socialactions_comment', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/socialactions/commentslist.view',[
  'require',
  'csui/lib/underscore',
  'csui/lib/jquery',
  'csui/lib/backbone',
  'csui/lib/marionette',
  'csui/lib/moment',
  'csui/lib/handlebars',
  'csui/utils/contexts/factories/connector',
  'i18n!esoc/widgets/socialactions/nls/lang',
  'esoc/widgets/socialactions/replycollectionbase',
  'esoc/widgets/userwidget/userwidget',
  'hbs!esoc/widgets/socialactions/comment',
  'esoc/widgets/socialactions/util',
  'csui/utils/url',
  'csui/utils/nodesprites',
  'csui/utils/namedsessionstorage',
  'esoc/widgets/userwidget/util',
  'csui/lib/handlebars.helpers.xif'
], function (_require, _, $, Backbone, Marionette, Moment, Handlebars,
    ConnectorFactory, lang, ReplyCollectionBase, UserWidget, CommentTemplate,
    Util, Url, NodeSpriteCollection, NamedSessionStorage, UserWidgetUtil) {
  var CommentListItem = Marionette.ItemView.extend({
    tagName: "li",
    momentJS: Moment,
    util: Util,
    namedSessionStorage: new NamedSessionStorage(Util.commonUtil.globalConstants.ESOCIAL_USER_INFO),
    className: 'esoc-social-comment-list-item binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12',
    template: CommentTemplate,
    templateHelpers: function () {
      var mimeTypeClass = "csui-icon mime_document",
          objModel      = this.model, subType, isSGMShortCut;

      if ($.inArray(this.model.attributes.feed_event_type, [7, 8, 9]) !== -1) {
        isSGMShortCut = this.model.attributes.extended_info.subtype === 1 ? true : false;
        objModel.attributes.type = isSGMShortCut ?
                                   this.model.attributes.extended_info.sgm_original_sub_type :
                                   this.model.attributes.extended_info.subtype;
        objModel.attributes.mime_type = isSGMShortCut ?
                                        this.model.attributes.extended_info.sgm_original_mime_type :
                                        this.model.attributes.extended_info.mime_type;
        objModel.attributes.container = isSGMShortCut ?
                                        this.model.attributes.extended_info.sgm_original_container :
                                        this.model.attributes.extended_info.sgm_container;
        mimeTypeClass = NodeSpriteCollection.findClassByNode(objModel);
      } else if (!!this.model.attributes.extended_info &&
                 !!this.model.attributes.extended_info.attachment_subtype) {
        subType = this.model.attributes.extended_info.attachment_subtype;
        objModel.attributes.type = subType === 1 ?
                                   this.model.attributes.extended_info.attachment_original_sub_type :
                                   subType;
        objModel.attributes.mime_type = subType === 1 ?
                                        this.model.attributes.extended_info.attachment_original_mime_type :
                                        this.model.attributes.extended_info.attachment_mime_type;
        objModel.attributes.container = subType === 1 ?
                                        this.model.attributes.extended_info.attachment_original_container :
                                        this.model.attributes.extended_info.attachment_container;
        mimeTypeClass = NodeSpriteCollection.findClassByNode(objModel);
      }

      var messages = {
        reply: lang.reply,
        replyCount: this.model.get(this.util.commonUtil.globalConstants.REPLY_COUNT) ?
                    _.str.sformat(lang.replyCount,
                        this.model.get(this.util.commonUtil.globalConstants.REPLY_COUNT)) : "",
        attachFile: lang.attachFile,
        modifiedAt: lang.modifiedAt,
        update: lang.update,
        cancel: lang.cancel,
        deleteComment: lang.deleteComment,
        edit: lang.edit,
        hide: lang.hide,
        post: lang.post,
        writeAComment: lang.writeAComment,
        attachmentDeleteDescription: lang.attachmentDeleteDescription,
        attachmentDeleteTitle: lang.attachmentDeleteTitle,
        deleteCommentheader: lang.deleteCommentheader,
        confirmationText1: lang.confirmationText1,
        confirmationText2: lang.confirmationText2,
        shortcutAttachmentSubtype: this.util.commonUtil.globalConstants.SHORTCUT_ATTACHMENT_SUBTYPE,
        documentAttachmentSubtype: this.util.commonUtil.globalConstants.DOCUMENT_ATTACHMENT_SUBTYPE,
        emoticon: lang.emoticon,
        feedEventType: parseInt(this.model.attributes.feed_event_type, 10),
        version: lang.version,
        more: lang.more,
        less: lang.less,
        mimeTypeClass: mimeTypeClass,
        editAttachment: lang.editAttachmentTitle
      }

      messages.attachmentPositionClass = (((parseInt(this.model.attributes.feed_event_type, 10) ===
                                            1)) ||
                                          (!!this.model.attributes.actions &&
                                           !!this.model.attributes.actions.reply &&
                                           !(!!this.model.attributes.actions.reply.can_reply))) ?
                                         "esoc-social-attachment-file-alone" : "";

      if (this.model.attributes.feed_event_type === 7) {
        // get object name from objectTypes variable, if not found, then show the text (which is coming from backend) as-it-is
        var subTypeName = this.model.attributes.extended_info.subtype_name === undefined ? "" :
                          this.model.attributes.extended_info.subtype_name;
        messages.textmsg = subTypeName !== "" ? (lang.addMsg + subTypeName + " ") :
                           this.model.attributes.text;
      }

      if (this.model.attributes.feed_event_type === 8) {
        messages.textmsg = lang.versionMsg;
      }

      this.uniqueId = _.uniqueId();
      return {
        uniqueId: this.uniqueId,
        messages: messages
      };
    },
    initialize: function (options) {
      options.connector = options.connector || options.context.getObject(ConnectorFactory);
      var containHttp = options.model.collection.baseURL.indexOf('http') === 0;
      if (containHttp) {
        if (options.model.collection.baseURL !== undefined) {
          var baseUrlTokens = options.model.collection.baseURL.split(/[\/]+/);
          if (this.model.attributes.extended_info !== undefined &&
              this.model.attributes.extended_info.attachment_icon_id !== undefined) {
            this.model.attributes.extended_info.attachment_icon_id = baseUrlTokens[0] + "//" +
                                                                     baseUrlTokens[1] +
                                                                     this.model.attributes.extended_info.attachment_icon_id;
          }
        }
      }
      this.listenTo(this.model, "change", this.render);
    },
    events: {
      "click .esoc-social-comment-icon-edit": "onEditComment",
      "keydown .esoc-social-comment-icon-edit": "onClickWithSpaceKey",
      "click .esoc-social-comment-icon-hide": "onHideComment",
      "click .esoc-social-comment-icon-delete.esoc-social-comment-delete-confirm": "onRemoveModel",
      "keydown .esoc-social-comment-icon-delete.esoc-social-comment-delete-confirm": "onClickWithSpaceKey",
      "click .esoc-social-comment-update": "onUpdateComment",
      "click .esoc-social-comment-cancel": "onUpdateCancelComment",
      "input .esoc-social-editable": "onEditTextChanged",
      "input .esoc-social-comment-data-textarea": "onEditTextKeyPress",
      "focus .esoc-social-comment-data-textarea": "onFocusCommentEdit",
      "click .esoc-reply_link": "onCommentReply",
      "keydown .esoc-reply_link": "onClickWithSpaceKey",
      "click .comment.esoc-social-attachment-icon-delete": "onAttachmentDelete",
      "keydown .comment.esoc-social-attachment-icon-delete": "onClickWithSpaceKey",
      "click .comment.esoc-social-attachment-file": "selectAttachment",
      "keydown .comment.esoc-social-attachment-file": "onClickWithSpaceKey",
      "input .esoc-comment-emoji": "onEditTextKeyPress",
      "keyup .esoc-comment-emoji": "onEditTextKeyPress",
      "change .esoc-social-comment-data-textarea": "onEditTextKeyPress",
      "focus .esoc-comment-emoji": "onFocusCommentEdit",
      "click .esoc-social-comment-emoticon": "onEmojiPress",
      "click .esoc-social-comment-attachment": "onAttachementPress",
      "click .esoc-object-name, .esoc-social-mime-icon": "openItem",
      "click .esoc-social-attachment-icon, .esoc-social-attachment-download": "openAttachment",
      "keydown .esoc-social-attachment-icon, .esoc-social-attachment-download": "onClickWithSpaceKey",
      "click .esoc-see-more-activity": "showMoreContent",
      "click .esoc-see-less-activity": "showLessContent",
      "mousedown .esoc-comment-emoji .esoc-user-mention": "onCommentEmojiMentionMouseClick"
    },
    _elements: {
      csuisocialcommentdatatextarea: null
    },
    constructor: function CommentListItem() {
      Marionette.ItemView.prototype.constructor.apply(this, arguments);
    },
    onClickWithSpaceKey: function (e) {
      Util.applySpaceKeyEvent(e);
    },
    onRender: function (e) {
      var objModel = this.model, that = this;
      this.inactivateUnsupportedSubType(objModel);
      this.listenTo(this.options.model.collection, 'sync', function () {
        var objModel = this.model, inactiveClass = 'esoc-social-comment-inactive';
        that.$el.find(".esoc-social-comment-data .esoc-social-mime-icon").removeClass(
            inactiveClass);
        that.$el.find(".esoc-social-comment-data .esoc-object-name").removeClass(inactiveClass);
        that.$el.find("#esoc-social-comment-attachment-" + objModel.attributes.id +
                      " .esoc-social-attachment-name").removeClass(inactiveClass);
        that.$el.find("#esoc-social-comment-attachment-" + objModel.attributes.id +
                      " .esoc-social-attachment-icon").removeClass(inactiveClass);
        that.inactivateUnsupportedSubType(objModel);
      });
      if (this.options.model.collection.models.length > 0 &&
          $("#esoc-social-comment-container").find(".esoc-social-comment-body-divider").length ===
          0 && this.options.model.collection.models[0].id !== 0) {
        $("#esoc-social-comment-container").css("border-bottom",
            "2px solid #ffffff");
        $("#esoc-social-comment-form-buttons-container").removeClass("esoc-social-form-minheight");
      }
      if (this.model.attributes.feed_event_type === 2) {
        this.$el.addClass("esoc-social-status-reply");
        this.$el.find(".esoc-social-attachment").attr("class",
            "binf-col-lg-8 binf-col-md-8 binf-col-sm-10 binf-col-xs-10 esoc-social-attachment");
      }

      if (this.$el.find(".esoc-comment-reply").children().length === 0 &&
          this.$el.find(".esoc-comment-attachment").children().length === 0) {
        this.$el.find(".esoc-social-comment-list-actions").hide();
      }

      var commentData = this.$el.find(".esoc-social-comment-data").html(),
          imgNode     = {
            id: this.model.attributes.extended_info ?
                this.model.attributes.extended_info.user_photo_id : this.model.attributes.data_id
          };
      this._elements.csuisocialcommentdatatextarea = this.$el.find(
          ".esoc-social-comment-data-textarea");
      if (this.model.collection.socialActions !== undefined &&
          this.model.collection.socialActions.attachementsEnabled &&
          this.model.collection.socialActions.shortcutsEnabled) {
        var attachmentPopOverArgs = {
          socialActions: this.model.collection.socialActions,
          id: this.model.attributes.id,
          uniqueId: this.uniqueId,
          desktopAttachmentInputId: "esoc-social-commentlist-desktop-attachment-" +
                                    this.model.attributes.id,
          attachFiles: true,
          itemview: this,
          shortcutIdHolder: this.$el.find("#esoc-social-comment-cs-shortcut-" +
                                          this.model.attributes.id + "-attachfiles"),
          connector: this.options.connector
        };
        this.util.showAttachmentPopOver(this.$el.find('.esoc-social-attachment-file'),
            attachmentPopOverArgs);
      }
      // Do not apply emoji for document creation and version added event types.
      if (this.model.attributes.feed_event_type !== 7 &&
          this.model.attributes.feed_event_type !== 8 &&
          this.model.attributes.feed_event_type !== 9) {
        this.applyemoji(e);
      }
      if (this.model.attributes.feed_event_type === 9) {
        var sgmText = this.util.commonUtil.onClickableUrl(this.model.attributes.text);
        if (this.model.attributes.extended_info.subtype === 1) {
          sgmText = sgmText.replace('[MimeType]',
              "<span class='csui-icon-group esoc-social-mime-icon esoc-comment-valign'>" +
              "<span class='" + this.templateHelpers().messages.mimeTypeClass +
              "'></span>" +
              "<span class='csui-icon csui-icon-shortcut-overlay'></span>" +
              "</span>" +
              "</span>");
        } else {
          sgmText = sgmText.replace('[MimeType]',
              "<span class='" + this.templateHelpers().messages.mimeTypeClass +
              " esoc-social-mime-icon esoc-comment-valign'></span>");
        }
        this.$el.find(".esoc-social-comment-data").html(sgmText);
        this.$el.find(".esoc-object-name").addClass("esoc-comment-valign");
        this.$el.find(".esoc-social-comment-data").addClass("esoc-social-sgm-attr-change");
        this.$el.find(".esoc-object-name").attr("title", this.model.attributes.extended_info.name);
        this.$el.find(".esoc-social-mime-icon").attr("title",
            this.model.attributes.extended_info.name);
      }
      if (this.model.attributes.user !== undefined && this.model.attributes.user.id !== undefined) {
        if (!UserWidget) {
          UserWidget = _require('esoc/widgets/userwidget/userwidget');
        }
        var defaultOptions = {
          userid: this.model.attributes.user.id,
          context: this.model.collection.context,
          showUserProfileLink: true,
          showMiniProfile: true,
          UserWidget: UserWidget
        };
        var userProfilePicOptions = _.extend({
          placeholder: this.$el.find('.esoc-profileimg-block'),
          showUserWidgetFor: 'profilepic',
          userWidgetWrapperClass: "esoc-social-comment-userprofile-pic",
          commentsHeaderView: this.options.commentConfigOptions &&
                              this.options.commentConfigOptions.commentsHeaderView

        }, defaultOptions);
        UserWidget.getUser(userProfilePicOptions);
        var userWidgetOptions = _.extend({
          placeholder: this.$el.find('.esoc-user-widget'),
          commentsHeaderView: this.options.commentConfigOptions &&
                              this.options.commentConfigOptions.commentsHeaderView
        }, defaultOptions);
        UserWidget.getUser(userWidgetOptions);
      }
      var context = !!this.options.context ? this.options.context :
                    this.model.attributes.widgetOptions.activityfeed.context;
      UserWidgetUtil.displayUserWidget(context, this.$el);
      if (this.model.attributes.feed_event_type === 1) {
        this.showSeeMoreLink(this.$el.find(this.contentTypeElement));
      }
    },
    onShow: function (e) {
      if ($.inArray(this.model.attributes.feed_event_type, [7, 8]) !== -1) {
        this.$el.find(".esoc-social-comment-data").css("white-space", "inherit");
        if (this.$el.find(".esoc-description").length > 0) {
          var objDesc = this.$el.find(".esoc-description").html();
          objDesc = this.util.commonUtil.onClickableUrl(objDesc);
          this.$el.find(".esoc-description").html(objDesc);
        }
      }
      this.util.setCommentDialogPointer();
      if (!UserWidget) {
        UserWidget = _require('esoc/widgets/userwidget/userwidget');
      }

      var that = this;
      this.$el.find(".esoc-old-user-display-name").each(function () {
        var userWidgetOptions = {
          userid: $(this).data("userid"),
          context: !!that.options.context ? that.options.context :
                   that.model.attributes.widgetOptions.activityfeed.context,
          placeholder: this,
          showUserProfileLink: true,
          showMiniProfile: true
        };
        UserWidget.getUser(userWidgetOptions);

      });
      this.$el.find(".esoc-new-user-display-name").each(function () {
        var userWidgetOptions = {
          userid: $(this).data("userid"),
          context: !!that.options.context ? that.options.context :
                   that.model.attributes.widgetOptions.activityfeed.context,
          placeholder: this,
          showUserProfileLink: true,
          showMiniProfile: true
        };
        UserWidget.getUser(userWidgetOptions);

      })
      var context = !!this.options.context ? this.options.context :
                    this.model.attributes.widgetOptions.activityfeed.context;
      UserWidgetUtil.displayUserWidget(context, this.$el);
      this.showSeeMoreLink(this.$el.find(this.contentTypeElement));
    },

    showSeeMoreLink: function (_ele) {
      var _e = $(_ele)[0];
      $(_e).addClass("esoc-see-more-content");
      this.util.setCommentDialogPointer(_ele);
      var that = this;
      setTimeout(function () {
        if (that.util.commonUtil.isTextOverflown(_e)) {
          that.$el.find(".esoc-see-more").show();
          $(_e).addClass("esoc-see-more-activity");
        }
        that.options.parentCollectionView.triggerMethod("update:scrollbar");
      }, 1000);
    },

    contentTypeElement: ".esoc-extended-view-mode",
    showMoreContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.util.commonUtil.showMoreContent(e, this, this.$el.find(this.contentTypeElement));
        this.util.setCommentDialogPointer(e);
        e.preventDefault();
        e.stopPropagation();
      }
    },

    showLessContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.util.commonUtil.showLessContent(e, this, this.$el.find(this.contentTypeElement));
        this.util.setCommentDialogPointer(e);
        e.preventDefault();
        e.stopPropagation();
      }
    },

    remove: function () {
      var self = this;
      this.$el.fadeOut(function () {
        Marionette.ItemView.prototype.remove.call(self);
        self.util.setCommentDialogPointer();
      });
    },
    openItem: function () {
      this.trigger("click:item");
    },
    openAttachment: function (e) {
      e.preventDefault();
      e.stopPropagation();
      this.trigger("click:attachment");
    },
    onFocusCommentEdit: function (e) {
      e.preventDefault();
      e.stopPropagation();
    },
    onEditComment: function (e) {
      e.stopPropagation();
      e.preventDefault();
      var beforeContainerScrollTop = $("#esoc-social-comment-container")[0].scrollTop,
          prevParent               = "",
          prevExpandedHeight       = 0,
          prevcollapsedHeight      = 0,
          previousId               = 0,
          previousDiffHeight       = 0;
      if ($(".esoc-social-comment-cancel:visible").length > 0) {
        prevParent = $(".esoc-social-comment-cancel:visible").closest(
            "li.esoc-social-comment-list-item"),
            prevExpandedHeight = $(prevParent).find(".esoc-social-comment-data").height(),
            prevcollapsedHeight = $(prevParent).find(
                "#esoc-social-comment-edit-" + this.model.attributes.id).height(),
            previousId = parseInt($(prevParent).find(".esoc-social-comment-data").attr("data-id"),
                10),
            previousDiffHeight = parseInt(prevExpandedHeight - prevcollapsedHeight, 10);
        $(".esoc-social-comment-cancel:visible").trigger("click");
      }
      if ($(".esoc-social-reply-cancel:visible").length > 0) {
        prevParent = $(".esoc-social-reply-cancel:visible").closest(
            "li.esoc-social-reply-list-item"),
            prevExpandedHeight = $(prevParent).find(".esoc-social-reply-comment-data").height(),
            prevcollapsedHeight = $(prevParent).find(
                "#esoc-social-comment-reply-list-" + this.model.attributes.id).height(),
            previousId = parseInt($(prevParent).closest(".reply-thread-list").attr("data-id"), 10),
            previousDiffHeight = parseInt(prevExpandedHeight - prevcollapsedHeight, 10);
        $(".esoc-social-reply-cancel:visible").trigger("click");
      }
      // Do not apply emoji for document creation and version added event types.
      if (this.model.attributes.feed_event_type !== 7 &&
          this.model.attributes.feed_event_type !== 8 &&
          this.model.attributes.feed_event_type !== 9) {
        this.applyemoji(e);
      }

      //this.$el.find(".esoc-social-comment-data").attr("class", "binf-col-lg-9 binf-col-md-8 col-sm-7 binf-col-xs-5 esoc-social-comment-data");
      //this.$el.addClass("esoc-social-editable-parent").find(".esoc-social-comment-data").hide().addClass("esoc-social-editable");
      //this.$el.addClass("esoc-social-editable-parent").find(".esoc-social-comment-data-textarea").addClass("esoc-social-editable").show().trigger("focus");
      this.$el.find('[id^="esoc-social-comment-edit-textarea-"]').hide();
      var _emojiArea = this.$el.find(".emoji-wysiwyg-editor");
      this.util.createChickletForMentions(_emojiArea);
      _emojiArea.show().trigger("focus");
      _emojiArea.first().trigger("focus"); // TODO: Need to verify and remove...
      this.$el.find(".esoc-social-comment-data").hide();
      //this.$el.find("#esoc-social-comment-edit-textarea").show().trigger("focus");
      this.$el.find(
          ".esoc-social-comment-icon-holder, .esoc-social-comment-list-actions, .reply-thread-list").hide();
      this.$el.find(".esoc-social-comment-list-update").show();
      this.$el.find(".esoc-social-edit-icons").show();
      this.$el.find(".esoc-social-edit-icons").animate({opacity: 1.0}, 0);

      var currentId = this.model.id;
      if (prevParent === null || prevParent === undefined ||
          (prevParent !== null && previousId < currentId)) {
        $("#esoc-social-comment-container")[0].scrollTop = beforeContainerScrollTop;
      } else {
        $("#esoc-social-comment-container")[0].scrollTop = parseInt((beforeContainerScrollTop +
                                                                     previousDiffHeight) - 36, 10);
      }

      if ((!this.model.collection.socialActions.attachementsEnabled &&
           !this.model.collection.socialActions.shortcutsEnabled ) ||
          this.model.attributes.extended_info.attachment_id !== "") {
        this.$el.find("#esoc-social-comment-edit-attachment-" + this.model.attributes.id).hide();
        this.$el.find(".esoc-social-comment-data").hide().addClass("esoc-social-editable-icons");
        this.$el.find(".esoc-social-edit-icons").addClass("esoc-social-icon-when-no-attachment");
        this.$el.find(".esoc-comment-emoji").addClass("esoc-social-input-when-no-attachment");
      }
      var attachmentPopOverArgs = {
        socialActions: this.model.collection.socialActions,
        id: this.model.attributes.id,
        uniqueId: this.uniqueId,
        desktopAttachmentInputId: "esoc-social-commentedit-desktop-attachment-" +
                                  this.model.attributes.id,
        shortcutIdHolder: this.$el.find("#esoc-social-comment-cs-shortcut-edit-" +
                                        this.model.attributes.id),
        connector: this.options.connector
      };

      this.util.showAttachmentPopOver(this.$el.find('#esoc-social-comment-edit-attachment-' +
                                                    this.model.attributes.id),
          attachmentPopOverArgs);
      this.$el.find("#esoc-social-comment-edit-attachment-" +
                    this.model.attributes.id).attr("title", lang.attachFile);
      this.$el.find("#esoc-social-attachment-icon-delete-" +
                    this.model.attributes.id).addClass("esoc-social-comment-edit");
      this.$el.find('[id^="esoc-suggestion-comment-list_"]').width(_emojiArea.outerWidth());
      this.util.commonUtil.preventDrop(this.$el.find(".esoc-comment-emoji"));
      var that = this;
      this.$el.find("#esoc-social-comment-edit-" + this.model.attributes.id).on("paste",
          function (e) {
            var maxCharters           = that.util.commonUtil.globalConstants.MAX_CHAR_LIMIT,
                existingCommentLength = $(
                    ".esoc-social-comment-data-textarea-" + that.model.id).val().length;
            that.util.commonUtil.onCommentFormPaste(e, existingCommentLength, maxCharters);
            $(".esoc-social-comment-data-textarea-" +
              that.model.id).innerHTML = ($(
                "#esoc-social-comment-edit-" + that.model.attributes.id).html());
            that.onEditTextKeyPress(e);
          });
      this.$el.find(".esoc-see-more").hide();
      this.$el.find(".esoc-see-less").hide();
      this.options.parentCollectionView.triggerMethod('update:scrollbar');
      this.options.commentsHeaderView.triggerMethod('dom:refresh');
    },
    onEditTextKeyPress: function (event) {
      this.util.onMentionNameEdit(event);
      var _eleTextArea = this.$el.find(".esoc-social-comment-data-textarea-" +
                                       this.model.attributes.id),
          _eleTextVal  = _eleTextArea.val(),
          _eleDataDiv  = this.$el.find(".esoc-social-comment-data"),
          maxCharLimit = this.util.commonUtil.globalConstants.MAX_CHAR_LIMIT;
      _eleDataDiv.text(_eleTextVal);
      var _e = event || window.event;
      if (_eleTextVal.length > maxCharLimit) {
        var commentTxt = _eleTextVal.substr(0, maxCharLimit);
        _eleTextArea.val(commentTxt);
        _eleDataDiv.text(commentTxt);
        this.$el.find("#esoc-social-comment-edit-" + this.model.attributes.id).html(
            "")[0].textContent = commentTxt;
        this.util.commonUtil.addEmoji(
            this.$el.find("#esoc-social-comment-edit-" + this.model.attributes.id), false,
            this.options.connector);
        this.util.commonUtil.placeCaretAtEnd(
            this.$el.find("#esoc-social-comment-edit-" + this.model.attributes.id));
        _e.preventDefault();
      }
    },
    onUpdateCancelComment: function (e) {
      var commentList = $("#esoc-social-comment-container").find(".esoc-social-comment-list-item");
      if (commentList.length <= 1) {
        $(commentList).removeClass("status-attachment-init-min-height" +
                                   " status-attachment-alone-init-min-height" +
                                   " esoc-edit-init-min-height");
      }

      this.$el.removeClass("esoc-social-editable-parent").find(
          ".esoc-social-comment-data-textarea-" +
          this.model.attributes.id).removeClass("esoc-social-editable").val(
          this.$el.find(".esoc-social-comment-hidden-text").text()).hide();

      //apply emoji's
      var that = this;
      that.applyemoji(e);

      this.$el.find("#esoc-social-comment-data-textarea-" + this.model.attributes.id).css("display",
          "none");
      this.$el.find("#esoc-social-comment-reply-textarea").css("display", "none");
      //this.$el.find(".esoc-social-comment-data").html(this.util.onClickableUrl(this.$el.find(".esoc-social-comment-hidden-text").html())).show().css("padding","");
      this.$el.find(".esoc-social-comment-icon-holder, .esoc-social-comment-list-actions").show();
      this.$el.find("#esoc-social-comment-attachment-" + this.model.attributes.id).show();
      this.$el.find(".esoc-social-comment-list-update").hide();
      this.$el.find(".esoc-social-warning").hide();
      this.$el.find(".esoc-social-edit-icons").hide();
      this.$el.removeClass("esoc-social-editable-parent").find(
          ".esoc-social-comment-data").removeClass("esoc-social-editable");
      this.$el.find(".esoc-social-comment-data").css("display", "block");
      this.$el.find(".esoc-social-comment-data").attr("class",
          "binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-social-comment-data");
      this.$el.find("#esoc-social-attachment-icon-delete-" +
                    this.model.attributes.id).removeClass("esoc-social-comment-edit");
      if ((!this.model.collection.socialActions.attachementsEnabled &&
           !this.model.collection.socialActions.shortcutsEnabled ) ||
          this.model.attributes.extended_info.attachment_id !== "") {
        this.$el.find(".esoc-social-comment-data").removeClass("esoc-social-editable-icons");
        this.$el.find(".esoc-social-comment-data-textarea").removeClass(
            "esoc-social-editable-icons");
        this.$el.find(".esoc-comment-emoji").removeClass("esoc-social-input-when-no-attachment");
      }
      var editAttachmentIcon = this.$el.find('#esoc-social-comment-edit-attachment-' +
                                             this.model.attributes.id);
      var inputFileAttachment = this.$el.find('#esoc-social-commentedit-desktop-attachment-' +
                                              this.model.attributes.id);
      if (editAttachmentIcon.attr("data-binf-original-title") &&
          editAttachmentIcon.attr("data-binf-original-title").length > 0) {
        this.util.hideAttachmentPopup(editAttachmentIcon, inputFileAttachment,
            this.model.collection.socialActions);
      }
      this.$el.find("#esoc-social-comment-cs-shortcut-edit-" + this.model.attributes.id).val("");
      this.util.setFocusOnDefaultElement(e);
      var context = !!this.options.context ? this.options.context :
                    this.model.attributes.widgetOptions.activityfeed.context;
      UserWidgetUtil.displayUserWidget(context, this.$el);
      this.showSeeMoreLink(this.$el.find(this.contentTypeElement));
      this.options.parentCollectionView.triggerMethod("update:scrollbar");
      this.$el.find(".esoc-social-comment-icon-edit:first-child").trigger("focus");
    },
    onUpdateComment: function (e) {
      var commentList = $("#esoc-social-comment-container").find(".esoc-social-comment-list-item");
      if (commentList.length <= 1) {
        $(commentList).removeClass("status-attachment-init-min-height" +
                                   " status-attachment-alone-init-min-height" +
                                   " esoc-edit-init-min-height");
      }
      var editElement          = this.$el.find(".esoc-social-comment-data-textarea-" +
                                               this.model.attributes.id),
          editValue            = editElement !== undefined ? editElement.val().trim() : "",
          commentId            = this.model.attributes.id,
          updateCommentRESTUrl = this.model.attributes.actions.edit.href,
          shortcutId           = $("#esoc-social-comment-cs-shortcut-edit-" + commentId),
          formData             = new FormData(),
          desktopDoc           = $("#esoc-social-commentedit-desktop-attachment-" + commentId),
          replace;
      formData.append("commands", "default");
      if (shortcutId.val().length > 0) {
        formData.append("ATT_ID", parseInt(shortcutId.val(), 10));
        replace = true;
      } else if (desktopDoc.length > 0) {
        var file = desktopDoc[0].files[0];
        if (file) {
          formData.append("AddDesktopDoc", file);
          replace = true;
        } else {
          replace = false;
        }
      } else {
        replace = this.$el.find(".esoc-social-comment-edit").is(":hidden");
      }
      this.util.showMask(this.$el);
      formData.append("status", editValue);
      formData.append("id", commentId);
      formData.append("replace", replace);
      var that = this;
      if (editValue !== "") {
        var ajaxParams = {
          "url": that.options.connector.connection.url + updateCommentRESTUrl,
          "type": that.model.attributes.actions.edit.method,
          "data": formData,
          "itemview": this,
          "baseURL": this.model.collection.baseURL
        };
        this.util.updateWithAttachmentAjaxCall(ajaxParams).done(function () {
          that.$el.find(".esoc-social-comment-icon-edit:first-child").trigger("focus");
        });
      } else {
        this.$el.find("#esoc-social-comment-edit-" + this.model.attributes.id).trigger("focus");
        this.util.hideMask(this.$el);
      }
      this.$el.find("#esoc-social-attachment-icon-delete-" +
                    this.model.attributes.id).removeClass("esoc-social-comment-edit");
    },
    onHideComment: function (e) {
    },
    onRemoveModel: function (e) {
      this.util.showMask(this.$el);
      var commentId     = this.model.attributes.id,
          deleteRESTUrl = this.model.attributes.actions.deleteAction.href,
          that          = this,
          ajaxParams    = {
            "url": that.options.connector.connection.url + deleteRESTUrl + "?id=" +
                   commentId,
            "type": that.model.attributes.actions.deleteAction.method,
            "model": this,
            "async": false,
            "requestType": "CommentDelete"
          };
      var args = {
        dialogtitle: this.templateHelpers().messages.deleteCommentheader,//TODO: code re-factor on "this.templateHelpers().messages"
        dialogmessage: this.templateHelpers().messages.confirmationText1 + " " +
                       this.templateHelpers().messages.confirmationText2,
        ajaxParams: ajaxParams
      }
      this.util.openConfirmationDialog(args);
    },
    destroy: function (e) {
      this.undelegateEvents();
      this.off();
      this.remove();
    },
    onCommentReply: function (e) {
      var parentNodeId = "#reply_" + this.model.id;
      var isVisible = $(parentNodeId).is(':visible');
      if (isVisible) {
        $(parentNodeId).children('div').remove();
        $(parentNodeId).hide();
        this.$el.find(".esoc-social-comment-icon-holder").show();
        this.options.parentCollectionView.triggerMethod("update:scrollbar");
        this.util.setCommentDialogPointer();
      } else {
        var previousId            = parseInt($('div[id^="reply_"]:visible').attr('data-id'), 10),
            currentId             = this.model.id,
            containerHeight       = $("#esoc-social-comment-container").height(),
            containerScrollHeight = $("#esoc-social-comment-container")[0].scrollHeight,
            containerScrollTop    = $("#esoc-social-comment-container")[0].scrollTop,
            divHeight             = $('div[id^="reply_"]:visible').height(),
            _eleContainer         = $("#esoc-social-comment-container")[0];

        if ((currentId < previousId) && ( (divHeight < containerScrollTop) ||
                                          ((divHeight - containerScrollTop) < containerHeight) )) {
          _eleContainer.scrollHeight = containerScrollHeight - divHeight;
          _eleContainer.scrollTop = containerScrollTop - divHeight;
        }
        $('div[id^="reply_"]').children('div').remove();// removes already opened replies DOM elements.
        $('div[id^="reply_"]').hide();
        var getRepliesOptions = {
              parentNode: parentNodeId,
              csBaseUrl: this.options.model.collection.baseURL,
              context: this.options.context,
              getRepliesUrl: Url.appendQuery(this.model.attributes.actions.reply.href, ''),
              conversation_id: this.model.attributes.extended_info.conversation_id,
              item_id: this.model.id,
              parentCommentModel: this.model,
              parentCollectionView: this.options.parentCollectionView,
              canReply: this.model.attributes.actions.reply.can_reply,
              socialActions: this.model.collection.socialActions
            },
            replyColl         = new ReplyCollectionBase(getRepliesOptions);
        this.$el.find(".esoc-reply-emoji").trigger("focus");
      }
    },
    onAttachmentDelete: function (e) {
      if (e.target.classList.contains("esoc-social-comment-edit")) {
        e.preventDefault();
        e.stopPropagation();
        this.$el.find("#esoc-social-comment-attachment-" + this.model.attributes.id).hide();
        this.$el.find("#esoc-social-comment-edit-attachment-" + this.model.attributes.id).show();
        this.$el.find(".esoc-social-edit-icons").removeClass(
            "esoc-social-icon-when-no-attachment ");
        this.$el.find(".esoc-comment-emoji").removeClass("esoc-social-input-when-no-attachment");
        this.$el.find(".esoc-social-comment-data").removeClass("esoc-social-editable-icons");
        this.$el.find(".esoc-social-comment-data-textarea").removeClass(
            "esoc-social-editable-icons");
        $("#esoc-social-comment-edit-" + this.model.attributes.id).trigger("focus");
      } else {
        var that = this;
        var commentId = this.model.attributes.id;
        var updateCommentRESTUrl = this.model.attributes.actions.edit.href;
        var _eleDiv = $("<div />").html(this.model.attributes.text);
        var eleTextVal = _eleDiv.text();
        var ajaxParams = {
          "url": that.options.connector.connection.url + updateCommentRESTUrl,
          "type": that.model.attributes.actions.edit.method,
          "dataType": "text",
          "data": {
            id: commentId,
            status: eleTextVal,
            ATT_ID: 0,
            replace: true
          },
          "model": that,
          "requestType": "AttachmentDelete"
        };
        var args = {
          dialogtitle: this.templateHelpers().messages.attachmentDeleteTitle,
          dialogmessage: this.templateHelpers().messages.attachmentDeleteDescription,
          ajaxParams: ajaxParams
        }
        this.util.openConfirmationDialog(args);
      }
    },
    uploadAttachment: function (e) {
      var commentId            = this.model.attributes.id,
          updateCommentRESTUrl = this.model.attributes.actions.edit.href,
          shortcutIdHolder     = $("#esoc-social-comment-cs-shortcut-" + this.model.attributes.id +
                                   "-attachfiles"),
          formData             = new FormData(),
          desktopDoc           = this.$el.find("#esoc-social-commentlist-desktop-attachment-" +
                                               commentId);
      formData.append("commands", "default");
      if (shortcutIdHolder.val() !== "") {
        formData.append("ATT_ID", parseInt(shortcutIdHolder.val(), 10));
      } else if (desktopDoc.length > 0) {
        var file = desktopDoc[0].files[0];
        if (file) {
          formData.append("AddDesktopDoc", file);
        }
      }
      this.$el.find(".esoc-comment-attachment").hide()
      this.$el.find(".item-separator").hide();
      this.util.showMask(this.$el);
      var _eleDiv = $("<div />").html(this.model.attributes.text);
      var eleTextVal = _eleDiv.text();
      formData.append("status", eleTextVal);
      formData.append("id", commentId);
      var ajaxParams = {
        "url": this.options.connector.connection.url + updateCommentRESTUrl,
        "type": this.model.attributes.actions.edit.method,
        "data": formData,
        "itemview": this,
        "baseURL": this.model.collection.baseURL,
        "commentId": commentId,
        "feedType": "comment"
      };
      this.util.updateWithAttachmentAjaxCall(ajaxParams);
      shortcutIdHolder.val('');
      this.util.resetAttachmentInput(desktopDoc, this.model.collection.socialActions);
    },
    selectAttachment: function (e) {
      if (this.model.collection.socialActions.attachementsEnabled &&
          !this.model.collection.socialActions.shortcutsEnabled) {
        var that         = this,
            desktopInput = this.$el.find("#esoc-social-commentlist-desktop-attachment-" +
                                         this.model.attributes.id);
        desktopInput.off("change").on("change", function (e) {
          if (desktopInput.val().length > 0) {
            that.uploadAttachment(e);
          }
        });
        this.openBrowseWindow(e, desktopInput);
      } else if (!this.model.collection.socialActions.attachementsEnabled &&
                 this.model.collection.socialActions.shortcutsEnabled) {
        var args = {
          shortcutIdHolder: $("#esoc-social-comment-cs-shortcut-" + this.model.attributes.id +
                              "-attachfiles"),
          "itemview": this,
          "attachFiles": true
        };
        this.util.openTargetPicker(this.$el.find('.esoc-social-attachment-file'), args);
      }
    },
    openBrowseWindow: function (e, desktopInput) {
      desktopInput.val("");
      desktopInput.trigger("click");
    },
    applyemoji: function (e) {
      if (this.model.attributes !== undefined && this.model.attributes.id !== undefined) {
        this.$el.find(".emoji-wysiwyg-editor").remove();
        var _textArea = this.$el.find(".esoc-social-comment-data-textarea-" +
                                      this.model.attributes.id);
        _textArea.val(_textArea.val().replace(/&quot;/gi, "\""));
        var $wysiwyg = _textArea.emojiarea({
          path: this.util.commonUtil.getEmojiPath(this.options.connector),
          wysiwyg: true,
          button: '.esoc-social-comment-emotion-' + this.model.attributes.id,
          id: 'esoc-social-comment-edit-textarea-' + this.model.attributes.id,
          parent: this.$el.find("#esoc-social-edit-comment-icons-" + this.model.attributes.id),
          container: $("#esoc-social-comment-container"),
          util: this.util,
          widget: $(".esoc-social-comment-widget")
        });
        var _emojiArea = this.$el.find(".emoji-wysiwyg-editor");
        _emojiArea.addClass("esoc-comment-emoji").attr({
          "id": "esoc-social-comment-edit-" + this.model.attributes.id,
          "data-text": this.templateHelpers().messages.writeAComment
        });
        _textArea.hide();
        _emojiArea.hide();
        var commentData = _emojiArea.html();
        commentData = this.util.commonUtil.onClickableUrl(commentData);
        this.$el.find(".esoc-social-comment-data").html(commentData);
        _emojiArea.html(_emojiArea.html().replace(/\n/gi, "<br>"));
      }
      var suggestionOptions = {
        context: this.options.context,
        connector: this.options.connector,
        element: this.$el.find("#esoc-social-comment-edit-" + this.model.attributes.id),
        appendToElement: this.$el.find("[id^='esoc-suggestion-comment-list_']")
      }
      this.util.triggerAutoCompleteSuggestion(suggestionOptions);
      this.$el.find(".emoji-wysiwyg-editor").removeAttr("autocomplete");
    },
    onEmojiPress: function (e) {
      if (e.target.parentNode.id === "esoc-social-edit-comment-icons-" + this.model.attributes.id) {
        if ($("#esoc-social-comment-container").find(".esoc-social-comment-list-item").length <=
            1) {
          $("#esoc-social-comment-container").find(".esoc-social-comment-list-item").addClass(
              "esoc-edit-init-min-height");
        }
      }

      if (this.model.attributes !== undefined && this.model.attributes.id !== undefined) {
        this.util.hidePopover(this.$el.find(".esoc-social-comment-emotion-" +
                                            this.model.attributes.id));
      }
      e.stopPropagation();
    },
    onAttachementPress: function (e) {
      this.$el.find(".emoji-menu").hide();
    },
    onCommentEmojiMentionMouseClick: function (event) {
      this.util.setCursorPositionAtStartOFMention(event);
    },
    inactivateUnsupportedSubType: function (objModel) {
      var inactiveClass           = 'esoc-social-comment-inactive',
          defaultActionController = this.options.parentCollectionView.defaultActionController;
      if ($.inArray(this.model.attributes.feed_event_type, [7, 8, 9]) !== -1) {
        this.sgmModel = this.util.commonUtil.buildNodeModel(objModel,
            this.options.connector);
        if (defaultActionController && !defaultActionController.hasAction(this.sgmModel)) {
          this.$el.find(".esoc-social-comment-data .esoc-social-mime-icon").addClass(
              inactiveClass);
          this.$el.find(".esoc-social-comment-data .esoc-object-name").addClass(inactiveClass);
        }
      } else if (!!this.model.attributes.extended_info &&
                 !!this.model.attributes.extended_info.attachment_subtype) {
        this.attachmentModel = this.util.commonUtil.buildNodeModel(objModel,
            this.options.connector, true);
        if (defaultActionController && !defaultActionController.hasAction(this.attachmentModel)) {
          this.$el.find("#esoc-social-comment-attachment-" + this.model.attributes.id +
                        " .esoc-social-attachment-name").addClass(inactiveClass);
          this.$el.find("#esoc-social-comment-attachment-" + this.model.attributes.id +
                        " .esoc-social-attachment-icon").addClass(inactiveClass);
        }

      }
    }
  });
  return CommentListItem;
});

csui.define('esoc/widgets/socialactions/social.infinite.scrolling.behavior',['csui/controls/tile/behaviors/infinite.scrolling.behavior'
], function (InfiniteScrollingBehavior) {
  "use strict";

  var SocialInfiniteScrollingBehavior = InfiniteScrollingBehavior.extend({
    _checkScrollPositionFetch: function () {
      var commentsContainer = this._content;
      var containerHeight = commentsContainer.height();
      var containerScrollHeight = commentsContainer[0].scrollHeight;
      var containerScrollTop = commentsContainer.scrollTop();
      if ((containerScrollTop + 30) >= (containerScrollHeight - containerHeight)) {
        this._content.find(".esoc-social-comment-load-more:last").trigger("click");
      }
    }
  });

  return SocialInfiniteScrollingBehavior;

});

csui.define('esoc/widgets/socialactions/commentscollection.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/marionette',
  'csui/behaviors/default.action/default.action.behavior',
  'esoc/widgets/socialactions/commentslist.view',
  'esoc/widgets/socialactions/util',
  'csui/controls/tile/behaviors/perfect.scrolling.behavior',
  'esoc/widgets/socialactions/social.infinite.scrolling.behavior'
], function ($, _, Backbone, Marionette, DefaultActionBehavior, CommentsListView, Util,
    PerfectScrollingBehavior, InfiniteScrollingBehavior) {
  var CommentsCollectionView = Marionette.CollectionView.extend({
    tagName: 'ul',
    className: 'comments-list',
    childView: CommentsListView,
    util: Util,
    constructor: function CommentsCollectionView(options) {
      this.childViewOptions = options;
      this.childViewOptions.parentCollectionView = this;
      Marionette.CollectionView.prototype.constructor.apply(this, arguments);
      this.listenTo(this.collection, "remove sync", this.triggerMethod("update:scrollbar"));
    },
    events: {
      "click .esoc-social-comment-load-more": "loadMoreItems"
    },
    onRender: function () {
      var self = this;
      this.$el.find(".esoc-social-comment-list-item").hide();
      this.util.setCommentDialogPointer();
        $(window).on("resize", function (e) {
            if ($("[id*=esoc-social-comment-widget]") && $("[id*=esoc-social-comment-widget]").length > 0) {
                self.util.setCommentDialogPointer();
            }
      });
    },
    behaviors: {
      PerfectScrolling: {
        behaviorClass: PerfectScrollingBehavior,
        suppressScrollX: true
      },
      InfiniteScrolling: {
        behaviorClass: InfiniteScrollingBehavior
      },
      DefaultAction: {
        behaviorClass: DefaultActionBehavior
      }
    },
    childEvents: {
      'click:item': 'onClickItem',
      'click:attachment': 'onClickAttachment'
    },
    onClickItem: function (target) {
      var objectArgs = {
        "node": target.sgmModel,
        "callingViewInstance": this
      }
      this.util.commonUtil.openItem(objectArgs);

    },
    onClickAttachment: function (target) {
      var objectArgs = {
        "node": target.attachmentModel,
        "callingViewInstance": this
      }
      this.util.commonUtil.openItem(objectArgs);
    },
    loadMoreItems: function (e) {
      if (!this.collection.models[this.collection.models.length - 1].attributes.noMoreData) {
        delete this.collection.defaults.params[this.util.commonUtil.globalConstants.SINCE_ID];
        this.collection.defaults.params[this.util.commonUtil.globalConstants.MAX_ID] = e.target.id;
        this.collection.fetch({remove: false});
      }
    }
  });
  return CommentsCollectionView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/socialactions/commentsheadertemplate',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "    <div id=\"esoc-social-comment-form-container\" class=\"esoc-social-comment-form-container\">\r\n      <div class=\"esoc-social-comment-form-mask\"></div>\r\n      <div id=\"esoc-social-comment-form-buttons-container\"\r\n           class=\"row-fluid esoc-social-form-minheight\">\r\n        <div class=\"esoc-social-comment-avatar-container\">\r\n          <!-- TODO: need to replace this image with current logged-in user's profile image and remove the background related css properties -->\r\n          <span id=\"esoc-social-default-avatar\" class=\"image_user_placeholder\r\n          esoc-social-comment-default-avatar\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n          <img id=\"esoc-social-comment-avatar\" class=\"binf-img-circle esoc-social-comment-avatar\"\r\n               src=\"#\" alt=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\"/>\r\n        </div>\r\n        <div class=\"esoc-social-comment-input-container\">\r\n          <div class=\"esoc-social-add-comment-data\" style=\"display:none;\"></div>\r\n                    <textarea id=\"esoc-social-comment-input\"\r\n                              class=\"binf-form-control esoc-social-comment-input\"\r\n                              placeholder=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.writeAComment : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.writeAComment : stack1), depth0))
    + "\"></textarea>\r\n\r\n          <div id=\"esoc-suggestion-comment-header\"></div>\r\n          <div id=\"esoc-social-textinput-button-holder\" class=\"esoc-social-textinput-button-holder\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachementsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.program(4, data, 0)})) != null ? stack1 : "")
    + "            <a href=\"javascript:void(0);\"\r\n               class=\"esoc-social-comment-header-emotion esoc-social-comment-emoticon\"\r\n               id=\"esoc-social-comment-emoticon\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.emoticon : stack1), depth0))
    + "\"></a>\r\n            <button id=\"esoc-social-comment-submit\" disabled\r\n                    class=\"binf-btn binf-btn-primary esoc-social-comment-submit\" type=\"submit\"\r\n                    title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.post : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.post : stack1), depth0))
    + "</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachementsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "      <input type=\"hidden\" id=\"esoc-social-comment-cs-shortcut\" value=\"\" />\r\n    </div>\r\n";
},"2":function(depth0,helpers,partials,data) {
    var stack1;

  return "              <a href=\"javascript:void(0);\" id=\"esoc-social-comment-attachment\"\r\n                 class=\"esoc-social-comment-attachment esoc-social-comment-attachment-header\"\r\n                 data-html=\"true\" data-binf-placement=\"bottom\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachFile : stack1), depth0))
    + "\"></a>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.shortcutsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "                <a href=\"javascript:void(0);\" id=\"esoc-social-comment-attachment\"\r\n                   class=\"esoc-social-comment-attachment esoc-social-comment-attachment-header\"\r\n                   data-html=\"true\" data-binf-placement=\"bottom\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attachFile : stack1), depth0))
    + "\"></a>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.shortcutsEnabled : stack1),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(8, data, 0)})) != null ? stack1 : "");
},"8":function(depth0,helpers,partials,data) {
    return "          <input type=\"file\" id=\"esoc-social-comment-desktop-attachment\" name=\"AddDesktopDoc\"\r\n                 style=\"display:none\" />\r\n";
},"10":function(depth0,helpers,partials,data) {
    return "    <hr>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<div id=\"esoc-social-comment-create-container\" class=\"\">\r\n  <div id=\"esoc-social-comment-title-bar\" class=\"esoc-social-comment-title-bar\">\r\n    <div id=\"esoc-social-comment-title\"\r\n         class=\"esoc-social-comment-title\"> "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + " </div>\r\n    <div id=\"esoc-social-comment-title-actions\" class=\"esoc-social-comment-title-actions\">\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-comment-close-button\"\r\n         class=\"esoc-social-comment-close-button\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.close : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.close : stack1), depth0))
    + "\"></a>\r\n      <a href=\"javascript:void(0);\" id=\"esoc-social-focus-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.close : stack1), depth0))
    + "\"></a>\r\n    </div>\r\n  </div>\r\n  <div id=\"esoc-social-comment-warning\"\r\n       class=\"binf-alert binf-alert-danger esoc-social-warning esoc-social-comment-warning\" role=\"alert\">\r\n    "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.commentBlank : stack1), depth0))
    + "\r\n  </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.commentingOpen : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "  <div id=\"esoc-social-comment-loading-indication\"\r\n       class=\"esoc-social-comment-loading-indication\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.loadingComments : stack1), depth0))
    + "</div>\r\n  <div id=\"esoc-social-comment-container\" class=\"binf-container esoc-social-comment-container\"></div>\r\n</div>\r\n\r\n<div class=\"binf-modal binf-fade\" id=\"esoc-social-dialog\" tabindex=\"-1\" role=\"dialog\"\r\n     aria-labelledby=\"myModalTitle\" aria-hidden=\"true\">\r\n  <div class=\"binf-modal-dialog\">\r\n    <div class=\"binf-modal-content esoc-social-modal-content\">\r\n      <div class=\"binf-modal-header\">\r\n        <h4 class=\"binf-modal-title\" id=\"myModalTitle\"></h4>\r\n      </div>\r\n      <div class=\"binf-modal-body\">\r\n        <div class=\"binf-row\">\r\n          <div class=\"binf-col-sm-2\">\r\n            <span class=\"esoc-dialog-warning-icon\"></span>\r\n            <!-- need to change to warning icon as per mockup-->\r\n          </div>\r\n          <div id=\"myModalConfirmationText\" class=\"binf-col-sm-8\"></div>\r\n        </div>\r\n        <div class=\"binf-row esoc-dialog-warning-margin\">\r\n          <div class=\"binf-col-md-12 esoc-dialog-warning-buttons-align-middle\">\r\n            <button type=\"button\"\r\n                    class=\"binf-btn binf-btn-default esoc-social-dialog-delete-button\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.deleteComment : stack1), depth0))
    + "</button>\r\n            <button type=\"button\" class=\"binf-btn binf-btn-default esoc-social-dialog-cancel-button\"\r\n                    data-binf-dismiss=\"modal\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.cancel : stack1), depth0))
    + "</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>";
}});
Handlebars.registerPartial('esoc_widgets_socialactions_commentsheadertemplate', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/socialactions/commentsheader.view',[
  "csui/lib/jquery",
  "csui/lib/underscore",
  "csui/lib/backbone",
  "csui/lib/marionette",
  "csui/lib/handlebars",
  'csui/utils/url',
  'csui/utils/contexts/factories/user',
  'csui/utils/user.avatar.color',
  'csui/utils/contexts/factories/connector',
  "csui/controls/mixins/keyboard.navigation/modal.keyboard.navigation.mixin",
  "i18n!esoc/widgets/socialactions/nls/lang",
  "hbs!esoc/widgets/socialactions/commentsheadertemplate",
  "esoc/widgets/socialactions/util",
  "esoc/widgets/socialactions/comment.model",
  "esoc/widgets/socialactions/mentions",
  "esoc/lib/jquery.emojiarea/jquery.emojiarea.custom",
  "esoc/lib/jquery.emojiarea/packs/custom/emojis",
  'css!esoc/lib/jquery.emojiarea/jquery.emojiarea.css',
  'css!esoc/lib/jquery.emojiarea/jquery.emojiarea.custom.css',
  "csui/lib/binf/js/binf"
], function ($, _, Backbone, Marionette, Handlebars, Url, UserModelFactory, UserAvatarColor,
    ConnectorFactory, ModalKeyboardNavigationMixin, lang, CommentsHeaderTemplate, Util, Comment,
    Mentions, EmojisArea, Emojis) {
  var self = null;
  var CommentsHeaderView = Marionette.ItemView.extend({
    initialize: function (options) {
      this.options = options;
      this.options.connector = this.options.connector ||
                               this.options.context.getObject(ConnectorFactory);
      self = this;
    },
    options: {},
    _elements: {
      csuiSocialCommentInput: null,
      csuiSocialSubmitButton: null,
      csuiSocialButtonsContainer: null,
      csuiSocialAvatarIcon: null,
      csuiSocialFormContainer: null,
      csuiSocialCommentInputHolder: null,
      csuiSocialCommentInputHiddenData: null,
      csuiSocialFormWarning: null,
      csuiSocialCommentShortcut: null,
      csuiSocialCommentAttachmentName: null,
      csuiSocialCommentAttachmentSize: null,
      csuiSocialCommentAttachmentIcon: null,
      csuiSocialCommentAttachmentPopupTitle: null,
      csuiSocialCommentAttachmentPopupContent: null,
      csuiSocialCommentDiv: null
    },
    textareaScrollThresh: 45,
    tagName: "div",
    util: Util,
    emojis: Emojis,
    emojiarea: new EmojisArea(),
    mentions: Mentions,
    template: CommentsHeaderTemplate,
    templateHelpers: function () {
      var messages = {
        comments: lang.comments,
        commentBlank: lang.commentBlank,
        post: lang.post,
        posting: lang.posting,
        writeAComment: lang.writeAComment,
        loadingComments: lang.loadingComments,
        confirmationText1: lang.confirmationText1,
        confirmationText2: lang.confirmationText2,
        cancel: lang.cancel,
        deleteComment: lang.deleteComment,
        deleteCommentheader: lang.deleteCommentheader,
        close: lang.close,
        emoticon: lang.emoticon,
        attachFile: lang.attachFile
      };
      this.uniqueId = _.uniqueId();
      messages = $.extend(this.options.socialActions, messages); // TODO: Need to handle with comment widget header model... decision pending whether we need to refresh the complete comments list or append on top the list.
      return {
        messages: messages
      };
    },
    events: {
      "keydown .esoc-social-attachment-file": "_refreshtabs",
      "click #esoc-social-comment-create-container": "onCommentDialogClick",
      "touchstart #esoc-social-comment-create-container": "onCommentDialogClick",
      "focus .esoc-header-emoji": "onCommentFormFocus",
      "click .esoc-header-emoji": "onCommentInputFocus",
      "click #esoc-social-comment-submit": "onCommentFormSubmit",
      "input .esoc-header-emoji": "onCommentFormKeypress",
      "click #esoc-social-comment-close-button": "onCloseButton",
      "keydown #esoc-social-comment-close-button": "onClickWithSpaceKey",
      "click #esoc-social-comment-emoticon": "onEmojiPress",
      "keydown #esoc-social-comment-emoticon": "onClickWithSpaceKey",
      "click .esoc-social-comment-attachment": "onAttachementPress",
      "keydown .esoc-social-comment-attachment": "onClickWithSpaceKey",
      "change #esoc-social-comment-input": "onCommentChange",
      "keyup .esoc-header-emoji": "onCommentEmojiKeypress",
      "mousedown .esoc-header-emoji .esoc-user-mention": "onCommentEmojiMentionMouseDown",
      "keydown .esoc-social-attachment-cs": "onCSAttachmentKeyDown",
      "keydown .esoc-social-attachment-desktop": "onDesktopAttachmentKeyDown"
    },
    onClickWithSpaceKey: function (e) {
      Util.applySpaceKeyEvent(e);
    },
    onCSAttachmentKeyDown: function (e) {
      var keyCode = e.keyCode || e.which;
      if (keyCode === 9 && e.shiftKey) {
        $(e.target.closest(".binf-popover")).binf_popover('hide');
      }
    },
    onDesktopAttachmentKeyDown: function (e) {
      var keyCode = e.keyCode || e.which;
      if (keyCode === 9 && !e.shiftKey) {
        $(e.target.closest(".binf-popover")).binf_popover('hide');
      }
    },
    onRender: function (e) {
      this._elements.csuiSocialCommentInput = this.$el.find("#esoc-social-comment-input");
      this._elements.csuiSocialCommentInputHiddenData = this.$el.find(
          ".esoc-social-add-comment-data");
      this._elements.csuiSocialSubmitButton = this.$el.find("#esoc-social-comment-submit");
      this._elements.csuiSocialButtonsContainer = this.$el.find(
          "#esoc-social-textinput-button-holder");
      this._elements.csuiSocialAvatarIcon = this.$el.find("#esoc-social-comment-avatar");
      this._elements.csuiSocialFormContainer = this.$el.find("#esoc-social-comment-form-container");
      this._elements.csuiSocialFormWarning = this.$el.find(".esoc-social-warning");
      this._elements.csuiSocialCommentShortcut = this.$el.find("#esoc-social-comment-cs-shortcut");
      this._elements.csuiSocialCommentAttachmentName = this.$el.find(
          "#esoc-social-comment-header-attachment-name");
      this._elements.csuiSocialCommentAttachmentSize = this.$el.find(
          "#esoc-social-comment-header-attachment-size");
      this._elements.csuiSocialCommentAttachmentIcon = this.$el.find(
          "#esoc-social-comment-attachment");
      this._elements.csuiSocialCommentAttachmentPopupTitle = this.$el.find(
          "#esoc-social-selected-attachment-dialog-title");
      this._elements.csuiSocialCommentAttachmentPopupContent = this.$el.find(
          "#esoc-social-selected-attachment-dialog");
      this._elements.csuiSocialSubmitButton.hide();
      this._elements.csuiSocialButtonsContainer.hide();
      var attachmentPopOverArgs = {
        socialActions: this.options.socialActions,
        id: "comment",
        uniqueId: this.uniqueId,
        desktopAttachmentInputId: "esoc-social-comment-desktop-attachment",
        shortcutIdHolder: this._elements.csuiSocialCommentShortcut,
        connector: this.options.connector
      };
      this.util.showAttachmentPopOver(this._elements.csuiSocialCommentAttachmentIcon,
          attachmentPopOverArgs);
      this._elements.csuiSocialCommentAttachmentIcon.attr("title", lang.attachFile);
      this.onCommentFormBlur();
      var that = this;
      $(window).on("resize", function (e) {
        that.adjustCommentAreaWidth(e, true);
      });
      this.listenTo(this, 'collection:sync:callback', _.bind(function () {
        var commentDlgWrapper = this.$el.closest('.esoc-social-comment-widget');
        commentDlgWrapper.show();
        var commentDlgWrapperParent = commentDlgWrapper.parent(),
            commentDlgPointer       =
                commentDlgWrapperParent.find('.esoc-socialactions-widget-arrow-right').length ?
                commentDlgWrapperParent.find('.esoc-socialactions-widget-arrow-right') :
                commentDlgWrapperParent.find('.esoc-socialactions-widget-arrow-left');

        commentDlgPointer.show();
        Util.setCommentDialogPointer();

        this.addFocus();
        this.applyReplyEmoji();

        commentDlgWrapper.find("[id^='esoc-social-comment-widget-pointer']").on("click",
            function (e) {
              self.onCommentDialogClick(e);
            });

        this._elements.csuiSocialCommentDiv = this.$el.find(".esoc-header-emoji");

        var commentHeaderEle = commentDlgWrapper.find('#esoc-social-comment-header');
        if (commentHeaderEle.length) {
          commentHeaderEle.on("paste", _.bind(function (e) {
            var maxCharters           = this.util.commonUtil.globalConstants.MAX_CHAR_LIMIT,
                existingCommentLength = commentDlgWrapper.find(
                    '#esoc-social-comment-input').val().length;
            this.util.commonUtil.onCommentFormPaste(e, existingCommentLength, maxCharters);
            commentDlgWrapper.find(
                '#esoc-social-comment-input').innerHTML = commentHeaderEle.html();
            this.onCommentChange(e);
          }, this));

          commentHeaderEle.off("mouseleave").on("mouseleave", _.bind(function (e) {
            this.onCommentFormMouseLeave(e);
          }, this));

          this.util.commonUtil.preventDrop(commentHeaderEle.find('.esoc-header-emoji'));

          commentHeaderEle.trigger("focus");
          this.engageModalKeyboardFocusOnOpen(this.el);

        }

      }, this));
    },

    _refreshtabs: function () {
      this.triggerMethod('dom:refresh');
    },
    onCommentDialogClick: function (e) {
      if (!(e.target.id === 'esoc-social-comment-header' ||
            e.target.id === 'esoc-social-comment-emoticon' ||
            e.target.id === 'esoc-social-comment-attachment' ||
            e.target.id === 'esoc-social-comment-desktop-attachment' ||
            $(e.target).parents('#esoc-social-comment-header').length > 0 ||
            $(e.target).closest('.binf-popover').length > 0 ||
            e.target.id === 'esoc-social-comment-submit')) {
        this.onCommentFormBlur(e);
      }
      var commentContainer = $("#esoc-social-comment-container").find(
          ".esoc-social-comment-list-item");
      if (!($(e.target.parentNode).hasClass("esoc-social-attachment-cs")) &&
          !($(e.target.parentNode).hasClass("esoc-social-attachment-desktop")) &&
          !($(e.target).hasClass("esoc-social-attachment-file-alone")) &&
          !($(e.target).hasClass("esoc-social-comment-attachment")) &&
          !($(e.target).hasClass("esoc-social-comment-emoticon")) &&
          !$((e.target.parentNode.parentNode)).hasClass("myemoji") &&
          !$(e.target).hasClass("esoc-social-attachment-file")) {
        setTimeout(function () {
          $(commentContainer).removeClass("status-attachment-alone-init-min-height");
          $(commentContainer).removeClass("esoc-attachment-init-min-height").removeClass(
              "esoc-emoji-init-min-height");
          $("#esoc-social-comment-container").find(".esoc-social-comment-list-item").removeClass(
              "esoc-edit-init-min-height").removeClass("status-attachment-init-min-height");
        }, 100);
      }
    },
    onShow: function () {
      this.user = this.options.context.getModel(UserModelFactory);
      this.listenTo(this.model, 'sync', function () {
        if (!!this.user && !!this.user.get('id')) {
          this.updateUserProfilePicture(this.user.get('id'), this.user);
        }
      });
    },
    addFocus: function (e) {
      $(".cs-expanded.activityfeed-expand.esoc.cs-dialog.binf-modal.binf-fade.binf-in").removeAttr(
          'tabindex').prop("disabled", true);
      $("[id^='esoc-social-comment-widget-mask_']").attr('tabindex', '-1');
      $(".cs-expanded.activityfeed-expand.esoc.cs-dialog.binf-modal.binf-fade.binf-in").removeAttr(
          'tabindex').prop("disabled", false);
    },
    onCommentFormMouseLeave: function (e) {
      this._elements.csuiSocialCommentInput[0].innerHTML = this._elements.csuiSocialCommentInput.val();
    },
    updateUserProfilePicture: function (userId, user) {
      var initials = user.get('initials');
      var userbackgroundcolor = UserAvatarColor.getUserAvatarColor(user.attributes);
      if (userId !== undefined && userId !== "") {
        var commentAvatar = this.$el.find("#esoc-social-comment-avatar"),
            defaultAvatar = this.$el.find("#esoc-social-default-avatar");
        defaultAvatar[0].innerText = initials;
        commentAvatar.addClass("esoc-userprofile-img-" + userId);
        defaultAvatar.addClass("esoc-user-default-avatar-" + userId);
        defaultAvatar.css('background', userbackgroundcolor);
        var userProfilePicOptions = {
          userid: userId,
          context: this.options.context,
          photoElement: commentAvatar,
          defaultPhotElement: defaultAvatar
        };
      }
      this.util.commonUtil.setProfilePic(userProfilePicOptions);
    },
    onCommentInputFocus: function (e) {
      this.$el.find(".esoc-header-emoji").trigger("focus");
    },
    onCommentFormFocus: function (e) {
      var commentValue = this._elements.csuiSocialCommentInput.val().trim();
      if (commentValue !== undefined && commentValue !== '') {
        this.$el.find('#esoc-social-comment-submit').prop("disabled",  false);
      } else {
        this.$el.find('#esoc-social-comment-submit').prop("disabled", true);
      }
      e.stopPropagation();
      this.$el.find(".esoc-header-emoji").addClass("emoji-wysiwyg-editor-focus");
      this._elements.csuiSocialButtonsContainer.css({display: "block"});
      if (this.util.commonUtil.isIE() && this.$el.find(".esoc-header-emoji").length > 0 &&
          this.$el.find(".esoc-header-emoji")[0].textContent.length === 0) {
        this.$el.find(".esoc-header-emoji").attr("data-text", "");
      }
      if (!this.options.socialActions.attachementsEnabled &&
          !this.options.socialActions.shortcutsEnabled) {
        this._elements.csuiSocialButtonsContainer.addClass(
            "esoc-social-textinput-without-attachment");
        this.$el.find(".esoc-header-emoji").addClass("esoc-social-input-when-no-attachment");
        this._elements.csuiSocialCommentInputHiddenData.addClass(
            "esoc-social-input-when-no-attachment");
      }
      this._elements.csuiSocialButtonsContainer.animate({opacity: 1.0}, 0);
      this._elements.csuiSocialAvatarIcon.animate({opacity: 1.0}, 0);
      this._elements.csuiSocialButtonsContainer.show();
      this._elements.csuiSocialSubmitButton.show();
      var adjustWidth = (this.$el.find(".esoc-header-emoji").html() === "" ||
                         this.$el.find(".esoc-header-emoji").html() === "<br>") ? true : false;
      this.adjustCommentAreaWidth(e, adjustWidth);
      // hiding attachment popover if opened
      if (this.$el.find(".esoc-social-attachment-popover").is(':visible')) {
        this._elements.csuiSocialCommentAttachmentIcon.binf_popover('hide');
        $(".esoc-social-comment-dialog-att-minheight").removeClass(
            "esoc-social-comment-dialog-att-minheight");
        $(".esoc-social-comment-dialog-minheight").removeClass(
            "esoc-social-comment-dialog-minheight");
        this.util.setCommentDialogPointer();
      }
    },
    adjustCommentAreaWidth: function (e, adjustWidth) {
      var commentElement = this.$el.find(".esoc-header-emoji");
      if (adjustWidth) {
        commentElement.css("width", "");
        commentElement.width(this.$el.find(".esoc-header-emoji").width() -
                             parseInt(
                                 this.$el.find("#esoc-social-comment-submit").outerWidth() + 14,
                                 10));
        this.$el.find("#esoc-suggestion-comment-header").width(commentElement.outerWidth());
      }
    },
    onCommentFormBlur: function (e) {
      if (!this.$el.find(".esoc-social-comment-form-mask").is(':visible')) {
        var commentString    = this._elements.csuiSocialCommentInput.val(),
            contentDivString = this.$el.find(".esoc-header-emoji").html(),
            desktopDoc       = this.$el.find("#esoc-social-comment-desktop-attachment"),
            attachedFile,
            shortcutVal;
        if (desktopDoc.length > 0 && desktopDoc[0].files && desktopDoc[0].files.length > 0) {
          attachedFile = desktopDoc[0].files[0];
        }
        if (this.util.isValidInput(this._elements.csuiSocialCommentShortcut)) {
          shortcutVal = parseInt(this._elements.csuiSocialCommentShortcut.val(), 10);
        }
        if ((commentString === undefined || commentString === '') &&
            (attachedFile === undefined || attachedFile === '') && shortcutVal === undefined &&
            (contentDivString === undefined || contentDivString === '' ||
             contentDivString === "<br>")) {
          this._elements.csuiSocialAvatarIcon.animate({opacity: 0.3}, 0);
          if (this.options.socialActions !== undefined &&
              !this.options.socialActions.attachementsEnabled &&
              !this.options.socialActions.shortcutsEnabled) {
            this._elements.csuiSocialButtonsContainer.removeClass(
                "esoc-social-textinput-without-attachment");
            this.$el.find(".esoc-header-emoji").removeClass("esoc-social-input-when-no-attachment");
            this._elements.csuiSocialCommentInputHiddenData.removeClass(
                "esoc-social-input-when-no-attachment");
          }
          this.$el.find(".esoc-header-emoji").removeClass("emoji-wysiwyg-editor-focus");
          this._elements.csuiSocialButtonsContainer.hide();
          this._elements.csuiSocialSubmitButton.hide();
          this._elements.csuiSocialButtonsContainer.animate({opacity: 0.0}, 0, function () {
            $(this).css({display: "none"});
          });
          this.$el.find(".esoc-header-emoji").css("width", "95%");
          $("#esoc-social-comment-header").removeClass("emoji-wysiwyg-editor-focus").trigger('blur');
          if (this.util.commonUtil.isIE() && this.$el.find(".esoc-header-emoji").length > 0 &&
              this.$el.find(".esoc-header-emoji")[0].textContent.length === 0) {
            $(".esoc-header-emoji").attr("data-text",
                this.templateHelpers().messages.writeAComment);
          }
          if (this._elements.csuiSocialCommentAttachmentIcon.attr("data-binf-original-title") &&
              this._elements.csuiSocialCommentAttachmentIcon.attr(
                  "data-binf-original-title").length >
              0) {
            this.util.hideAttachmentPopup(this._elements.csuiSocialCommentAttachmentIcon,
                this.$el.find("#esoc-social-comment-desktop-attachment"),
                this.options.socialActions);
          }
        }
      }
    },
    onCommentChange: function (event) {
      var commentValue = this._elements.csuiSocialCommentInput.val().trim();
      if (commentValue !== undefined && commentValue !== '') {
        this.$el.find('#esoc-social-comment-submit').prop("disabled", false);
      } else {
        this.$el.find('#esoc-social-comment-submit').prop("disabled", true);
      }
      //refreshes tabindexes
      this.triggerMethod('dom:refresh');
      var commentString = this._elements.csuiSocialCommentInput.val(),
          _e            = event || window.event,
          maxCharLimit  = this.util.commonUtil.globalConstants.MAX_CHAR_LIMIT;
      if (commentString.length > maxCharLimit) {
        var commentStr = commentString.substr(0, maxCharLimit);
        this._elements.csuiSocialCommentInput[0].innerHTML = commentStr;
        this._elements.csuiSocialCommentInputHiddenData.val(commentStr);
        this.$el.find("#esoc-social-comment-header").html("")[0].textContent = commentStr;
        this.util.commonUtil.addEmoji(this.$el.find("#esoc-social-comment-header"), false,
            this.options.connector);
        this.$el.find("#esoc-social-comment-header").trigger("focus");
        this.util.commonUtil.placeCaretAtEnd(this.$el.find("#esoc-social-comment-header"));
        _e.preventDefault();
        this.util.setCommentDialogPointer();
      }
    },
    onCommentFormSubmit: function (e) {
      e.stopPropagation();
      e.preventDefault();
      this._elements.csuiSocialCommentAttachmentIcon.binf_popover('hide');
      var commentValue = this._elements.csuiSocialCommentInput.val().trim(),
          formData     = new FormData(),
          desktopDoc   = this.$el.find("#esoc-social-comment-desktop-attachment"),
          attachedFile,
          shortcutVal,
          /* FormData methods are not supporting in some browsers like IE and some other modules
          need separate data fields so we are passing some temporary JSON object*/
          jsonFormData = {};
      if (desktopDoc.length > 0) {
        attachedFile = desktopDoc[0].files[0];
      }
      if (this._elements.csuiSocialCommentShortcut.val().length > 0) {
        shortcutVal = parseInt(this._elements.csuiSocialCommentShortcut.val(), 10);
      }
      if (commentValue.length) {
        this.$el.find('.esoc-social-comment-form-mask').show();
        this.$el.find('#esoc-social-comment-submit').html(lang.posting);
        this.adjustCommentAreaWidth(e, true);
        this.util.showMask(this.$el.find('.esoc-social-comment-form-mask'));
        this._elements.csuiSocialCommentInput.val("");
        if (shortcutVal) {
          jsonFormData["ATT_ID"] = shortcutVal;
        }
        else if (attachedFile) {
          jsonFormData["AddDesktopDoc"] = attachedFile;
        }
        jsonFormData["status"] = commentValue;
        jsonFormData["eventtype"] = 1;
        if (this.options.statusInfo && this.options.statusInfo.getStatusUrl) {
          jsonFormData["in_reply_to_status_id"] = this.options.statusInfo.conversation_id;
        } else {
          jsonFormData["in_comment_on_obj_id"] = this.options.nodeID;
        }
        //Append all the fields from jsonFormData to formData
        _.each(jsonFormData, function (value, key) {
          formData.append(key, value);
        });
        // create a new comment
        new Comment({}, {
          connector: this.model.connector
        }).save({}, {
          wait: true,
          data: formData,
          jsonFormData: jsonFormData,
          currentNodeModel: this.model.currentNodeModel,
          success: this.onCommentSubmitSuccess.bind(this),
          error: this.onCommentSubmitFailure.bind(this, desktopDoc)
        });
      }

      if (commentValue === undefined || commentValue === '') {
        this.$el.find("#esoc-social-comment-header").trigger("focus");
      } else {
        this.util.resetAttachmentInput(desktopDoc, this.options.socialActions);
        this._elements.csuiSocialCommentShortcut.val("");
      }
    },
    removeMask: function (e) {
      self.$el.find('#esoc-social-comment-submit').html(lang.post);
      self.adjustCommentAreaWidth(e, true);
      self.util.hideMask(self.$el.find('.esoc-social-comment-form-mask'));
      self.$el.find('.esoc-social-comment-form-mask').hide();
    },
    onCommentSubmitFailure: function (desktopDoc, model, response/*, options*/) {
      this._elements.csuiSocialCommentShortcut.val("");
      this.$el.find(".esoc-header-emoji").html("");
      this.removeMask();
      this.util.hideAttachmentPopup(this._elements.csuiSocialCommentAttachmentIcon,
          desktopDoc, this.options.socialActions);
      var args = {
        parent: ".esoc-social-comment-widget",
        errorContent: response.responseJSON ?
                      (response.responseJSON.errorDetail ? response.responseJSON.errorDetail :
                       response.responseJSON.error) : lang.defaultErrorMessageCommentSubmit
      }
    },
    onCommentSubmitSuccess: function (model, response/*, options*/) {
      self.options.commentAction = true;
      var totalComments = response.commentCount;
      if (totalComments === undefined) {
        totalComments = self.model.length + 1;
      }
      if (self.options.tablecellwidget) {
        self.util.commonUtil.updateCommentCount({
          currentNodeModel: self.options.currentNodeModel,
          commentCount: totalComments
        });
      }
      self.$el.find(".esoc-header-emoji")[0].textContent = "";
      self.removeMask();
      self.onCommentFormBlur();
      var collectionModelPosition = 0;
      if (self.options.statusInfo && self.options.statusInfo.getStatusUrl) {
        collectionModelPosition = 1;
      }
      self.util.resetAttachmentInput(self.$el.find("#esoc-social-comment-desktop-attachment"),
          self.options.socialActions);
      self._elements.csuiSocialCommentShortcut.val("");
      self._elements.csuiSocialCommentAttachmentIcon.binf_popover('hide');
      self.$el.find("#esoc-social-comment-input").text("").height("").trigger("blur");
      self.$el.find("#esoc-social-comment-form-container").height("");
      self.$el.find("#esoc-social-comment-warning").hide();
      self.$el.find("#esoc-social-comment-container").scrollTop(0);
      self.$el.find(".esoc-header-emoji").html("").trigger("blur");
      var collection = self.model;
      if (collection.length > collectionModelPosition) {
        var lastRenderedModelId = collection.at(collectionModelPosition).id;
        delete collection.defaults.params[self.util.commonUtil.globalConstants.MAX_ID];
        collection.defaults.params[self.util.commonUtil.globalConstants.SINCE_ID] = lastRenderedModelId;
        collection.fetch({remove: false, at: collectionModelPosition});
      } else {
        if (collection.length === 0) {
          delete collection.defaults.params[self.util.commonUtil.globalConstants.MAX_ID];
        }
        collection.fetch({});
      }
      self.$el.find(".comments-list").scrollTop(0);
      setTimeout(function () {
        self.$el.find("#esoc-social-comment-header").trigger("focus");
      }, 200);
      self.$el.find('#esoc-social-comment-submit').prop("disabled", true);
      this.trigger('dom:refresh');
    },
    onCloseButton: function (e) {
      $("[id^='esoc-social-comment-widget-mask_']").removeAttr('tabindex');
      $(".cs-expanded.activityfeed-expand.esoc.cs-dialog.binf-modal.binf-fade.binf-in").attr(
          'tabindex', '-1');
      $(".esoc-user-widget-dialog.cs-dialog.binf-modal.binf-fade.binf-in").attr('tabindex',
          '-1').prop("disabled", false);
      var element = this.options.currentTarget;
      if (element) {
        $(element).trigger("focus");
        setTimeout(function () {
          $(element).trigger("focus");
        }, 1);
      }
      $(document).off("keyup");
      this.util.commonUtil.unbindWidget(this.options);
      this.disengageModalKeyboardFocusOnClose();
      $(".esoc-acitivityfeed-collection").css("overflow", "");
      if ($(document.body).hasClass('binf-modal-open') &&
          $(document.body).hasClass('binf-comment-dialog-open')) {
        $(document.body).removeClass('binf-modal-open');
        $(document.body).removeClass('binf-comment-dialog-open');
      } else if ($(document.body).hasClass('binf-comment-dialog-open')) {
        $(document.body).removeClass('binf-comment-dialog-open');
      } else {
        $(document.body).addClass('binf-modal-open');
      }
    },
    onEmojiPress: function (e) {
      var _editor = this._elements.csuiSocialCommentDiv;
      this.util.hidePopover(_editor);
      var getElementOffset = function (ele) {
        return ele.is(':visible') ? ele.offset() : {top: 0, left: 0};
      };
      var baseElementPosition = getElementOffset($(this.options.baseElement)),
          editorPosition      = getElementOffset(_editor);
      if (parseInt(baseElementPosition.top - editorPosition.top, 10) < 150) {
        $(".esoc-social-comment-dialog-att-minheight").removeClass(
            "esoc-social-comment-dialog-att-minheight");
        $(".esoc-social-comment-widget").addClass("esoc-social-comment-dialog-minheight");
        this.util.setCommentDialogPointer();
      }
      e.stopPropagation();
    },
    onAttachementPress: function (e) {
      this.$el.find(".emoji-menu").hide();
      $(".esoc-social-comment-widget").removeClass("esoc-social-comment-dialog-minheight");
      this.util.setCommentDialogPointer();
    },
    applyReplyEmoji: function (e) {
      this.$el.find(".emoji-wysiwyg-editor").remove();
      this.$el.find('#esoc-social-comment-input').emojiarea({
        path: this.util.commonUtil.getEmojiPath(this.options.connector),
        wysiwyg: true,
        button: '.esoc-social-comment-header-emotion',
        id: 'esoc-social-comment-header',
        parent: this.$el.find("#esoc-social-textinput-button-holder"),
        util: this.util,
        widget: $(".esoc-social-comment-widget")
      });
      this.$el.find(".emoji-wysiwyg-editor").addClass("esoc-header-emoji").attr({
        "id": "esoc-social-comment-header",
        "data-text": this.templateHelpers().messages.writeAComment
      });
      this.listenToOnce(this.model, 'sync', function () {
        var suggestionOptions = {
          context: this.options.context,
          connector: this.options.connector,
          element: this.$el.find("#esoc-social-comment-header"),
          appendToElement: this.$el.find("#esoc-suggestion-comment-header")
        };
        this.util.triggerAutoCompleteSuggestion(suggestionOptions);
        this.$el.find(".emoji-wysiwyg-editor").removeAttr("autocomplete");
      });
    },
    onCommentEmojiKeypress: function (event) {
      this.util.onMentionNameEdit(event);
    },
    onCommentEmojiMentionMouseDown: function (event) {
      this.util.setCursorPositionAtStartOFMention(event);
    }
  });
  ModalKeyboardNavigationMixin.mixin(CommentsHeaderView.prototype);
  return CommentsHeaderView;
});


csui.define('css!esoc/widgets/socialactions/socialactions',[],function(){});
csui.define('esoc/widgets/socialactions/commentscollectionwidget',[
  'csui/lib/underscore',
  'csui/lib/handlebars',
  "csui/lib/marionette",
  "csui/lib/jquery",
  "csui/utils/connector",
  'i18n!esoc/widgets/socialactions/nls/lang',
  "esoc/widgets/socialactions/commentscollection.model",
  "esoc/widgets/socialactions/socialactions.model",
  "esoc/widgets/socialactions/commentscollection.view",
  "esoc/widgets/socialactions/commentsheader.view",
  "esoc/widgets/socialactions/util",
  "esoc/widgets/common/util",
  'csui/utils/contexts/factories/connector',
  'esoc/lib/jquery-ui',
  'css!esoc/widgets/socialactions/socialactions.css'
], function (_, Handlebars, Marionette, $, Connector, lang, CommentsCollectionModel,
    SocialActionsModel, CommentsCollectionView, CommentsHeaderView, Util, CommonUtil,
    ConnectorFactory) {
  function CommentsCollectionWidget(options) {

    $(document).on('keyup',
        {callbackFun: Util.commonUtil.unbindWidget, dialogOptions: options, util: Util},
        Util.closeCommentDialog);
    var CSID;
    options = options ? options : {};
    options.CSID = options.nodeID = options.baseElement.dataset ?
                                    options.baseElement.dataset.value :
                                    $(options.baseElement).attr("data-value");

    if (options.CSID === "") {
      var roiInfo = Util.createRemoteObject(options);
      if (roiInfo.error !== "") {
        if ($(options.baseElement).parent().parent().find(".esoc-error-socialactions").length > 0) {
          $(options.baseElement).parent().parent().find(".esoc-error-socialactions").show();
          $(options.baseElement).parent().parent().find(".binf-panel-title").html(roiInfo.error);
          $(options.baseElement).hide();
        } else {
          $(options.baseElement).text(roiInfo.error);
        }
        this.show = function () {
        };
        return;
      }
      options.CSID = options.nodeID = CSID = roiInfo.csid;
      $(options.baseElement).attr("data-value", CSID);
    } else if (parseInt(options.CSID, 10) > 0) {
      options.statusInfo = {};
    } else {
      CSID = options.CSID;
    }

    var compositeID       = !!options.socialActionsInstanse && options.socialActionsInstanse.options.model.id ?
                            (options.CSID + "_" + options.socialActionsInstanse.options.model.id) : options.CSID,
        parentNodeId      = "#esoc-social-comment-widget_" + compositeID,
        parentNodePointer = "#esoc-social-comment-widget-pointer_" + compositeID,
        commentsModelMask = "#esoc-social-comment-widget-mask_" + compositeID;

    var isvisible = $(parentNodeId).is(':visible');
    if (isvisible) {
      $(parentNodeId).remove();
      $(parentNodePointer).remove();
      $(commentsModelMask).remove();
      this.show = function () {
      };
    } else {
      var commentsDialog, commentsDialogPointer, commentsDialogMask;
      if (!document.getElementById("esoc-social-comment-widget_" + compositeID)) {
        if (parentNodeId.indexOf("esoc-social-comment-widget") > 0) {
          Util.commonUtil.unbindWidget(this.options);
        }
        commentsDialog = document.createElement('div');
        commentsDialog.id = 'esoc-social-comment-widget_' + compositeID;

        commentsDialog.setAttribute("class", "esoc-social-comment-widget esoc");
        commentsDialogPointer = document.createElement('div');
        commentsDialogPointer.id = 'esoc-social-comment-widget-pointer_' + compositeID;

        commentsDialogMask = document.createElement('div');
        commentsDialogMask.id = 'esoc-social-comment-widget-mask_' + compositeID;
      } else {
        commentsDialog = document.getElementById("esoc-social-comment-widget_" + compositeID);
        commentsDialogPointer = document.getElementById("esoc-social-comment-widget-pointer_" +
                                                        compositeID);
        commentsDialogMask = document.getElementById("esoc-social-comment-widget-mask_" +
                                                     compositeID);
      }

      //To differentiate modal within modal adding class specific to comment box
      if (!$(document.body).hasClass('binf-modal-open')) {
        $(document.body).addClass('binf-comment-dialog-open');
      }
      Util.widgetDialog = commentsDialog;
      Util.widgetDialogPointer = commentsDialogPointer;
      Util.widgetDialogMask = commentsDialogMask;


      if (options.socialActionsInstanse && options.socialActionsInstanse.model &&
          options.socialActionsInstanse.options.connector) {
        options.connector = options.socialActionsInstanse.model.connector;
      } else {
        options.connector = options.context.getObject(ConnectorFactory);
      }
      //if(options.socialActionsInstanse && options.socialActionsInstanse.model && options.socialActionsInstanse.model.attributes && options.socialActionsInstanse.model.attributes.socialactions) {
      if (false) {
        options.socialActions = options.socialActionsInstanse.model.attributes.socialactions;
      } else {
        options.params = {page: 1, data_id: CSID};
        options.rockey = options.roid = "";
        options.csid = CSID;
        var socialActionsModel = new SocialActionsModel("", options);
        options.model = socialActionsModel;
		if (!!options.socialActionsInstanse) {
          options.socialActions = options.socialActionsInstanse.model.attributes.socialactions;
		}
      }
      if (!options.context) {
        options.context = options.socialActionsInstanse.options.context;
      }
      Util.widgetBaseElement = options.baseElement;

      var commentsRootWidget = $(parentNodeId);
      options.params = {page: 1, data_id: CSID};

      var commentsCollectionModel = new CommentsCollectionModel(options);
      commentsCollectionModel.baseURL = options.connector.connection.url;
      commentsCollectionModel.nodeID = options.nodeID;
      commentsCollectionModel.socialActions = options.socialActions;
      if (options.maxMessageLength) {
        commentsCollectionModel.maxMessageLength = options.maxMessageLength;
      }
      options.model = commentsCollectionModel;
      this.show = function () {
        var defaultContainer = $.fn.binf_modal.getDefaultContainer();
        $(defaultContainer).append(commentsDialogMask).append(commentsDialog).append(
            commentsDialogPointer);

        $("[id^='esoc-social-comment-widget-mask_']").on('keydown click',
            {callbackFun: Util.commonUtil.unbindWidget, dialogOptions: options},
            Util.closeCommentDialog);
        $(window).on('popstate hashchange',
            {callbackFun: Util.commonUtil.unbindWidget, dialogOptions: options},
            Util.closeCommentDialog);
        this.initializeWidget();
        CommonUtil.createEmojiIcons();
      };

      this.initializeWidget = function () {
        var commentsHeaderContainerRegion = new Marionette.Region({
          el: parentNodeId
        }),
        commentsHeaderView = new CommentsHeaderView(options);
        commentsHeaderContainerRegion.show(commentsHeaderView);
        options.originatingView = commentsHeaderContainerRegion.currentView;
        var commentsListRegion = new Marionette.Region({
          el: "#esoc-social-comment-container" // internal, found in commentsHeaderContainerRegion
        });
        var commentsCollectionView = new CommentsCollectionView({
          context: commentsCollectionModel.context,
          collection: commentsCollectionModel,
          commentConfigOptions: options,
          commentsHeaderView: commentsHeaderView,
          sort: true
        });
        commentsListRegion.show(commentsCollectionView);
        // get the comments from the server
        commentsCollectionModel.fetch({
          success: function() {
            commentsHeaderView.trigger('collection:sync:callback');
          },
          error: commentsCollectionModel.fetchError
        });
        // transform supporting views
        commentsRootWidget.css({display: "block"});
        commentsRootWidget.animate({opacity: 1.0});
      };

      this.getConfig = function () {
        return options;
      };
    }
  }

  return CommentsCollectionWidget;
});


csui.define('css!esoc/widgets/tablecell/impl/social',[],function(){});
csui.define('esoc/widgets/activityfeedwidget/activityfeeditem.view',[
  'require',
  'csui/lib/underscore',
  'csui/lib/jquery',
  'csui/lib/backbone',
  'csui/lib/marionette',
  'csui/lib/moment',
  'csui/lib/handlebars',
  'csui/utils/contexts/factories/connector',
  'hbs!esoc/widgets/activityfeedwidget/activityfeed',
  'hbs!esoc/widgets/activityfeedwidget/activityfeedstandard',
  'hbs!esoc/widgets/activityfeedwidget/impl/activityfeedheader',
  'esoc/widgets/socialactions/commentscollectionwidget',
  'esoc/widgets/userwidget/userwidget',
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
  'esoc/widgets/common/util',
  'esoc/widgets/userwidget/util',
  'csui/utils/log',
  'csui/utils/url',
  'csui/utils/nodesprites',
  'csui/utils/node.links/node.links',
  'csui/utils/namedsessionstorage',
  'csui/lib/handlebars.helpers.xif',
  'css!esoc/widgets/tablecell/impl/social.css'
], function (_require, _, $, Backbone, Marionette, Moment, Handlebars, ConnectorFactory,
    ActivityFeedTemplate,
    ActivityFeedStandardTemplate, ActivityFeedHeaderTemplate, CommentsCollectionWidget, UserWidget,
    lang, CommonUtil, UserWidgetUtil, Log, Url, NodeSpriteCollection, nodeLinks,
    NamedSessionStorage) {
  var ActivityFeedItemView = Marionette.ItemView.extend({
    regions: {
      tableRegion: '#tableview'
    },
    momentJS: Moment,
    commonUtil: CommonUtil,
    log: Log,
    namedSessionStorage: new NamedSessionStorage(CommonUtil.globalConstants.ESOCIAL_USER_INFO),
    className: function () {
      if (!!!this.options.strdViewOptions) {
        return 'esoc-activityfeed-list-item binf-row object-group-item esoc-activityfeed-expanded-view';
      } else {
        return 'esoc-activityfeed-list-item binf-row object-group-item';
      }
    },
    template: ActivityFeedTemplate,
    templateHelpers: function () {

      var mimeTypeClass           = "csui-icon mime_document",
          attachmentMimeTypeClass = "",
          inactiveClass           = "",
          attachmentInactiveClass = "",
          objModel                = this.model, subType, defaultActionUrl, isSGMShortCut,
          defaultActionController = this.options.defaultActionController ?
                                    this.options.defaultActionController :
                                    this.options.parentCollectionView.defaultActionController;

      try {
        if (this.model.attributes.extended_info.display_icon_id === "") {
          mimeTypeClass = "";
        } else {
          isSGMShortCut = this.model.attributes.extended_info.subtype === 1 ? true : false;
          objModel.attributes.type = isSGMShortCut ?
                                     this.model.attributes.extended_info.sgm_original_sub_type :
                                     this.model.attributes.extended_info.subtype;
          objModel.attributes.mime_type = isSGMShortCut ?
                                          this.model.attributes.extended_info.sgm_original_mime_type :
                                          this.model.attributes.extended_info.mime_type;
          objModel.attributes.container = isSGMShortCut ?
                                          this.model.attributes.extended_info.sgm_original_container :
                                          this.model.attributes.extended_info.sgm_container;
          mimeTypeClass = NodeSpriteCollection.findClassByNode(objModel);
          this.sgmModel = this.commonUtil.buildNodeModel(objModel, objModel.connector);
          defaultActionUrl = nodeLinks.getUrl(this.sgmModel);
          if (defaultActionController) {
            if (!defaultActionController.hasAction(this.sgmModel)) {
              inactiveClass = "esoc-social-activityfeeditem-inactive";
            }
          }
        }

        if (this.model.attributes.extended_info.attachment_subtype !== "") {
          attachmentMimeTypeClass = "csui-icon mime_document";
          subType = this.model.attributes.extended_info.attachment_subtype;
          objModel.attributes.type = subType === 1 ?
                                     this.model.attributes.extended_info.attachment_original_sub_type :
                                     subType;
          objModel.attributes.mime_type = subType === 1 ?
                                          this.model.attributes.extended_info.attachment_original_mime_type :
                                          this.model.attributes.extended_info.attachment_mime_type;
          objModel.attributes.container = subType === 1 ?
                                          this.model.attributes.extended_info.attachment_original_container :
                                          this.model.attributes.extended_info.attachment_container;

          attachmentMimeTypeClass = NodeSpriteCollection.findClassByNode(objModel);

          this.attachmentModel = this.commonUtil.buildNodeModel(objModel, objModel.connector, true);
          if (defaultActionController) {
            if (!defaultActionController.hasAction(this.attachmentModel)) {
              attachmentInactiveClass = "esoc-social-activityfeeditem-inactive";
            }
          }

        }
      } catch (e) {
        this.log.error(e);
      }

      var messages = {
        commentLabel: lang.commentLabel,
        modifiedAt: lang.modifiedAt,
        shortcutAttachmentSubtype: this.commonUtil.globalConstants.SHORTCUT_ATTACHMENT_SUBTYPE,
        documentAttachmentSubtype: this.commonUtil.globalConstants.DOCUMENT_ATTACHMENT_SUBTYPE,
        mimeTypeClass: mimeTypeClass,
        attachmentMimeTypeClass: attachmentMimeTypeClass,
        inactiveClass: inactiveClass,
        attachmentInactiveClass: attachmentInactiveClass,
        more: lang.more,
        less: lang.less,
        comments: lang.comments,
        statusfeed: lang.statusfeed,
        userProfileLink: lang.userProfileLink,
        defaultActionUrl: defaultActionUrl
      }

      if (this.model.attributes.feed_event_type === 4) {
        messages.actionType = (this.model.attributes.extended_info.name !== "" &&
                               this.model.attributes.extended_info.conversation_id ===
                               this.model.attributes.id) ? lang.commentMsg : lang.replyMsg;
      }

      if (this.model.attributes.feed_event_type === 2) {
        messages.actionType = lang.commentMsg;
      }

      if (this.model.attributes.feed_event_type === 7) {
        messages.textmsg = lang.addMsg;
      }

      if (this.model.attributes.feed_event_type === 8) {
        messages.textmsg = lang.versionMsg;
      }
      messages.enableComments = this.model.collection.enableComments !== undefined ?
                                this.model.collection.enableComments : true;
      messages.status = lang.status;
      messages.version = lang.version;
      messages.isFirstItem = (this.model.collection.at(0).cid !== this.model.cid);

      return {
        uniqueId: _.uniqueId(),
        messages: messages
      };
    },
    events: {
      "click .esoc-socialactions-getcomments .esoc-social-comment-container": "getComments",
      "click .esoc-object-name, .esoc-social-mime-icon": "openItem",
      "click .esoc-social-attachment-name, .esoc-social-attachment-icon": "openAttachment",
      "click .esoc-see-more-activity": "showMoreContent",
      "click .esoc-see-less-activity": "showLessContent"
    },

    _elements: {},

    constructor: function ActivityFeedItemView(options) {
      options = options || {};
      this.options = options;
      this.isHeaderView = !!options.strdViewOptions && !!options.strdViewOptions.headerView;
      Marionette.ItemView.prototype.constructor.apply(this, arguments);
      this.options.connector = this.options.connector ||
                               this.options.context.getObject(ConnectorFactory);
      if (this.isHeaderView) {
        options.model.attributes.showCommentIcon = options.strdViewOptions.showCommentIcon;
        this.template = ActivityFeedHeaderTemplate;
      } else if (!!options.strdViewOptions) {
        options.model.attributes.showCommentIcon = options.strdViewOptions.showCommentIcon;
        this.template = ActivityFeedStandardTemplate;
      } else {
        this.template = ActivityFeedTemplate;
      }
      this.listenTo(this.model, "change", this.render);
      this.on("commentdialog:action", function (e) {
        this.trigger("childview:comment:action");
      });
      this.on("start:notification", function (e) {
        this.trigger("childview:start:notification");
      });

    },

    openItem: function (event) {
      event.preventDefault();
      event.stopPropagation();
      this.trigger("click:item", this);
    },

    openAttachment: function () {
      this.trigger("click:attachment", this);
    },

    onRender: function (e) {
      var userWidgetOptions,
          defaultOptions,
          userId = this.model.attributes.user.id;

      if (!UserWidget) {
        UserWidget = _require('esoc/widgets/userwidget/userwidget');
      }
      if (this.model.attributes.user !== undefined && this.model.attributes.user.id !== undefined) {
        defaultOptions = {
          userid: this.model.attributes.user.id,
          context: this.options.context,
          showUserProfileLink: true,
          showMiniProfile: true
        };
        userWidgetOptions = _.extend(
            {placeholder: this.$el.find('.esoc-user-widget')}, defaultOptions);
        UserWidget.getUser(userWidgetOptions);
        var userProfilePicOptions = _.extend({
          placeholder: this.$el.find('.esoc-profileimg-block'),
          userWidgetWrapperClass: "esoc-activityfeed-userprofile-pic",
          showUserWidgetFor: 'profilepic'
        }, defaultOptions);
        UserWidget.getUser(userProfilePicOptions);
      }
      if (this.model.attributes.feed_event_type === 2 &&
          this.model.attributes.in_reply_to_user_id !== "") {
        var replyWidgetOptions = _.extend({}, userWidgetOptions);
        replyWidgetOptions.userid = this.model.attributes.in_reply_to_user_id;
        replyWidgetOptions.placeholder = this.$el.find('.esoc-reply-user-widget');
        UserWidget.getUser(replyWidgetOptions);
      }
      var context = this.options.context;
      UserWidgetUtil.displayUserWidget(context, this.$el);
    },

    onShow: function (e) {

      if (this.options.index === 0) {
        this.$el.find("a").prop("tabindex", "-1").attr("data-cstabindex", "-1");
        this.$el.find(".esoc-profileimg-block a").prop("tabindex", "0").attr("data-cstabindex",
            "0");
      } else {
        this.$el.find("a").prop("tabindex", "-1").attr("data-cstabindex", "-1");
      }

      if (this.model.attributes.feed_event_type === 1) {
        this.$el.find(".esoc-commentinfo-block").addClass("esoc-commentinfo-status");
      }
      // Do not apply emoji for document creation and version added event types.
      if ($.inArray(this.model.attributes.feed_event_type, [7, 8, 9]) !== -1) {
        this.$el.find(".esoc-commentinfo-block").addClass("esoc-commentinfo-sgm");
        this.$el.find(".esoc-social-comment-data").css("white-space", "inherit");
        if (this.$el.find(".esoc-description").length > 0) {
          var objDesc = this.$el.find(".esoc-description").html();
          objDesc = this.commonUtil.onClickableUrl(objDesc, true);
          this.$el.find(".esoc-description").html(objDesc);
        }
      } else {
        this.commonUtil.addEmoji(this.$el.find(".esoc-social-comment-data"), true,
            this.options.connector);
      }
      if (this.model.attributes.feed_event_type === 9) {
        var sgmText = this.commonUtil.onClickableUrl(this.model.attributes.text, true);
        if (this.model.attributes.extended_info.subtype === 1) {
          sgmText = sgmText.replace('[MimeType]',
              "<span class='csui-icon-group esoc-social-mime-icon'>" +
              "<span class='" + this.templateHelpers().messages.mimeTypeClass +
              "'></span>" +
              "<span class='csui-icon csui-icon-shortcut-overlay'></span>" +
              "</span>" +
              "</span>");
        } else {
          sgmText = sgmText.replace('[MimeType]',
              "<span class='" + this.templateHelpers().messages.mimeTypeClass +
              " esoc-social-mime-icon'></span>");
        }
        this.$el.find(".esoc-social-comment-data").html(sgmText);
        this.$el.find(".esoc-social-comment-data").addClass("esoc-social-sgm-attr-change");
        this.$el.find(".esoc-object-name").attr("title", this.model.attributes.extended_info.name);
        this.$el.find(".esoc-social-mime-icon").attr("title",
            this.model.attributes.extended_info.name);
        this.$el.find(".esoc-object-name").addClass(this.templateHelpers().messages.inactiveClass);
        this.$el.find(".esoc-social-mime-icon").addClass(
            this.templateHelpers().messages.inactiveClass);
      }
      if (!UserWidget) {
        UserWidget = _require('esoc/widgets/userwidget/userwidget');
      }

      var context = this.options.context;
      this.$el.find(".esoc-old-user-display-name").each(function () {
        var userWidgetOptions = {
          userid: $(this).data("userid"),
          context: context,
          placeholder: this,
          showUserProfileLink: true,
          showMiniProfile: true
        };
        UserWidget.getUser(userWidgetOptions);

      });
      this.$el.find(".esoc-new-user-display-name").each(function () {
        var userWidgetOptions = {
          userid: $(this).data("userid"),
          context: context,
          placeholder: this,
          showUserProfileLink: true,
          showMiniProfile: true
        };
        UserWidget.getUser(userWidgetOptions);

      });

      UserWidgetUtil.displayUserWidget(context, this.$el);
      this.showSeeMoreLink(this.$el.find(this.contentTypeElement));
      if (this.isHeaderView &&
          this.$el.find(".esoc-activityfeed-header").length > 0) {
        this.$el.find(".esoc-activityfeed-header").each(_.bind(function (idx) {
          var tsWidth = $(this.$el.find(".esoc-activityfeed-actiontype")[idx]).width() +
                        (idx === 0 ? 10 : 7);

          tsWidth = 'calc(100% - ' + tsWidth + 'px)';
          if (idx === 0) {
            $(this.$el.find(".esoc-activityfeed-header" +
                            " .esoc-commentinfo-block .esoc-userwidget-wrapper")).css(
                "max-width", tsWidth);
          } else {
            $(this.$el.find(".esoc-activityfeed-header .esoc-comment-msg" +
                            " .esoc-userwidget-wrapper")).css(
                "max-width", tsWidth);
          }

        }, this));
      }
      if (!this.isHeaderView &&
          this.$el.find(".esoc-reply-user-widget").length > 0) {
        var statusLabelWidth = this.$el.find(".esoc-activityfeed-status-action").width() + 10;
        statusLabelWidth = 'calc(100% - ' + statusLabelWidth + 'px)';
        $(this.$el.find(".esoc-reply-user-widget .esoc-userwidget-wrapper")).css("max-width",
            statusLabelWidth);
      }
    },

    showSeeMoreLink: function (_ele) {
      if ($(_ele).length > 0) {
        var _e = $(_ele).eq(0);
        $(_e).addClass("esoc-see-more-content");
        var that = this;
        setTimeout(function () {
          if (that.commonUtil.isTextOverflown(_e)) {
            that.$el.find(".esoc-see-more").show();
            $(_e).addClass("esoc-see-more-activity");
            $(_e).find("a.esoc-see-more-activity").removeClass("esoc-hide-element");
          }
        }, 2000);
      }
    },

    contentTypeElement: ".esoc-extended-view-mode",
    showMoreContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.commonUtil.showMoreContent(e, this, this.$el.find(this.contentTypeElement));
        this.$el.find('.esoc-extended-view-mode').trigger("focus");
      }
    },

    showLessContent: function (e) {
      if (window.getSelection().toString() === "") {
        this.commonUtil.showLessContent(e, this, this.$el.find(this.contentTypeElement));
      }
    },

    addFocus: function (e) {
      $(".esoc-user-widget-dialog.cs-dialog.binf-modal.binf-fade.binf-in").removeAttr(
          'tabindex').attr("disabled", "true");
      $("[id^='esoc-social-comment-widget-mask_']").attr('tabindex', '-1');
    },

    getComments: function (e) {
      var commentConfig = {
        baseElement: e.target,
        currentTarget: e.currentTarget,
        socialActionsInstanse: this,
        placeholder: this.model.collection.placeholder,
        context: this.options.context,
        maxMessageLength: this.options.model.attributes.maxMessageLength,
        activityfeeditem: this
      };
      this.addFocus(e);

      var responseData,
          that = this;
      if (this.model.attributes.feed_event_type !== 1 &&
          this.model.attributes.feed_event_type !== 2) {
        var csId = this.model.attributes.data_id;
        var restUrl = Url.combine(this.options.connector.connection.url,
                this.commonUtil.REST_URLS.csGetROI) + "CSID=" + csId;

        $.ajax(this.options.connector.extendAjaxOptions({
          type: "GET",
          async: false,
          cache: false,
          url: restUrl,
          success: function (response) {
            responseData = JSON.parse(JSON.stringify(response.available_settings));
          },
          error: function () {
            that.log.error("TEMP.  ERROR Getting available settings");
          }
        }));
      } else {
        // for status and it's replies make everything available if pulse is enabled at global level.
        responseData = {
          "attachementsEnabled": true,
          "commentingOpen": true,
          "commentsEnabled": true,
          "CSID": 0,
          "likesEnabled": true,
          "shortcutsEnabled": true,
          "taggingEnabled": true,
          "threadingEnabled": true
        }
      }
      commentConfig.socialActionsInstanse.model.attributes.socialactions = responseData;
      commentConfig.statusInfo = {};
      if (this.model.attributes.feed_event_type &&
          (this.model.attributes.feed_event_type === 1 ||
           this.model.attributes.feed_event_type === 2)) {
        commentConfig.statusInfo = {
          "getStatusUrl": this.model.attributes.actions.filter(function (obj) {
            return obj.signature === "reply";
          })[0].href,
          "conversation_id": this.model.attributes.extended_info.conversation_id,
          "item_id": this.model.attributes.id
        }
      }
      //TODO: need to avoid this tile view calls once comment dialog is opened.
      //clearInterval(this.model.collection.widgetOptions.notificationInterval);
      clearInterval(this.model.collection.widgetOptions.expNotificationInterval);
         _require(['esoc/widgets/socialactions/commentscollectionwidget'], function (CommentsCollectionWidget) {
        var commentsDialog           = new CommentsCollectionWidget(commentConfig);
        commentsDialog.show();
        $(document.activeElement).trigger("blur");
        var _ele = $("#esoc-social-comment-title").eq(0);
        $(_ele).trigger("focus");
        document.activeElement = _ele;
        $(".esoc-acitivityfeed-collection").css("overflow", "hidden");
      });
    }
  });
  return ActivityFeedItemView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/impl/emptyactivityfeed',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var helper;

  return "<div class=\"esoc-empty-activityfeed-message\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.emptyActivityFeed || (depth0 != null ? depth0.emptyActivityFeed : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"emptyActivityFeed","hash":{}}) : helper)))
    + "\"><p\r\n    class=\"esoc-empty-activityfeed-text\">"
    + this.escapeExpression(((helper = (helper = helpers.emptyActivityFeed || (depth0 != null ? depth0.emptyActivityFeed : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"emptyActivityFeed","hash":{}}) : helper)))
    + "</p></div>";
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_impl_emptyactivityfeed', t);
return t;
});
/* END_TEMPLATE */
;

csui.define('css!esoc/widgets/activityfeedwidget/activityfeed',[],function(){});
csui.define('esoc/widgets/activityfeedwidget/emptyactivityfeed.view',['csui/lib/underscore',
  'csui/lib/jquery',
  'csui/lib/marionette',
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
  'hbs!esoc/widgets/activityfeedwidget/impl/emptyactivityfeed',
  "css!esoc/widgets/activityfeedwidget/activityfeed.css"
], function (_, $, Marionette, lang, EmptyActivityFeedTemplate) {
  var EmptyActivityFeedView = Marionette.ItemView.extend({
    className: 'esoc-empty-activityfeed-wrapper',
    template: EmptyActivityFeedTemplate,
    templateHelpers: function () {
      return {
        emptyActivityFeed: !!this.options && !!this.options.parentCollectionView &&
                           (_.contains(['userwidget', 'metadata'],
                               this.options.parentCollectionView.options.origin)) ?
                           lang.emptyactivityfeedforuserprofile : lang.emptyactivityfeed
      };
    },
    constructor: function EmptyActivityFeedView(options) {
      Marionette.ItemView.prototype.constructor.apply(this, arguments);
    }
  });
  return EmptyActivityFeedView;
});
csui.define('esoc/widgets/utils/adaptivepoll',['module'], function(module) {

    var Adaptivepoll = function (_callback, __localStorageKey, _defaultInterval) {
        var self = this;
        this.init = function (args) {
            this.timer = 0;
            this.iterations = 0;
            this.PERIOD_VISIBLE = _defaultInterval;
            this.IDLE_TIMEOUT = (this.PERIOD_VISIBLE / 1000) - 1; //seconds
            this._localStorageKey = __localStorageKey; //'global_countdown_last_reset_timestamp';
            this._idleSecondsTimer = null;
            this._lastResetTimeStamp = (new Date()).getTime();
            this._localStorage = null;
            this.noActivity = false;
            this.lastState = 0;
            this.LAST_STATE_LIMIT = 8;
            this._callback = _callback;

            this.AttachEvent(document, 'click', this.ResetTime);
            this.AttachEvent(document, 'mousemove', this.ResetTime);
            this.AttachEvent(document, 'keypress', this.ResetTime);
            this.AttachEvent(window, 'load', this.ResetTime);
            this.param1 = args[3];
            this.param2 = args[4];

            try {
                this._localStorage = window.localStorage;
            }
            catch (ex) {
            }

            this._idleSecondsTimer = window.setInterval(this.CheckIdleTime, _defaultInterval);
            if (document.addEventListener) {
                document.addEventListener("visibilitychange", this.ResetTime);
            }
        };

        this.GetLastResetTimeStamp = function () {
            var lastResetTimeStamp = 0;
            if (self._localStorage) {
                lastResetTimeStamp = parseInt(self._localStorage[self._localStorageKey], 10);
                if (isNaN(lastResetTimeStamp) || lastResetTimeStamp < 0) {
                    lastResetTimeStamp = (new Date()).getTime();
                }

            } else {
                lastResetTimeStamp = self._lastResetTimeStamp;
            }

            return lastResetTimeStamp;
        };

        this.SetLastResetTimeStamp = function (timeStamp) {
            if (self._localStorage) {
                self._localStorage[self._localStorageKey] = timeStamp;
            } else {
                self._lastResetTimeStamp = timeStamp;
            }
        };

        this.ResetTime = function () {

            if(self.lastState > 1) {
                setTimeout(self._callback, 1000 , self.param1, self.param2);
            }
            self.noActivity = false;
            self.SetLastResetTimeStamp((new Date()).getTime());
            self.setUpdateTimer();
        };

        this.AttachEvent = function (element, eventName, eventHandler) {
            if (element.addEventListener) {
                element.addEventListener(eventName, eventHandler, false);
                return true;
            } else if (element.attachEvent) {
                element.attachEvent('on' + eventName, eventHandler);
                return true;
            } else {
                //nothing to do, browser too old or non standard anyway
                return false;
            }
        };

        this.RemoveEvent = function (element, eventName, eventHandler) {
            if (element.addEventListener) {
                element.removeEventListener(eventName, eventHandler, false);
                return true;
            } else if (element.attachEvent) {
                element.attachEvent('off' + eventName, eventHandler);
                return true;
            } else {
                //nothing to do, browser too old or non standard anyway
                return false;
            }
        };

        this.CheckIdleTime = function () {

            var currentTimeStamp = (new Date()).getTime();
            var lastResetTimeStamp = self.GetLastResetTimeStamp();
            var secondsDiff = Math.floor((currentTimeStamp - lastResetTimeStamp) / 1000);
            if (secondsDiff <= 0) {
                self.ResetTime();
                secondsDiff = 0;
            }

            if (secondsDiff >= self.IDLE_TIMEOUT) {

                if (!self.noActivity) {
                    self.noActivity = true;
                    self.setUpdateTimer();

                }
            }
        };


        this.setUpdateTimer = function () {

            if (self.noActivity) {
                clearInterval(self.timer);
                self.lastState = Math.min(self.LAST_STATE_LIMIT, self.lastState + 2);
                if (self.lastState === self.LAST_STATE_LIMIT) {
                    clearInterval(self.timer);
                } else {
                    self.timer = setInterval(self._callback, self.PERIOD_VISIBLE * self.lastState, self.param1, self.param2);
                }

            }
            else if (self.lastState > 0) {
                clearInterval(self.timer);
                self.timer = setInterval(self._callback, self.PERIOD_VISIBLE, self.param1, self.param2);
                self.lastState = 0;

            }

            return self.timer;
        };
        this.destroy = function () {
            clearInterval(self._idleSecondsTimer);
            clearInterval(self.timer);
            self.RemoveEvent(document, 'click', this.ResetTime);
            self.RemoveEvent(document, 'mousemove', this.ResetTime);
            self.RemoveEvent(document, 'keypress', this.ResetTime);
            self.RemoveEvent(window, 'load', this.ResetTime);
            document.removeEventListener("visibilitychange", self.ResetTime);

        };
        this.init(arguments);
    }
    return Adaptivepoll;
});

csui.define('esoc/widgets/activityfeedwidget/activityfeed.view',[
  'require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/marionette',
  'csui/utils/log',
  'csui/behaviors/default.action/default.action.behavior',
  'csui/utils/contexts/factories/connector',
  'esoc/widgets/activityfeedwidget/activityfeeditem.view',
  'esoc/widgets/activityfeedwidget/emptyactivityfeed.view',
  'esoc/widgets/common/util',
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
  'hbs!esoc/widgets/activityfeedwidget/impl/newupdates',
  'esoc/widgets/utils/adaptivepoll'
], function (_require, $, _, Backbone, Marionette, Log, DefaultActionBehavior, ConnectorFactory,
    ActivityFeedItemView, EmptyActivityFeedView, CommonUtil, afLang, NewUpdatesButtonTemplate,
    Adaptivepoll) {
  var self = null;
  var ActivityFeedView = Marionette.CollectionView.extend({
    tagName: 'div',
    className: 'activityfeed-list binf-container-fluid',
    childView: ActivityFeedItemView,
    emptyView: EmptyActivityFeedView,
    log: Log,
    commonUtil: CommonUtil,
    feedtype: "",
    options: {},
    childViewOptions: function (model, index) {
      return {
        context: this.options.context,
        defaultActionController: this.defaultActionController,
        parentCollectionView: !!this.options.parentCollectionView ?
                              this.options.parentCollectionView : this.options.activityfeed &&
                                                                  this.options.activityfeed.parentCollectionView,
        index: index
      };
    },
    setParentView: function (parentView) {
      this.parentView = parentView;
    },
    initialize: function (options) {
      self = this;
      this.listenTo(this.collection, 'request', function () {
        this.$el.find(".esoc-empty-activityfeed-wrapper").hide();
      }).listenTo(this.collection, "sync", function () {
        this.$el.find(".esoc-empty-activityfeed-wrapper").show();
      });
      if (!this.childView) {
        this.childView = _require('esoc/widgets/activityfeedwidget/activityfeeditem.view');
      }
      this.on('refresh:collection', function (filterInfo) {
        if (!!filterInfo) {
          var filterOptions = _.extend({}, this.options);
          if (!!filterInfo.feedtype) {
            filterOptions.feedtype = filterInfo.feedtype;
          }
          if (!!filterInfo.updatesfrom) {
            filterOptions.updatesfrom = filterInfo.updatesfrom;
          }

          this.collection.fetch(_.extend({error: this.collection.fetchError}, filterOptions));

          this.triggerMethod("update:notification");
        }
      });
    },
    constructor: function ActivityFeedView(options) {
      options.connector = !!options.connector ? options.connector :
                          options.context.getObject(ConnectorFactory);
      Marionette.CollectionView.prototype.constructor.apply(this, arguments);
    },
    behaviors: {
      DefaultAction: {
        behaviorClass: DefaultActionBehavior
      }
    },
    childEvents: {
      'click:item': 'onClickItem',
      'click:attachment': 'onClickAttachment',
      'childview:comment:action': 'onCommentdialogAction',
      'childview:start:notification': 'resumeNotification'
    },
    events: {
      "click .esoc-social-activity-load-more": "loadMoreItems"
    },
    onCommentdialogAction: function () {
      $(".esoc-activityfeed-expand-getnewupdates.esoc-activityfeed-expand-getnewupdates-" +
        this.collection.widgetOptions.activityfeed.widgetId).hide();
      $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
        this.collection.widgetOptions.activityfeed.widgetId).hide();
      $(".esoc-acitivityfeed-collection").scrollTop(0);
      $(".esoc-afw-object-view").has('.esoc-activityfeed-list-' +
                                     this.collection.widgetOptions.activityfeed.widgetId).scrollTop(
          0);
      this.collection.fetch(_.extend(this.collection.widgetOptions, {remove: true}));
      var feedsAutoRefreshWait = this.collection.config_settings &&
                                 this.collection.config_settings.feedsAutoRefreshWait;
      this.updateGetNotification(feedsAutoRefreshWait);
    },
    resumeNotification: function (e) {
      var feedsAutoRefreshWait = this.collection.config_settings &&
                                 this.collection.config_settings.feedsAutoRefreshWait;
      this.updateGetNotification(feedsAutoRefreshWait);
      //TODO: need to resume notification for tile view.
      //this.collection.updateGetNotification(feedsAutoRefreshWait);
    },
    onClickItem: function (target) {
      var objectArgs = {
        "node": target.sgmModel,
        "callingViewInstance": this
      }
      this.commonUtil.openItem(objectArgs);

    },
    onClickAttachment: function (target) {
      var objectArgs = {
        "node": target.attachmentModel,
        "callingViewInstance": this
      }
      this.commonUtil.openItem(objectArgs);
    },
    onShow: function (e) {

      var widgetOptions = this.options.collection.widgetOptions;
      if (widgetOptions.activityfeed !== undefined) {
        widgetOptions = widgetOptions.activityfeed;
      }
      var wrapperClass = widgetOptions.wrapperClass;
      if (wrapperClass && wrapperClass.trim().length > 0) {
        var targetEle = this.$el.parent().parent();
        targetEle.addClass(wrapperClass);
        var heroElement = this.$el.closest(".activityfeed-expand").find("." + wrapperClass);
        var heroBackgroundColor = $("." + wrapperClass).css("background-color");
        targetEle.css("background-color", heroBackgroundColor);

        this.$el.closest(".activityfeed-expand").find(".tile-content").css("background-color",
            heroBackgroundColor);
        heroElement.find(".object-group-item").css("background-color", heroBackgroundColor);
        heroElement.find(".tile-header").css("background-color", heroBackgroundColor);
        this.$el.closest(".activityfeed-expand").find(".binf-container-fluid").css(
            "background-color",
            heroBackgroundColor);
        this.$el.closest(".activityfeed-expand").find(".binf-modal-body").css("background-color",
            heroBackgroundColor);
      }
      // honor feed auto refresh interval time from widget config, if not available then consider auto refresh interval time from cs config.
      var feedsAutoRefreshWait = this.options.collection.config_settings &&
                                 this.options.collection.config_settings.feedsAutoRefreshWait;
      if (!!feedsAutoRefreshWait) {
        this.updateGetNotification(feedsAutoRefreshWait);
        if ($(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
              widgetOptions.widgetId) && feedsAutoRefreshWait !== 0) {
          this.getExpandNewSinceId();
        }
      } else {
        var that = this;
        this.listenToOnce(this.options.collection, "sync", function () {
          feedsAutoRefreshWait = that.options.collection.config_settings &&
                                 that.options.collection.config_settings.feedsAutoRefreshWait;
          that.updateGetNotification(feedsAutoRefreshWait);
          if ($(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
                widgetOptions.widgetId) && feedsAutoRefreshWait !== 0) {
            that.getExpandNewSinceId();
          }
        });
      }
    },
    onDestroy: function () {
      clearInterval(this.collection.widgetOptions.expNotificationInterval);
      if (!!this.adaptivepollObj) {
        this.adaptivepollObj.destroy();
      }
    },
    onUpdateNotification: function () {
      var widgetId = this.collection.widgetOptions.activityfeed.widgetId;
      $(".esoc-activityfeed-expand-getnewupdates.esoc-activityfeed-expand-getnewupdates-" +
        widgetId).hide();
      $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
        widgetId).hide();
      var feedsAutoRefreshWait = this.collection.config_settings &&
                                 this.collection.config_settings.feedsAutoRefreshWait;
      if (!!feedsAutoRefreshWait) {
        this.updateGetNotification(feedsAutoRefreshWait);
      }
    },
    loadMoreItems: function (e) {
      var activityModel = this.collection.models[this.collection.models.length - 1];
      if (!activityModel.attributes.noMoreData) {
        delete this.collection.defaults.params["since_id"];
        this.collection.defaults.params.queryParams = {};
        this.collection.defaults.params.queryParams["max_id"] = activityModel.get("id");
        var _context = this.options.context !== undefined ? this.options.context :
                       this.options.activityfeed.context;
        if (this.collection.widgetOptions.remove) {
          this.collection.widgetOptions.remove = false;
        }
        this.collection.fetch(_.extend({remove: false}, this.collection.widgetOptions));
        delete this.collection.defaults.params.queryParams["max_id"];
      }
    },
    updateGetNotification: function (notificationInterval) {
      var afwId = this.collection.widgetOptions.activityfeed.widgetId;
      if ($(".esoc-activityfeed-expand-getnewupdates.esoc-activityfeed-expand-getnewupdates-" +
            afwId).length === 0) {
        setTimeout(this.alignUpdateButton, 1000, this.$el, afwId);
      }
      if (notificationInterval !== 0) {
        clearInterval(this.collection.widgetOptions.expNotificationInterval);
        this.adaptivepollObj = this.adaptivepollObj || new Adaptivepoll(this.getExpandLatestSinceId, "global_countdown_last_reset_timestamp"
            , notificationInterval, afwId, this);
        this.adaptivepollObj.lastState = 1;
      }
    },
    alignUpdateButton: function (currentEle, afwId) {
      var autoReloadEle = $('<div />', {
            'class': 'esoc-activityfeed-new-updates-wrapper',
            'html': NewUpdatesButtonTemplate({
              'messages': afLang,
              'newUpdatesWrapperClass': 'esoc-activityfeed-expand-getnewupdates' +
                                        ' esoc-activityfeed-expand-getnewupdates-' + afwId
            })
          }),
          hiddenEle     = $('<div />', {
            'class': 'activityfeed-expand-invisiblebutton-' + afwId
          });
      autoReloadEle.css({
        'position': 'absolute',
        'top': '15px',
        'left': '50%',
        'transform': 'translate(-50%, -50%)'
      });
      currentEle.closest(".esoc-afw-newupdates").parent().append(autoReloadEle);
      currentEle.append(hiddenEle);
    },
    getNewUpdates: function (e) {
      var feedview             = e.data,
          feedsAutoRefreshWait = (feedview.options.config_settings &&
                                  feedview.options.config_settings.feedsAutoRefreshWait) ||
                                 (feedview.collection.config_settings &&
                                  feedview.collection.config_settings.feedsAutoRefreshWait);
      if (!$(e.target).hasClass("esoc-activityfeed-close")) {
        delete feedview.collection.defaults.params["since_id"];
        delete feedview.collection.defaults.params["max_id"];
        feedview.collection.defaults.params.queryParams = {};
        var _context = feedview.options.context !== undefined ? feedview.options.context :
                       feedview.options.activityfeed.context;
        $(".esoc-acitivityfeed-collection").scrollTop(0);
        feedview.collection.fetch(_.extend(feedview.options, {remove: true}));
        $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
          feedview.options.activityfeed.widgetId).trigger("click");
      }
      $(".esoc-activityfeed-expand-getnewupdates.esoc-activityfeed-expand-getnewupdates-" +
        feedview.options.activityfeed.widgetId).hide();

      if (!!feedsAutoRefreshWait) {
        feedview.updateGetNotification(feedsAutoRefreshWait);
      }
    },
    getExpandNewSinceId: function (feedview) {
      feedview = !!feedview && !!feedview.data ? feedview.data : self;
      var sinceId    = feedview.collection.models.length > 0 ?
                       feedview.collection.models[0].attributes.id :
                       0,
          conn       = this.options.connector,
          includeTop = feedview.options.hideHeader;
      feedview.feedtype = feedview.collection.widgetOptions.feedtype;
      feedview.updatesfrom = !!feedview.collection.widgetOptions.updatesfrom ?
                             feedview.collection.widgetOptions.updatesfrom :
                             feedview.options.updatesfrom;
      var queryString       = "",
          collectionOptions = feedview.collection.models.length > 0 ?
                              feedview.collection.models[0].attributes.widgetOptions :
                              feedview.collection.widgetOptions;
      feedview.options = $.isEmptyObject(collectionOptions) === false ? collectionOptions :
                         feedview.options;
      var _context              = feedview.options.context !== undefined ?
                                  feedview.options.context :
                                  feedview.options.activityfeed.context,
          activityWidgetfactory = _context._factories[feedview.collection.widgetOptions.activityfeed.widgetId];
      if (activityWidgetfactory !== undefined && activityWidgetfactory.options !== undefined &&
          activityWidgetfactory.options.honorfeedsource !== undefined &&

          activityWidgetfactory.options.honorfeedsource && activityWidgetfactory !== undefined &&
          activityWidgetfactory.options !== undefined &&
          activityWidgetfactory.options.objectnodeid !== undefined) {
        queryString = "&where_feedsource=pulsefrom&where_feedsource_id=" +
                      activityWidgetfactory.options.objectnodeid;
      } else if (feedview.options.feedsource !== undefined) {
        if (feedview.options.feedsource.source !== undefined &&
            feedview.options.feedsource.source) {
          queryString = "&where_feedsource=" + feedview.options.feedsource.source;
        }
        if (feedview.options.feedsource.id !== undefined && feedview.options.feedsource.id) {
          queryString = queryString + "&where_feedsource_id=" + feedview.options.feedsource.id;
        }
      }
      if (feedview.updatesfrom !== undefined) {
        if (feedview.updatesfrom.from !== undefined && feedview.updatesfrom.from) {
          queryString = queryString + "&where_updatesfrom=" + feedview.updatesfrom.from;
        }
        if (feedview.updatesfrom.id !== undefined && feedview.updatesfrom.id) {
          queryString = queryString + "&where_updatesfrom_id=" + feedview.updatesfrom.id;
        }
      }
      $.ajax(conn.extendAjaxOptions({
        url: conn.connection.url + feedview.commonUtil.REST_URLS.csGetAFSinceId +
             feedview.feedtype +
             queryString,
        type: 'GET',
        success: function (data, status, jXHR) {
          var responsefromServer = data.lastestIDReturned !== undefined;
          if (responsefromServer &&
              parseInt(data.lastestIDReturned, 10) !== parseInt(sinceId, 10)) {
            var newUpdatesEle = $(
                ".esoc-activityfeed-expand-getnewupdates.esoc-activityfeed-expand-getnewupdates-" +
                feedview.options.activityfeed.widgetId);
            $(newUpdatesEle).addClass(!includeTop ? "esoc-activityfeed-expand-getnewupdates-top" :
                                      "").show();

            $(newUpdatesEle).on("focus", function (event) {
              var target = $(event.target)
              var parentView = feedview.parentView;
              if (target.is(":visible") && parentView) {
                self.commonUtil.addTabableClass(parentView, target);
              }
            });

            if ($(newUpdatesEle).length > 0) {
              clearInterval(feedview.collection.widgetOptions.expNotificationInterval);
              if (feedview.adaptivepollObj !== null) {
                feedview.adaptivepollObj.destroy();
                feedview.adaptivepollObj = null;
              }
            }
            $(newUpdatesEle).on("keydown", self, function (e) {
              var keyCode = e.keyCode || e.which;
              if (keyCode === 13 || keyCode === 32) {
                feedview.getNewUpdates(e);
              }
            });
            $(newUpdatesEle).one('click', feedview, feedview.getNewUpdates);
          }
        },
        error: function (xhr, status, text) {
          self.log.error("Error while retriving the latest since Id...");
        }
      }));
    },
    getExpandLatestSinceId: function (afwId, feedview) {
      var expndInvisibleButton = $(".activityfeed-expand-invisiblebutton-" + afwId);
      if (expndInvisibleButton.length > 0) {
        feedview.getExpandNewSinceId(feedview);
        feedview.collection.widgetOptions.expNotificationInterval = feedview.adaptivepollObj && feedview.adaptivepollObj.setUpdateTimer();
      }
    }
  });
  return ActivityFeedView;
});

csui.define('esoc/widgets/activityfeedwidget/util',['module',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'i18n!esoc/widgets/userwidget/nls/lang',
      'esoc/widgets/common/util'
    ],
    function (module, $, _, Lang, CommonUtil) {
      var Utils = {
        lang: Lang,
        commonUtil: CommonUtil

      }
      return Utils;
    });


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/impl/activityfilter',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return " icon-checkbox-selected ";
},"3":function(depth0,helpers,partials,data) {
    return " icon-checkbox ";
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "          <div class=\"csui-facet\">\r\n            <a href=\"javascript:void(0);\" class=\"esoc-activityfeed-filter-updatesfrom\"\r\n               data-binf-toggle=\"collapse\"\r\n               data-binf-target=\"#esoc-activityfeed-updatesfromfilter-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.widgetid : stack1), depth0))
    + "\">\r\n              <div class=\"csui-facet-header\">\r\n                <div class=\"header-label\"\r\n                     title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.updatesfrom : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.updatesfrom : stack1), depth0))
    + "</div>\r\n                <div class=\"cs-icon csui-button-icon icon-expandArrowDown\"></div>\r\n                <div class=\"cs-icon csui-button-icon icon-expandArrowUp\"></div>\r\n                <div class=\"csui-right-shadow\"></div>\r\n              </div>\r\n            </a>\r\n\r\n            <div id=\"esoc-activityfeed-updatesfromfilter-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.widgetid : stack1), depth0))
    + "\"\r\n                 class=\"binf-in csui-facet-content esoc-activity-filter-content\">\r\n              <div class=\"cs-filter-group\">\r\n                <div class=\"csui-facet-item\">\r\n                  <div class=\"esoc-activity-filter-selection-label\">\r\n                    <input type=\"radio\" name=\"updatesfrom\" id=\"esoc_activityfeed_filter_allusers\"\r\n                           class=\"esoc_activityfeed_filter\"\r\n                           value=\"all\" checked=\""
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.all : stack1), depth0))
    + "\">\r\n                    <span id=\"esoc_activityfeed_filter_allusers_radio\"\r\n                          class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.all : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.program(8, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                  </div>\r\n\r\n                  <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.allusers : stack1), depth0))
    + "\">\r\n                      <label for=\"esoc_activityfeed_filter_allusers\" class=\"csui-name\">\r\n                          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.allusers : stack1), depth0))
    + "\r\n                      </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"csui-facet-item\">\r\n                  <div class=\"esoc-activity-filter-selection-label\">\r\n                    <input type=\"radio\" name=\"updatesfrom\"\r\n                           id=\"esoc_activityfeed_filter_iamfollowing\"\r\n                           value=\"following\"  checked=\""
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.following : stack1), depth0))
    + "\"\r\n                           class=\"esoc_activityfeed_filter\">\r\n                    <span id=\"esoc_activityfeed_filter_iamfollowing_radio\"\r\n                          class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.following : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.program(8, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                  </div>\r\n\r\n                  <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.iamfollowing : stack1), depth0))
    + "\">\r\n                      <label for=\"esoc_activityfeed_filter_iamfollowing\" class=\"csui-name\">\r\n                          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.iamfollowing : stack1), depth0))
    + "\r\n                      </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"csui-facet-item\">\r\n                  <div class=\"esoc-activity-filter-selection-label\">\r\n                    <input type=\"radio\" name=\"updatesfrom\" id=\"esoc_activityfeed_filter_myfollowers\"\r\n                           class=\"esoc_activityfeed_filter\"\r\n                           value=\"followers\"  checked=\""
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.followers : stack1), depth0))
    + "\">\r\n                    <span id=\"esoc_activityfeed_filter_myfollowers_radio\"\r\n                          class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.followers : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.program(8, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                  </div>\r\n\r\n                  <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.myfollowers : stack1), depth0))
    + "\">\r\n                      <label for=\"esoc_activityfeed_filter_myfollowers\" class=\"csui-name\">\r\n                          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.myfollowers : stack1), depth0))
    + "\r\n                      </label>\r\n                  </div>\r\n                </div>\r\n                <div class=\"csui-facet-item\">\r\n                  <div class=\"esoc-activity-filter-selection-label\">\r\n                    <input type=\"radio\" name=\"updatesfrom\" id=\"esoc_activityfeed_filter_myupdates\"\r\n                           value=\"myupdates\" checked=\""
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.myupdates : stack1), depth0))
    + "\"\r\n                           class=\"esoc_activityfeed_filter\">\r\n                    <span id=\"esoc_activityfeed_filter_myupdates_radio\"\r\n                          class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.myupdates : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.program(8, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                  </div>\r\n\r\n                  <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.myupdates : stack1), depth0))
    + "\">\r\n                      <label for=\"esoc_activityfeed_filter_myupdates\" class=\"csui-name\">\r\n                          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.myupdates : stack1), depth0))
    + "\r\n                      </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"csui-facet-item\">\r\n                  <div class=\"esoc-activity-filter-selection-label\">\r\n                    <input type=\"radio\" name=\"updatesfrom\" id=\"esoc_activityfeed_filter_mentions\"\r\n                           value=\"mentions\"\r\n                           class=\"esoc_activityfeed_filter\"\r\n                           checked=\""
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.mentions : stack1), depth0))
    + "\">\r\n                    <span id=\"esoc_activityfeed_filter_mentions_radio\"\r\n                          class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.mentions : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.program(8, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                  </div>\r\n\r\n                  <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mentions : stack1), depth0))
    + "\">\r\n                      <label for=\"esoc_activityfeed_filter_mentions\" class=\"csui-name\">\r\n                          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.mentions : stack1), depth0))
    + "\r\n                      </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"csui-facet-item\">\r\n                  <div class=\"esoc-activity-filter-selection-label\">\r\n                    <input type=\"radio\" name=\"updatesfrom\" id=\"esoc_activityfeed_filter_myfavorites\"\r\n                           value=\"myfavorites\"\r\n                           class=\"esoc_activityfeed_filter\" "
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.myfavorites : stack1), depth0))
    + ">\r\n                    <span id=\"esoc_activityfeed_filter_myfavorites_radio\"\r\n                          class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.from : stack1)) != null ? stack1.myfavorites : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.program(8, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                  </div>\r\n\r\n                  <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.myfavorites : stack1), depth0))
    + "\">\r\n                      <label for=\"esoc_activityfeed_filter_myfavorites\" class=\"csui-name\">\r\n                          "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.myfavorites : stack1), depth0))
    + "\r\n                      </label>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n";
},"6":function(depth0,helpers,partials,data) {
    return " icon-radiobutton-selected ";
},"8":function(depth0,helpers,partials,data) {
    return " icon-radiobutton ";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<div class=\"esoc-activityfeed-filter\">\r\n  <div class=\"cs-simplelist csui-facet-panel\">\r\n    <div class=\"cs-header binf-panel-heading\">\r\n      <span class=\"cs-title\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.refineby : stack1), depth0))
    + "</span>\r\n\r\n      <div class=\"csui-right-shadow\"></div>\r\n    </div>\r\n    <div class=\"esoc-activityfeed-filters cs-content\">\r\n      <div class=\"cs-list-group\">\r\n        <div class=\"csui-facet\">\r\n          <a href=\"javascript:void(0);\" class=\"esoc-activityfeed-filter-types\"\r\n             data-binf-toggle=\"collapse\"\r\n             data-binf-target=\"#esoc-activityfeed-filtertypes-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.widgetid : stack1), depth0))
    + "\">\r\n            <div class=\"csui-facet-header\">\r\n              <div class=\"header-label esoc-activityfeed-allfilter-label binf-hidden\"\r\n                   title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.allselectedlabel : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.allselectedlabel : stack1), depth0))
    + "</div>\r\n              <div class=\"header-label esoc-activityfeed-filter-feedtypes binf-hidden\"\r\n                   title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.activitytypes : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.activitytypes : stack1), depth0))
    + "</div>\r\n              <div class=\"cs-icon csui-button-icon icon-expandArrowDown\"></div>\r\n              <div class=\"cs-icon csui-button-icon icon-expandArrowUp\"></div>\r\n              <div class=\"csui-right-shadow\"></div>\r\n            </div>\r\n          </a>\r\n\r\n          <div id=\"esoc-activityfeed-filtertypes-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.widgetid : stack1), depth0))
    + "\"\r\n               class=\"binf-in csui-facet-content esoc-activity-filter-content\">\r\n            <div class=\"cs-filter-group\">\r\n              <div class=\"csui-facet-item\">\r\n                <div class=\"esoc-activity-filter-selection-label\">\r\n                  <input type=\"checkbox\" name=\"feedtype\" value=\"status\"\r\n                         id=\"esoc_activityfeed_filter_status\"\r\n                         class=\"esoc_activityfeed_filter\" "
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.status : stack1), depth0))
    + " >\r\n                  <span id=\"esoc_activityfeed_filter_status_checkbox\"\r\n                        class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.status : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                </div>\r\n\r\n                <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.statusupdates : stack1), depth0))
    + "\">\r\n                    <label for=\"esoc_activityfeed_filter_status\" class=\"csui-name\">\r\n                        "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.statusupdates : stack1), depth0))
    + "\r\n                    </label>\r\n                </div>\r\n              </div>\r\n              <div class=\"csui-facet-item\">\r\n                <div class=\"esoc-activity-filter-selection-label\">\r\n                  <input type=\"checkbox\" name=\"feedtype\" value=\"content\"\r\n                         id=\"esoc_activityfeed_filter_content\"\r\n                         class=\"esoc_activityfeed_filter\" "
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.content : stack1), depth0))
    + ">\r\n                  <span id=\"esoc_activityfeed_filter_content_checkbox\"\r\n                        class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.content : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                </div>\r\n\r\n                <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.contentupdates : stack1), depth0))
    + "\">\r\n                    <label for=\"esoc_activityfeed_filter_content\" class=\"csui-name\">\r\n                        "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.contentupdates : stack1), depth0))
    + "\r\n                    </label>\r\n                </div>\r\n              </div>\r\n              <div class=\"csui-facet-item\">\r\n                <div class=\"esoc-activity-filter-selection-label\">\r\n                  <input type=\"checkbox\" name=\"feedtype\" value=\"attribute\"\r\n                         id=\"esoc_activityfeed_filter_attribute\"\r\n                         class=\"esoc_activityfeed_filter\" "
    + this.escapeExpression(this.lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.attribute : stack1), depth0))
    + ">\r\n                  <span id=\"esoc_activityfeed_filter_attribute_checkbox\"\r\n                        class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = ((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.fieldValue : stack1)) != null ? stack1.attribute : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n                </div>\r\n\r\n                <div class=\"csui-filter-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attributeupdates : stack1), depth0))
    + "\">\r\n                    <label for=\"esoc_activityfeed_filter_attribute\" class=\"csui-name\">\r\n                        "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.attributeupdates : stack1), depth0))
    + "\r\n                    </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.hideupdatesfrom : stack1),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(5, data, 0)})) != null ? stack1 : "")
    + "      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_impl_activityfilter', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/activityfeedwidget/activityfeedfilter.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/namedsessionstorage',
  'csui/utils/contexts/factories/user',
  'esoc/widgets/activityfeedwidget/util',
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
  'hbs!esoc/widgets/activityfeedwidget/impl/activityfilter',
  'csui/lib/perfect-scrollbar'
], function ($, _, Handlebars, Marionette, NamedSessionStorage, UserModelFactory, Util,
    Lang, ActivityFeedFilterTemplate) {
  var self = null;
  var AcitivityFeedFilterView = Marionette.ItemView.extend({
    className: "esoc-activity-filter-view",
    isAlreadyClicked: false,
    template: ActivityFeedFilterTemplate,
    namedSessionStorage: new NamedSessionStorage("esoc-activity-filterinfo"),
    util: Util,
    templateHelpers: function () {
      return {
        messages: {
          fieldValue: this.fillFormFields(),
          hideupdatesfrom: this.options.hideupdatesfrom,
          contentupdates: Lang.contentupdates,
          attributeupdates: Lang.attributeupdates,
          statusupdates: Lang.statusupdates,
          allusers: Lang.allusers,
          iamfollowing: Lang.iamfollowing,
          myfollowers: Lang.myfollowers,
          myupdates: Lang.myupdates,
          mentions: Lang.mentions,
          myfavorites: Lang.myfavorites,
          activitytypes: Lang.activitytypes,
          refineby: Lang.refineby,
          updatesfrom: Lang.updatesfrom,
          allselectedlabel: Lang.allselectedlabel,
          widgetid: this.options.widgetId ||
                    this.options.collection.widgetOptions.activityfeed.widgetId
        }
      }
    },
    initialize: function (options) {
      this.options = options;
      self = this;
    },
    constructor: function AcitivityFeedFilterView(options, parentView) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
      this.firstFilterIndex = 0
      this.lastFilterIndex = 0
      this.parentView = parentView;
    },

    onKeyInView: function (event, isFirst) {
      var keyCode = event.keyCode,
          target  = $(event.target);
      switch (keyCode) {
          //Enter and space
      case 32:
      case 13:
        if (target.prop('checked')) {
          target.prop('checked', false);
        } else {
          target.prop('checked', true);
        }
        target.triggerHandler('click', true);
        break;
      case 38:
      case 40:
        this.moveToNextFilter(this, keyCode === 38, target, isFirst);
        break;
      default:
        return true;
      }
      return false;
    },

    moveToNextFilter: function (view, keyUp, target, isFirst) {
      if (isFirst) {
        this.processFilter(".csui-facet:first .csui-facet-item", keyUp, "firstFilter");
      } else {
        this.processFilter(".csui-facet:last .csui-facet-item", keyUp, "lastFilter");
      }
    },

    processFilter: function (className, keyUp, filterType) {
      var filterViewContainers  = this.$el.find(className),
          numViews              = filterViewContainers.length - 1,
          filterIndex           = filterType + "Index",
          filterElement         = filterType + "Element",
          previousFilterElement = $(filterViewContainers[this[filterIndex]]).find(
              '.esoc_activityfeed_filter');
      if (keyUp) {
        this[filterIndex] = this[filterIndex] === 0 ? numViews : --this[filterIndex];
      }
      else {
        this[filterIndex] = this[filterIndex] === numViews ? 0 : ++this[filterIndex];
      }

      this[filterElement] = $(filterViewContainers[this[filterIndex]]).find(
          '.esoc_activityfeed_filter');
      if (this.parentView) {
        Util.commonUtil.moveFocusFromSrcToDest(this.parentView, previousFilterElement,
            this[filterElement], true);
      }
      var targetElement = this[filterElement].first();
      targetElement.attr("type") !== "radio" && targetElement.trigger("focus");
    },

    onAfterShow: function () {
      var that = this;
      var parentView;

      that.$el.find(".esoc_activityfeed_filter").on("click", function (event, isFromTriggerHandler) {
        if (isFromTriggerHandler) {
          that.updateActivityFeed(event);
          that.isAlreadyClicked = true;
        } else if (that.isAlreadyClicked) {
          that.isAlreadyClicked = false;
          event.preventDefault();
          event.stopPropagation();
          return false;
        } else {
          that.updateActivityFeed(event);
        }
      });

      if (this.parentView) {
        parentView = this.parentView;
        if (parentView.options.origin !== "userwidget") {
          that.$el.find(".cs-filter-group:first .esoc_activityfeed_filter").on('keydown',
              function (event) {
                that.onKeyInView(event, true);
              });
          that.$el.find(".cs-filter-group:last .esoc_activityfeed_filter").on('keydown',
              function (event) {
                that.onKeyInView(event, false);
              });
        } else {
          that.$el.find(".cs-filter-group .esoc_activityfeed_filter").on('keydown',
              function (event) {
                that.onKeyInView(event, true);
              });
        }
      }
      this.$el.find(".esoc-activityfeed-filters").perfectScrollbar({suppressScrollX: true});
      this.options.connector.authenticator.on('loggedOut', function () {
        that.namedSessionStorage.storage.removeItem("esoc-activity-filterinfo");
      });
    },

    fillFormFields: function () {
      var feedType               = this.options.feedtype,
          feedTypes              = {'status': '', 'content': '', 'attribute': ''},
          updatesFrom            = {
            'all': '',
            'following': '',
            'followers': '',
            'myupdates': '',
            'mentions': '',
            'myfavorites': ''
          },
          filterOptions          = {},
          selectedFilterOptions  = {},
          widgetUniqueId         = self.options.widgetId ||
                                   self.options.collection.widgetOptions.activityfeed.widgetId,
          namedSessionStorageKey = self.options.filterSource ?
                                   self.options.filterSource + "_" +
                                   widgetUniqueId : widgetUniqueId;
      if (self.namedSessionStorage.get(namedSessionStorageKey)) {
        filterOptions = self.namedSessionStorage.get(namedSessionStorageKey);
        filterOptions["feedtype"] = filterOptions.feedtype;
        if (!!filterOptions.updatesfrom && !!filterOptions.updatesfrom.from) {
          filterOptions["updatesfrom"] = filterOptions.updatesfrom.from;
        }
      } else {
        filterOptions["feedtype"] = this.options.feedtype;
        if (!!self.options.updatesfrom && !!self.options.updatesfrom.from) {
          filterOptions["updatesfrom"] = self.options.updatesfrom.from;
        }
      }
      updatesFrom[filterOptions.updatesfrom] = !!filterOptions.updatesfrom;
      if (filterOptions.feedtype === "all") {
        $.each(feedTypes, function (key, value) {
          selectedFilterOptions[key] = "checked";
        });
      } else if (!!filterOptions.feedtype) {
        if (typeof filterOptions.feedtype === "string") {
          feedTypes = filterOptions.feedtype.split(',');
        }
        else {
          feedTypes = filterOptions.feedtype;
        }
        feedTypes.forEach(function (value) {
          selectedFilterOptions[value] = "checked";
        });
      }
      selectedFilterOptions["from"] = updatesFrom;
      return selectedFilterOptions;
    },
    onShow: function (e) {
      this.changeLabel();
    },
    updateActivityFeed: function (e) {
      if (this.parentView) {
        var focusedElement = $(e.target);
        focusedElement.prop("tabindex", "0").attr("data-cstabindex", "0");
        this.parentView.focusedElement = focusedElement;
      }

      if (!!this.parentView.activityview.adaptivepollObj) {
        this.parentView.activityview.adaptivepollObj.destroy();
      }

      this.changeLabel();
      this.util.commonUtil.updateSelection(e, this, "updatesfrom");
      var filterOptions         = {},
          feedTypeindex         = 0,
          feedTypesCheckedVal   = [],
          updatesFromCheckedVal = "";
      this.$el.find('input[type=checkbox]:checked').each(function () {
        feedTypesCheckedVal[feedTypeindex++] = $(this).val();
      });
      this.$el.find('input[type=radio]').each(function () {
        if($(this).is(':checked')) {
          updatesFromCheckedVal = $(this).val();
        }
      });

      filterOptions = _.extend(filterOptions, {"feedtype": feedTypesCheckedVal});
      this.user = this.options.context ? this.options.context.getModel(UserModelFactory) :
                  undefined;

      if (!!updatesFromCheckedVal) {
        if ($.inArray(updatesFromCheckedVal, ["following", "followers"]) !== -1) {
          filterOptions = _.extend(filterOptions, {
            "updatesfrom": {
              "from": updatesFromCheckedVal,
              "id": !!self.user && !!self.user.get('id') ? self.user.get('id') : 0
            }
          });
        } else {
          filterOptions = _.extend(filterOptions, {
            "updatesfrom": {
              "from": updatesFromCheckedVal
            }
          });
        }
      }
      var widgetId = self.options.widgetId ||
                     self.options.collection.widgetOptions.activityfeed.widgetId;
      var loadFirstTime = false;
      if (!(this.namedSessionStorage.get(widgetId))) {
        this.storeFilterInfo(filterOptions);
        loadFirstTime = true;
      }
      if (loadFirstTime === true ||
          this.namedSessionStorage.get(widgetId).updatesfrom.from !== updatesFromCheckedVal ||
          e.currentTarget.name === "feedtype") {
        loadFirstTime = false;
        this.storeFilterInfo(filterOptions);
        this.trigger('select:filter', filterOptions);
      }
    },
    /*TODO: Need to move to parentview*/
    storeFilterInfo: function (filterOptions) {
      var otherUser = self.options.otherUser;
      if (!otherUser) {
        var widgetId               = self.options.widgetId ||
                                     self.options.collection.widgetOptions.activityfeed.widgetId,
            namedSessionStorageKey = (self.options.filterSource) ?
                                     self.options.filterSource + "_" + widgetId : widgetId;
        this.namedSessionStorage.set(namedSessionStorageKey, filterOptions);

      }
    },

    /**
     * updates the label Activity Types, appends "(all)" if  all checkboxes are selected or deselected
     */
    changeLabel: function () {
      var selectedCheckboxCount = this.$el.find("input[name='feedtype']:checked").length;
      if (selectedCheckboxCount === 0 ||
          selectedCheckboxCount === this.$el.find("input[name='feedtype']").length) {
        this.$el.find('.esoc-activityfeed-allfilter-label').removeClass('binf-hidden');
        this.$el.find('.esoc-activityfeed-filter-feedtypes').addClass('binf-hidden');
      } else {
        this.$el.find('.esoc-activityfeed-filter-feedtypes').removeClass('binf-hidden');
        this.$el.find('.esoc-activityfeed-allfilter-label').addClass('binf-hidden');
      }
    }
  });
  return AcitivityFeedFilterView;
});

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/impl/activityfeedwithfilter',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "  <div class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2 esoc-activityfeed-filter\"></div>\r\n  <div\r\n      class=\"binf-col-lg-10 binf-col-md-10 binf-col-sm-10 binf-col-xs-10 esoc-acitivityfeed-collection\r\n      esoc-afw-newupdates esoc-acitivity-feed-filter-enabled\"></div>\r\n";
},"3":function(depth0,helpers,partials,data) {
    return "  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 esoc-acitivityfeed-collection esoc-afw-newupdates\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.enableFilters : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_impl_activityfeedwithfilter', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/activityfeedwidget/activityfeedwithfilter.view',[
  'require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/marionette',
  'esoc/widgets/activityfeedwidget/activityfeedfactory',
  "esoc/widgets/activityfeedwidget/activityfeed.view",
  "esoc/widgets/activityfeedwidget/activityfeedfilter.view",
  'esoc/widgets/activityfeedwidget/util',
  'hbs!esoc/widgets/activityfeedwidget/impl/activityfeedwithfilter',
  'csui/utils/contexts/factories/connector',
  'csui/controls/progressblocker/blocker',
  'csui/utils/namedsessionstorage',
  'csui/controls/tile/behaviors/perfect.scrolling.behavior',
  'csui/behaviors/keyboard.navigation/tabables.behavior',
  'csui/behaviors/keyboard.navigation/tabable.region.behavior',
  'csui/controls/mixins/layoutview.events.propagation/layoutview.events.propagation.mixin'
], function (_require, $, _, Backbone, Marionette, ItemCollection, ActivityFeedView,
    ActivityFeedFilterView, Util, ActivityFeedWithFilterTemplate, ConnectorFactory, BlockingView,
    NamedSessionStorage, PerfectScrollingBehavior, TabablesBehavior, TabableRegionBehavior,
    LayoutViewEventsPropagationMixin) {
  var ActivityFeedWithFilterView = Marionette.LayoutView.extend({
    className: 'esoc-activityfeed-with-filter',
    feedCount: 0,
    initialActivationWeight: 0,
    template: ActivityFeedWithFilterTemplate,
    namedSessionStorage: new NamedSessionStorage("esoc-activity-filterinfo"),
    regions: {
      filterRegion: '.esoc-activityfeed-filter',
      feedRegion: '.esoc-acitivityfeed-collection'
    },
    templateHelpers: function () {
      return {
        messages: {
          enableFilters: this.options.feedSettings.enableFilters
        }
      };
    },
    behaviors: {
      PerfectScrolling: {
        behaviorClass: PerfectScrollingBehavior,
        contentParent: ".esoc-acitivityfeed-collection",
        suppressScrollX: true
      },
      TabableRegionBehavior: {
        behaviorClass: TabableRegionBehavior
      }
    },

    onLastTabElement: function (shiftTab) {
      var tabItems = this.$('[data-cstabindex=0]').filter(":visible"),
          lastItem = tabItems.length - 1;
      if (tabItems.length) {
        var focusElement = shiftTab ? tabItems[0] : tabItems[lastItem];
        return $(focusElement).hasClass(TabableRegionBehavior.accessibilityActiveElementClass);
      }
      return true;
    },

    currentlyFocusedElement: function (event) {
      var element = this.focusedElement;
      if (!event || !event.shiftKey) {
        return this.$el.find("a.esoc-activityfeed-filter-types");
      } else if (element && $(element).length) {
        return element;
      }
    },

    events: {"keydown": "onKeyInView"},
    constructor: function ActivityFeedWithFilterView(options) {
      options || (options = {});
      options.connector = !!options.connector ? options.connector :
                          options.context.getObject(ConnectorFactory);
      this.options = options;
      this.listenToOnce(this, 'before:hide', TabablesBehavior.popTabableHandler);
      this.propagateEventsToRegions();
      if (!!!this.options.collection) {
        Util.commonUtil.fillDefaultActivityOptions(options);
        if (this.options.feedtype !== undefined) {
          ItemCollection.prototype.propertyPrefix = Util.commonUtil.getActivityWidgetId(
              this.options);
          ItemCollection.prototype.uniqueid = Util.commonUtil.getActivityWidgetId(this.options);
        }
        var sessionFilterInfo,
            filterInfoKey = this.options.filterSource ? this.options.filterSource + "_" +
                                                        ItemCollection.prototype.uniqueid :
                            ItemCollection.prototype.uniqueid;
        sessionFilterInfo = this.namedSessionStorage.get(filterInfoKey);
        if (!!sessionFilterInfo) {
          if (!!sessionFilterInfo.feedtype) {
            this.options.feedtype = sessionFilterInfo.feedtype;
          }
          if (!!sessionFilterInfo.updatesfrom) {
            this.options.updatesfrom = sessionFilterInfo.updatesfrom;
          }
        }
        if (this.options.origin === 'userwidget') {
          delete this.options.context._factories[Util.commonUtil.getActivityWidgetId(this.options)];
        }
        this.options.collection = this.options.context.getCollection(ItemCollection, this.options);
      }
      var self = this;
      this.options.parentCollectionView = this;
      if (!ActivityFeedView) {
        ActivityFeedView = _require("esoc/widgets/activityfeedwidget/activityfeed.view");
      }
      this.activityview = new ActivityFeedView(this.options, {collection: this.options.collection});
      this.activityview.setParentView(this);

      this.activityview.listenTo(this.options.collection, "sync", function (collection, response) {
        self.triggerMethod('dom:refresh');
        var tabItems = self.$el.find('[data-cstabindex=0]');
        tabItems.attr("tabindex", "0");
        self.focusedElement && $(self.focusedElement).trigger("focus");
        self.triggerMethod('update:scrollbar');
      });

      if (this.options.feedSettings.enableFilters) {
        this.filterview = new ActivityFeedFilterView(this.options, this);
        this.filterview.on('select:filter', function (filterOptions) {
          self.$el.find(".esoc-acitivityfeed-collection").scrollTop(0);
          self.activityview.trigger('refresh:collection', filterOptions);
        });
      }
      Marionette.LayoutView.prototype.constructor.apply(this, options);
      if (this.options.blockingParentView) {
        BlockingView.delegate(this, this.options.blockingParentView);
      } else {
        BlockingView.imbue(this);
      }
      this.listenTo(this.options.collection, "request", this.blockActions)
          .listenTo(this.options.collection, "sync", this.unblockActions)
          .listenTo(this.options.collection, "error", this.unblockActions);
    },
    onRender: function () {
      this.feedRegion.show(this.activityview);
      if (this.options.feedSettings.enableFilters) {
        this.filterRegion.show(this.filterview);
      }
    },
    onShow: function (e) {
      if (!!this.options.userActivity) {
        this.onAfterShow(e);
      }
    },
    onAfterShow: function (e) {
      var filterElements = this.$el.find(".csui-facet .esoc_activityfeed_filter");
      filterElements.prop("tabindex", "-1").attr("data-cstabindex", "-1");

      this.$el.find(".esoc-activityfeed-filter-types")
          .prop("tabindex", "0").attr("data-cstabindex", "0");
      this.$el.find("#esoc_activityfeed_filter_status")
          .prop("tabindex", "0").attr("data-cstabindex", "0")
      this.$el.find(".esoc-activityfeed-filter-updatesfrom")
          .prop("tabindex", "0").attr("data-cstabindex", "0")

      this.$el.find('input[type=radio][checked]').each(function () {
        $(this).prop("tabindex", "0").attr("data-cstabindex", "0")
      });

      Util.commonUtil.navigationWithArrowKeys(this, "div.activityfeed-list");

      if (!!this.options.selectedTab) {
        var that         = this,
            expandDialog = $(".activityfeed-expand");
        if (expandDialog.length > 0) {
          expandDialog.find(".cs-close").on('click', function (e) {
            if (that.options.selectedTab === Util.commonUtil.globalConstants.FRIENDS) {
              $("#esoc-user-profile-following-tab").trigger("click");
            }
            else if (that.options.selectedTab === Util.commonUtil.globalConstants.FOLLOWERS) {
              $("#esoc-user-profile-followers-tab").trigger("click");
            }
          });
        }
      }
      if (this.options.feedSettings.enableFilters) {
        this.filterview.triggerMethod("after:show");
      }
      var self      = this,
          container = self.$el.find(".esoc-acitivityfeed-collection");
      container.on("scroll", function (e, that) {
        var containerHeight = container.height();
        var containerScrollHeight = container[0].scrollHeight;
        var containerScrollTop = container.scrollTop();
        if ((containerScrollTop + 30) >= (containerScrollHeight - containerHeight)) {
          container.find(".esoc-social-activity-load-more:last").trigger("click");
        }
      });
    }
  });
  _.extend(ActivityFeedWithFilterView.prototype, LayoutViewEventsPropagationMixin);
  return ActivityFeedWithFilterView;
});

csui.define('esoc/widgets/activityfeedwidget/afw.infinite.scrolling.behavior',['csui/controls/tile/behaviors/infinite.scrolling.behavior'
], function (InfiniteScrollingBehavior) {
  "use strict";

  var AfwInfiniteScrollingBehavior = InfiniteScrollingBehavior.extend({
    _checkScrollPositionFetch: function () {
      var commentsContainer = this._content;
      var containerHeight = commentsContainer.height();
      var containerScrollHeight = commentsContainer[0].scrollHeight;
      var containerScrollTop = commentsContainer.scrollTop();
      if ((containerScrollTop + 30) >= (containerScrollHeight - containerHeight)) {
        this._content.find(".esoc-social-activity-load-more:last").trigger("click");
      }
    }
  });

  return AfwInfiniteScrollingBehavior;

});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/object/impl/object',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var helper;

  return "<div class=\"esoc-activityfeed-list esoc-activityfeed-list-"
    + this.escapeExpression(((helper = (helper = helpers.feedtype || (depth0 != null ? depth0.feedtype : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"feedtype","hash":{}}) : helper)))
    + "\">\r\n  <div class=\"object-group\"></div>\r\n  <div class=\"tile-footer\"></div>\r\n</div>";
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_object_impl_object', t);
return t;
});
/* END_TEMPLATE */
;

csui.define('css!esoc/widgets/activityfeedwidget/object/impl/object',[],function(){});
// Shows a list of items
csui.define('esoc/widgets/activityfeedwidget/object/object.view',['csui/lib/underscore',
  'csui/lib/jquery',
  'csui/lib/marionette',
  'csui/utils/log',
  'csui/behaviors/default.action/default.action.behavior',
  'csui/utils/contexts/factories/connector',
  'esoc/widgets/common/util',
  'esoc/widgets/activityfeedwidget/activityfeeditem.view',
  'esoc/widgets/activityfeedwidget/emptyactivityfeed.view',
  'csui/controls/tile/behaviors/perfect.scrolling.behavior',
  'csui/controls/tile/behaviors/blocking.behavior',
  'esoc/widgets/activityfeedwidget/afw.infinite.scrolling.behavior',
  'esoc/widgets/activityfeedwidget/util',
  'csui/utils/contexts/factories/node',
  'hbs!esoc/widgets/activityfeedwidget/object/impl/object',
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
  'esoc/widgets/utils/adaptivepoll',
  'css!esoc/widgets/activityfeedwidget/object/impl/object'
], function (_, $, Marionette, Log, DefaultActionBehavior, ConnectorFactory, CommonUtil,
    ActivityFeedItemView, EmptyActivityFeedView,
    PerfectScrollingBehavior, BlockingBehavior, InfiniteScrollingBehavior, Util, NodeFactory,
    objectTemplate, lang, Adaptivepoll) {
  var ObjectView = Marionette.CompositeView.extend({
    className: "esoc-afw-object-view esoc-afw-newupdates  esoc",
    initialize: function (options) {
      var self = this;
      this.options.connector = this.options.connector ? this.options.connector :
                               this.options.context.getObject(ConnectorFactory);
      this.listenTo(this.collection, 'request', function () {
        this.$el.find(".esoc-empty-activityfeed-wrapper").hide();
      }).listenTo(this.collection, "sync", function () {
        this.$el.find(".esoc-empty-activityfeed-wrapper").show();
        //this.triggerMethod("update:notification");
        this.triggerMethod('update:scrollbar');
      });
      var objNode = this.options.context ? this.options.context.getObject(NodeFactory) : undefined;
      if (!!objNode) {
        this._lastContainerId = objNode.get("id");
        this.listenTo(this.options.context, 'request', function () {
          this.handleContainerChange(objNode);
        });
        this.listenTo(objNode, 'change:id', function () {
          this.handleContainerChange(objNode);
        });
      }
      this.on('refresh:collection', function (filterInfo) {
        if (!!filterInfo) {
          var filterOptions = _.extend({}, self.options);
          if (!!filterInfo.feedtype) {
            filterOptions.feedtype = filterInfo.feedtype;
          }
          if (!!filterInfo.updatesfrom) {
            filterOptions.updatesfrom = filterInfo.updatesfrom;
          }
          self.collection.fetch(filterOptions);
          $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
            filterOptions.collection.widgetOptions.activityfeed.widgetId).hide();
        }
        this.triggerMethod("update:notification");
      });
    },

    log: Log,
    commonUtil: CommonUtil,
    template: objectTemplate,
    templateHelpers: function () {
      var wrapperClass = "";
      if (this.options.wrapperClass !== undefined) {
        wrapperClass = this.options.wrapperClass;
      }
      var feedtype = "";
      if (this.options.feedtype !== undefined) {
        feedtype = this.options.feedtype;
      }
      return {
        title: this.options.title ||
               lang.dialogTitle,
        icon: this.options.titleBarIcon,
        searchPlaceholder: lang.searchPlaceholder,
        wrapperClass: wrapperClass,
        feedtype: this.options.widgetId ||
                  this.options.collection.widgetOptions.activityfeed.widgetId,
        feedOptions: this.options,
        noActivityFeedMessage: lang.noactivities
      };
    },
    childViewContainer: '.object-group',
    childView: ActivityFeedItemView,
    emptyView: EmptyActivityFeedView,
    childViewOptions: function (model, index) {
      return {
        strdViewOptions: this.options,
        context: this.options.context,
        parentCollectionView: this,
        index: index
      };
    },
    events: {
      "click .esoc-social-activity-load-more": "loadMoreItems",
      'click .esoc-activityfeed-invisiblebutton': 'getNewSinceId'
    },
    triggers: {
      'click .tile-header': 'click:header'
    },
    behaviors: {
      Blocking: {
        behaviorClass: BlockingBehavior
      },
      PerfectScrolling: {
        behaviorClass: PerfectScrollingBehavior,
        suppressScrollX: true
      },
      InfiniteScrolling: {
        behaviorClass: InfiniteScrollingBehavior
      },
      DefaultAction: {
        behaviorClass: DefaultActionBehavior
      }
    },
    childEvents: {
      'click:item': 'onClickItem',
      'click:attachment': 'onClickAttachment',
      'childview:comment:action': 'onCommentdialogAction',
      'childview:start:notification': 'resumeNotification'
    },
    onShow: function () {
      var that = this;
      if (!!this.options.headerView) {
        //Delaying dom:refresh to recalculate container height to display perfect scroll bar as
        //Mutation observer is not adding the elements to DOM until all children element are
        // rendered.
        setTimeout(function () {
          that.triggerMethod("dom:refresh");
          Util.commonUtil.navigationWithArrowKeys(that, ".object-group");
        }, 1000);
      }
      var feedsAutoRefreshWait = (this.collection.widgetOptions.config_settings &&
                                  this.collection.widgetOptions.config_settings.feedsAutoRefreshWait) ?
                                 this.collection.widgetOptions.config_settings.feedsAutoRefreshWait :
                                 undefined;
      if (!!feedsAutoRefreshWait) {
        this.updateGetNotification(feedsAutoRefreshWait);
      }
      this.listenToOnce(this.collection, "sync", function () {
        feedsAutoRefreshWait = feedsAutoRefreshWait || ((this.collection.config_settings &&
                                                         this.collection.config_settings.feedsAutoRefreshWait));
        setTimeout(function () {
          if (!that.options.headerView) {
            Util.commonUtil.navigationWithArrowKeys(that, ".object-group");
          }
          that.updateGetNotification(feedsAutoRefreshWait);
        }, 500);
      });
    },
    updateGetNotification: function (notificationInterval) {
      var afwId = this.collection.widgetOptions.activityfeed.widgetId;
      if ($(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
            afwId).length === 0) {
        setTimeout(this.commonUtil.alignUpdateButton, 1000, afwId, true);
      }
      if (notificationInterval !== 0) {
        clearInterval(this.collection.widgetOptions.notificationInterval);
        var getNewUpdates = this.collection.widgetOptions.getNewUpdates !== undefined ?
                            this.collection.widgetOptions.getNewUpdates : true;
        if (getNewUpdates) {
          this.adaptivepollObj = this.adaptivepollObj || new Adaptivepoll(this.getLatestSinceId, "global_countdown_last_reset_timestamp"
              , notificationInterval, afwId, this);
          this.adaptivepollObj.lastState = 1;
        }
      }
    },
    isSameContainer: function (objNode) {
      var currentContainerId = objNode.get('id');
      if (currentContainerId !== this._lastContainerId) {
        this._lastContainerId = currentContainerId;
        return false;
      } else {
        return true;
      }
    },
    handleContainerChange: function (objNode) {  
      if (!this.isSameContainer(objNode) && this.options &&
      this.options.honorfeedsource !== undefined & this.options.honorfeedsource) {
        this.options.objectnodeid = objNode.get("id");
        var widgetId = this.collection.widgetOptions.activityfeed.widgetId;
        var widgetFactory = this.options.context._factories[widgetId];
        if (widgetFactory !== undefined) {
          widgetFactory.options.objectnodeid = this.options.objectnodeid;
        }
        this.collection.fetch(this.options);
        this.triggerMethod("update:notification");
        var expandViewNewUpdates =
                $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
                  widgetId);

        if (expandViewNewUpdates.length > 0) {
          expandViewNewUpdates.hide();
        }
      }
    },
    getLatestSinceId: function (widgetId, objView) {
      var stdInvisibleButton = $(".esoc-activityfeed-list.esoc-activityfeed-list-" +
                                 widgetId).find(".esoc-activityfeed-invisiblebutton");
      if (stdInvisibleButton.length > 0) {
        objView.getNewSinceId();
        objView.collection.widgetOptions.notificationInterval = objView.adaptivepollObj && objView.adaptivepollObj.setUpdateTimer();
      }
    },
    onUpdateNotification: function () {
      var widgetId = this.collection.widgetOptions.activityfeed.widgetId;
      $(".esoc-activityfeed-expand-getnewupdates.esoc-activityfeed-expand-getnewupdates-" +
        widgetId).hide();
      $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
        widgetId).hide();
      var feedsAutoRefreshWait = (this.options.config_settings &&
                                  this.options.config_settings.feedsAutoRefreshWait) ||
                                 (this.collection.config_settings &&
                                  this.collection.config_settings.feedsAutoRefreshWait);
      if (!!feedsAutoRefreshWait) {
        this.updateGetNotification(feedsAutoRefreshWait);
      }
    },
    onCommentdialogAction: function () {
      $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
        this.collection.widgetOptions.activityfeed.widgetId).hide();
      this.collection.fetch(_.extend(this.collection.widgetOptions, {remove: true}));
    },
    resumeNotification: function () {
      var feedsAutoRefreshWait = this.collection.config_settings &&
                                 this.collection.config_settings.feedsAutoRefreshWait;
      this.updateGetNotification(feedsAutoRefreshWait);
    },
    loadMoreItems: function (e) {
      var that = this;
      this.options = _.extend(this.options, {});
      var activityModel = this.collection.models[this.collection.models.length - 1];
      if (!activityModel.attributes.noMoreData) {
        delete this.collection.defaults.params["since_id"];
        activityModel.collection.defaults.params.queryParams = {};
        this.collection.defaults.params.queryParams["max_id"] = activityModel.get("id");
        this.collection.fetch(_.extend({remove: false}, this.collection.widgetOptions));
        delete this.collection.defaults.params.queryParams["max_id"];
      }
    },
    onClickItem: function (target) {
      var objectArgs = {
        "node": target.sgmModel,
        "callingViewInstance": this
      }
      this.commonUtil.openItem(objectArgs);

    },
    onClickAttachment: function (target) {
      var objectArgs = {
        "node": target.attachmentModel,
        "callingViewInstance": this
      }
      this.commonUtil.openItem(objectArgs);
    },
    onDestroy: function () {
      clearInterval(this.collection.widgetOptions.notificationInterval);
      if (!!this.adaptivepollObj) {
        this.adaptivepollObj.destroy();
      }
    },
    getNewSinceId: function (e) {
      var sinceId     = this.collection.models.length > 0 ?
                        this.collection.models[0].attributes.id : 0,
          conn        = this.options.connector,
          includeTop  = this.options.hideHeader,
          self        = this,
          queryString = "",
          _context    = self.options.context !== undefined ? self.options.context :
                        self.options.activityfeed.context,
          widgetId    = self.collection.widgetOptions.activityfeed.widgetId;
      self.feedtype = !!this.collection.widgetOptions.feedtype ?
                      this.collection.widgetOptions.feedtype : this.options.feedtype;
      self.updatesfrom = !!this.collection.widgetOptions.updatesfrom ?
                         this.collection.widgetOptions.updatesfrom :
                         this.options.updatesfrom;
      self.widgetId = widgetId;
      var activityWidgetfactory = _context._factories[widgetId];
      if (activityWidgetfactory !== undefined && activityWidgetfactory.options !== undefined &&
          activityWidgetfactory.options.honorfeedsource !== undefined &&
          activityWidgetfactory.options.honorfeedsource &&
          activityWidgetfactory.options.objectnodeid !== undefined) {
        sinceId = this.collection.models.length > 0 ?
                  this.collection.models[0].attributes.id : 0;
        queryString = "&where_feedsource=pulsefrom&where_feedsource_id=" +
                      activityWidgetfactory.options.objectnodeid;
      } else if (this.options.feedsource !== undefined) {
        if (this.options.feedsource.source !== undefined && this.options.feedsource.source) {
          queryString = "&where_feedsource=" + this.options.feedsource.source;
        }
        if (this.options.feedsource.id !== undefined && this.options.feedsource.id) {
          queryString = queryString + "&where_feedsource_id=" + this.options.feedsource.id;
        }
      }
      if (self.updatesfrom !== undefined) {
        if (self.updatesfrom.from !== undefined && self.updatesfrom.from) {
          queryString = queryString + "&where_updatesfrom=" + self.updatesfrom.from;
        }
        if (self.updatesfrom.id !== undefined && self.updatesfrom.id) {
          queryString = queryString + "&where_updatesfrom_id=" + self.updatesfrom.id;
        }
      }
      $.ajax(conn.extendAjaxOptions({
        url: conn.connection.url + this.commonUtil.REST_URLS.csGetAFSinceId + self.feedtype +
             queryString,
        type: 'GET',
        success: function (data, status, jXHR) {
          var responsefromServer = data.lastestIDReturned !== undefined;
          if (responsefromServer &&
              parseInt(data.lastestIDReturned, 10) !== parseInt(sinceId, 10)) {
            var newUpdatesEle =
                    $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
                      self.widgetId);
            $(newUpdatesEle).addClass(!includeTop ? "esoc-activityfeed-getnewupdates-top" :
                                      "").show();
            $(newUpdatesEle).one('click', self, self.getNewUpdates);
            $(newUpdatesEle).on("keydown", self,function (e) {
              var keyCode = e.keyCode || e.which;
              if (keyCode === 13 || keyCode === 32) {
                self.getNewUpdates(e);
              }
            });
            clearInterval(self.options.collection.widgetOptions.notificationInterval);
            if (self.adaptivepollObj !== null) {
              self.adaptivepollObj.destroy();
              self.adaptivepollObj = null;
            }
          }
        },
        error: function (xhr, status, text) {
          self.log.error("Error while retriving the latest since Id...");
        }
      }));
    },
    getNewUpdates: function (e) {
      var feedview             = e.data,
          widgetId             = feedview.options.widgetId ||
                                 feedview.collection.widgetOptions.activityfeed.widgetId,
          feedsAutoRefreshWait = (feedview.options.config_settings &&
                                  feedview.options.config_settings.feedsAutoRefreshWait) ||
                                 (feedview.collection.config_settings &&
                                  feedview.collection.config_settings.feedsAutoRefreshWait);
      if (!$(e.target).hasClass("esoc-activityfeed-close")) {
        delete feedview.collection.defaults.params["since_id"];
        delete feedview.collection.defaults.params["max_id"];
        feedview.collection.defaults.params.queryParams = {};
        var _context = feedview.options.context !== undefined ? feedview.options.context :
                       feedview.options.activityfeed.context;
        feedview.$el.scrollTop(0);
        feedview.collection.fetch(_.extend(feedview.collection.widgetOptions, {remove: true}));
      }
      $(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" + widgetId).hide();
      $(".esoc-activityfeed-new-updates-wrapper").css("outline", "none");
      if (!!feedsAutoRefreshWait) {
        feedview.updateGetNotification(feedsAutoRefreshWait);
      }
    }
  });
  return ObjectView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/activityfeedwidget/impl/activityfeedcontent',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "  <div class=\"binf-col-lg-2 binf-col-md-2 binf-col-sm-2 binf-col-xs-2 esoc-activityfeed-filter \"></div>\r\n  <div\r\n      class=\"binf-col-lg-10 binf-col-md-10 binf-col-sm-10 binf-col-xs-10  eosc-acitivity-feed-content esoc-acitivity-feed-filter-enabled\"></div>\r\n";
},"3":function(depth0,helpers,partials,data) {
    return "  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 eosc-acitivity-feed-content\"></div>\r\n";
},"5":function(depth0,helpers,partials,data) {
    return "  <div class=\"tile-footer\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.enableFiltersForStandardView : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.hideExpandIcon : stack1),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(5, data, 0)})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_activityfeedwidget_impl_activityfeedcontent', t);
return t;
});
/* END_TEMPLATE */
;
/**
 * ActivityFeedContentWidget is for initiating objectview and expanding behavior for the view. It
 * doesn't show up a title for the view
 */

csui.define('esoc/widgets/activityfeedwidget/activityfeedcontent',[
  'require',
  'csui/lib/underscore',
  'csui/lib/jquery',
  'csui/lib/backbone',
  'csui/lib/marionette',
  'csui/lib/handlebars',
  'csui/controls/tile/behaviors/expanding.behavior',
  'esoc/widgets/activityfeedwidget/activityfeedfactory',
  'esoc/widgets/activityfeedwidget/activityfeed.view',
  'esoc/widgets/activityfeedwidget/activityfeedwithfilter.view',
  'csui/utils/contexts/page/page.context',
  'esoc/widgets/activityfeedwidget/object/object.view',
  'esoc/widgets/activityfeedwidget/activityfeedfilter.view',
  'esoc/widgets/activityfeedwidget/util',
  'hbs!esoc/widgets/activityfeedwidget/impl/activityfeedcontent',
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
  'csui/controls/progressblocker/blocker',
  'csui/utils/namedsessionstorage',
  'css!esoc/widgets/activityfeedwidget/activityfeed.css',
  // TODO: Only stylesheets are needed from those two, but a stylesheet
  // alone is not the public interface - the views should be used here
  'csui/controls/list/list.view',
  'csui/controls/tile/tile.view'
], function (_require, _, $, Backbone, Marionette, Handlebars,
    ExpandingBehavior, ItemCollection, ItemCollectionView, ActivityFeedWithFilterView,
    PageContext, ObjectView, ActivityFeedFilterView, Util, ActivityFeedContent, Lang,
    BlockingView, NamedSessionStorage) {
  function ActivityFeedContentWidget(options) {
    Util.commonUtil.fillDefaultActivityOptions(options);
    if (options.feedtype !== undefined) {
      ItemCollection.prototype.propertyPrefix = Util.commonUtil.getActivityWidgetId(options);
      ItemCollection.prototype.uniqueid = Util.commonUtil.getActivityWidgetId(options);
    }
    var ContentView = Marionette.LayoutView.extend({
          className: 'esoc-activityfeed-contentwidget cs-list',
          template: ActivityFeedContent,
          regions: {
            listRegion: '.eosc-acitivity-feed-content',
            filterRegion: '.esoc-activityfeed-filter'
          },
          namedSessionStorage: new NamedSessionStorage("esoc-activity-filterinfo"),
          templateHelpers: function () {
            return {
              messages: {
                hideExpandIcon: this.options.hideExpandIcon,
                enableFiltersForStandardView: this.options.enableFiltersForStandardView
              }
            };
          },
          constructor: function ActivityFeedContentWidget(options) {
            options || (options = {});
            this.options = options;
            Marionette.LayoutView.prototype.constructor.apply(this, arguments);
            var self = this;
            if (this.options.wrapperClass !== undefined) {
              this.$el.addClass(this.options.wrapperClass);
            }
            var sessionFilterInfo,
                filterInfoKey = options.filterSource ? options.filterSource + "_" +
                                                       ItemCollection.prototype.uniqueid :
                                ItemCollection.prototype.uniqueid;
            sessionFilterInfo = this.namedSessionStorage.get(filterInfoKey);
            if (!!sessionFilterInfo) {
              if (!!sessionFilterInfo.feedtype) {
                options.feedtype = sessionFilterInfo.feedtype;
              }
              if (!!sessionFilterInfo.updatesfrom) {
                options.updatesfrom = sessionFilterInfo.updatesfrom;
              }
            }
            if (options.origin === 'userwidget') {
              delete options.context._factories[ItemCollection.prototype.uniqueid];
            }
            this.collection = options.context.getCollection(ItemCollection, options);
            var _options = _.extend(options, {collection: this.collection}),
                ObjectView = !!ObjectView ? ObjectView :
                             _require('esoc/widgets/activityfeedwidget/object/object.view');
            this.listView = new ObjectView(_options);
            if (this.options.enableFiltersForStandardView) {
              this.activityFeedFilterView = new ActivityFeedFilterView(_options);
              this.activityFeedFilterView.on('select:filter', function (filterOptions) {
                self.listView.trigger('refresh:collection', filterOptions);
              });
            }
            if (this.options.blockingParentView) {
              BlockingView.delegate(this, this.options.blockingParentView);
            } else {
              BlockingView.imbue(this);
            }
            this.listenTo(this, "dom:refresh", function () {
              Util.commonUtil.navigationWithArrowKeys(this, ".object-group");
            });
            this.listenTo(this.collection, "request", this.blockActions)
                .listenTo(this.collection, "sync", this.unblockActions)
                .listenTo(this.collection, "error", this.unblockActions);
          },
          events: {
            "keydown .icon-tileExpand": "onTileExpandKeydown"
          },
          behaviors: {
            Expanding: {
              behaviorClass: ExpandingBehavior,
              expandedView: function () {
                return this.options.feedSettings && this.options.feedSettings.enableFilters ?
                       ActivityFeedWithFilterView :
                       ItemCollectionView;
              },
              titleBarIcon: options.titleBarIcon || 'title-activityfeed',
              dialogTitle: options.title || Lang.dialogTitle,
              dialogTitleIconRight: 'icon-tileCollapse',
              dialogClassName: 'activityfeed-expand esoc',
              expandedViewOptions: _.extend(options, {collection: this.collection})
            }
          },
          onTileExpandKeydown: function (event) {
            var keyCode = event.keyCode || event.which;
            if (keyCode === 32 || keyCode === 13) {
              this.triggerMethod('expand');
            }
          },
          onShow: function () {
            if (this.options.enableFiltersForStandardView) {
              this.filterRegion.show(this.activityFeedFilterView);
              this.activityFeedFilterView.triggerMethod("after:show");
            }
            this.listRegion.show(this.listView);
            if (this.options.headerView) {
              !!this.listRegion.$el ?
              this.listRegion.$el.addClass("esoc-activityfeed-header-container") : "";
            }
            this.$el.find(".icon-tileExpand").attr("tabindex", "0").attr("data-cstabindex", "0");
          }
        }),
        contentView = new ContentView(options);
    this.contentView = contentView;
  }

  return ActivityFeedContentWidget;
});

csui.define('esoc/widgets/userwidget/model/miniprofilecard.model',[
  'csui/lib/backbone',
  'esoc/widgets/userwidget/util'
], function (Backbone, Util) {
  var MiniProfileCardModel = Backbone.Model.extend({
    defaults: {
      userid: "",
      display_name: "",
      business_email: "",
      title: "",
      className: "esoc-miniprofile-view",
      otherUser: "",
      following: "",
      otherUserProfile: ""
    },
    constructor: function MiniProfileCardModel(options) {
      Backbone.Model.prototype.constructor.apply(this, arguments);
    },
    parse: function (data, options) {
      data.user.business_email = data.user.email;
      data.user.id = parseInt(data.user.id, 10);
      data.user.display_name = data.user.name;
      return data.user;
    }
  });
  return MiniProfileCardModel;
})
;

csui.define('esoc/widgets/userwidget/model/relations.model',[
  "csui/lib/jquery",
  "csui/lib/backbone",
  "esoc/widgets/userwidget/model/miniprofilecard.model",
  "esoc/widgets/userwidget/util",
  'csui/utils/url',
  'csui/utils/contexts/factories/user',
  'esoc/widgets/userwidget/chat/chatfactory',
  'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model',
  'i18n!esoc/widgets/userwidget/nls/lang'
], function ($, Backbone, MiniProfileCardModel, UserWidgetUtil, Url, UserModelFactory, ChatFactory,
    SkypeAttributeModel,
    lang) {
  var RelationsModel = Backbone.Collection.extend({
    getRelationsRESTUrl: "",
    util: UserWidgetUtil,
    defaults: {
      params: {
        cursor: -1
      },
      relationsRESTUrl: "",
      loggedUserId: "",
      relation: "",
      otherUserProfile: "",
      extendedmodel: ""
    },
    model: MiniProfileCardModel,
    constructor: function RelationsModel(options) {
      var relationsUrl = this.util.commonUtil.updateQueryStringValues(
          this.util.commonUtil.updateQueryStringValues(
              Url.combine(this.util.commonUtil.REST_URLS.pulseRestUrl,
                  options.userid),
              this.util.commonUtil.globalConstants.COUNT,
              this.util.commonUtil.globalConstants.PULSE_RESOURCE_COUNT),
          this.util.commonUtil.globalConstants.FIELDS, options.relation);
      var query = this.util.commonUtil.globalConstants.FIELDS + '=' +
                  this.util.commonUtil.globalConstants.CHAT_SEETING;
      relationsUrl = Url.appendQuery(relationsUrl, query);

      this.getRelationsRESTUrl = Url.combine(
          this.util.commonUtil.getV2Url(options.connector.connection.url),
          relationsUrl);
      this.relationsRESTUrl = this.getRelationsRESTUrl;
      this.defaults.loggedUserId = options.context.getModel(UserModelFactory) || options.loggedUserId;
      this.defaults.relation = options.relation;
      this.defaults.extendedmodel = options.userwidgetmodel;
      this.defaults.otherUserProfile = options.userwidgetmodel.attributes.otherUser;
      if (options && options.connector) {
        options.connector.assignTo(this);
      }
      Backbone.Collection.prototype.constructor.apply(this, arguments);
    },
    url: function () {
      return this.getRelationsRESTUrl;
    },
    parse: function (responseData) {
      var response = responseData.results;
      this.defaults.extendedmodel.attributes.followers_count = response.followers_count;
      this.defaults.extendedmodel.attributes.friends_count = response.friends_count;
      this.defaults.extendedmodel.attributes.following = response.following;
      var relations = response[this.defaults.relation];
      this.defaults.params.cursor = relations.next_cursor;
      for (var index in relations.users) {
        var user = relations.users[index].user,
            selfUser = parseInt(user.id, 10) === parseInt(this.defaults.loggedUserId, 10);
        if (!!response.chatSettings) {
          user.chatSettings = response.chatSettings;
        }
        var modelAttrs = {
          relation: this.defaults.relation,
          selfUser: selfUser,
          otherUserProfile: this.defaults.otherUserProfile,
          following: user.following
        }
        this.util.setRelationModel(user, modelAttrs);
      }
      var returnData = JSON.parse(JSON.stringify(relations.users));
      return returnData;
    },
    fetch: function (options) {
      if (options && options.params) {
        options.params = $.extend(this.defaults.params, options.params);
        this.getRelationsRESTUrl = this.relationsRESTUrl + "&" + $.param(options.params);
      }
      Backbone.Collection.prototype.fetch.apply(this, arguments);
    },
    fetchSuccess: function (model, response, options) {
      if (response.results.chatSettings.chatEnabled &&
          response.results.chatSettings.presenceEnabled) {
        var users,
            emailIds = [],
            models   = [],
            presenceHolder = [],
            currentPage = Math.ceil(model.length / 10),
            count;
        if (model.defaults.relation === model.util.commonUtil.globalConstants.FRIENDS) {
          users = response.results.friends.users;
          count = response.results.friends_count;
        } else if (model.defaults.relation === model.util.commonUtil.globalConstants.FOLLOWERS) {
          users = response.results.followers.users
          count = response.results.followers_count;
        }
        if (users.length > 0) {
          for (var index in users) {
            emailIds[index] = users[index].user.screen_name + '@' +
                              response.results.chatSettings.chatDomain;
            presenceHolder[index] = "esoc-mini-profile-presence-indicator-" +
                                    users[index].user.id;
            models[index] = model.models[(currentPage - 1) * 10 + parseInt(index, 10)];
          }
          var presenceOptions = {
            presenceHolder: presenceHolder,
            email: emailIds,
            context: options.context,
            models: models
          };
          if (SkypeAttributeModel.isPluginEnabled()) {
            ChatFactory.getProvider().showUserPresence(presenceOptions);
          } else {
            ChatFactory.getProvider().updateEventPresence(presenceOptions);
          }
        }
      }
    }
  });
  return RelationsModel;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/relations',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.isFollowingTab : stack1),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"2":function(depth0,helpers,partials,data) {
    return "      <div id=\"esoc-user-picker\"\r\n           class=\"esoc-user-picker-holder binf-col-lg-4 binf-col-md-6 binf-col-sm-6 binf-col-xs-8\"></div>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.isFollowingTab : stack1),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"5":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <div\r\n          class=\"esoc-user-hide-element esoc-user-no-relations binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n        <div id=\"esoc-user-no-relations\"\r\n             class=\"esoc-user-relations-list esoc-user-default-content\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followingListEmptyMessage : stack1), depth0))
    + "</div>\r\n      </div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<div class=\"esoc-user-relations-container binf-col-lg-8 binf-col-md-8 binf-col-sm-8 binf-col-xs-8\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.otherUser : stack1),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(1, data, 0)})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.otherUser : stack1),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(4, data, 0)})) != null ? stack1 : "")
    + "  <div id=\"esoc-user-relations-list\"\r\n       class=\"esoc-user-relations-list binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\"></div>\r\n</div>\r\n<div id=\"esoc-user-relations-activity-list\"\r\n     class=\"esoc-user-relations-activity-list binf-col-lg-4 binf-col-md-4 binf-col-sm-4 binf-col-xs-4\"></div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_relations', t);
return t;
});
/* END_TEMPLATE */
;
/**
 *  This relation view is to handle both the followers and following user's information.
 *  Based on selectedTab, it decides the model dynamically and generates the respective view.
 */
csui.define('esoc/widgets/userwidget/view/relations.view',[
  'require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/contexts/factories/user',
  'esoc/widgets/userwidget/view/miniprofilecollection.view',
  'esoc/widgets/activityfeedwidget/activityfeedcontent',
  'esoc/widgets/userwidget/model/relations.model',
  'esoc/widgets/userwidget/view/customuserpicker.view',
  'hbs!esoc/widgets/userwidget/impl/relations',
  'esoc/widgets/userwidget/util',
  'esoc/widgets/userwidget/chat/chatutil',
  'esoc/widgets/userwidget/chat/chatfactory',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'esoc/widgets/userwidget/chat/skype/skypeucwa.attribute.model'
], function (_require, $, _, Handlebars, Marionette, UserModelFactory, MiniProfileCollectionView,
    ActivityFeedContent, RelationsModel, UserPickerView, RelationsTemplate, Util, ChatUtil,
    ChatFactory,
    Lang, skypeAttributeModel) {
  var self = null;
  var RelationsView = Marionette.ItemView.extend({
    tagName: "div",
    className: 'esoc-user-relation-tab',
    template: RelationsTemplate,
    miniProfileCollectionView: "",
    activityFeedView: "",
    activityFeedOptions: "",
    ActivityFeedWidgetView: "",
    templateHelpers: function () {
      return {
        messages: {
          isFollowingTab: this.options.selectedtab === Util.commonUtil.globalConstants.FRIENDS,
          followingListEmptyMessage: Lang.noFriendsMessage,
          otherUser: this.options.userwidgetmodel.attributes.otherUser
        }
      };
    },
    initialize: function (options) {
      this.options = options;
      self = this;
      var commonUtil  = Util.commonUtil,
          updatesFrom = options.selectedtab === commonUtil.globalConstants.FRIENDS ?
                        "following" : commonUtil.globalConstants.FOLLOWERS;
      this.ActivityFeedContent = _require('esoc/widgets/activityfeedwidget/activityfeedcontent');
      options.relation = options.selectedtab === commonUtil.globalConstants.FRIENDS ?
                         commonUtil.globalConstants.FRIENDS :
                         commonUtil.globalConstants.FOLLOWERS;
      var relationsModel = new RelationsModel(options);
      this.activityFeedOptions = {
        "context": options.context,
        "otherUser": options.userwidgetmodel.attributes.otherUser,
        "hideupdatesfrom": true,
        "updatesfrom": {
          "from": updatesFrom,
          "id": options.userwidgetmodel.attributes.userid
        },
        "feedSettings": {"enableFilters": true},
        "filterSource": "userprofile",
        "selectedTab": options.selectedtab,
        "origin": "userwidget"
      };
      //TODO: implement blocking of parent view  until response is fetched and view is ready
      relationsModel.fetch({
        async: false,
        success: relationsModel.fetchSuccess,
        context: options.context
      });
      $('.esoc-userprofile-action-names a.esoc-userprofile-following-action').show().html(
          this.options.userwidgetmodel.attributes.following ? Lang.unfollow : Lang.follow);
      $('.esoc-userprofile-action-names a.esoc-userprofile-following-action').attr('title',
          this.options.userwidgetmodel.attributes.following ? Lang.unfollow : Lang.follow);
      var user   = options.context ? options.context.getModel(UserModelFactory) : undefined,
          userId = !!user && user.get("id") ? user.get("id") : options.loggedUserId;

      this.miniProfileCollectionView = new MiniProfileCollectionView({
        collection: relationsModel,
        loggedUserId: userId,
        relation: options.relation,
        otherUserProfile: options.userwidgetmodel.attributes.otherUser,
        context: options.context
      });
      var relationCount = (this.options.selectedtab === Util.commonUtil.globalConstants.FRIENDS ?
                           this.options.userwidgetmodel.attributes.friends_count :
                           this.options.userwidgetmodel.attributes.followers_count);
      Util.changeRelationsCounts(this.options.userwidgetmodel.attributes);
      this.options.userwidgetmodel.attributes.relationCount = relationCount;
      this.activityFeedView = new this.ActivityFeedContent(this.activityFeedOptions);
      this.listenTo(this.miniProfileCollectionView, "collectionview.show.user.dialog",
          function (e) {
            self.trigger("relationsview.show.user.dialog", e);
          });
      relationsModel.on('remove.relation', function (e, response) {
        if (self.activityFeedView.contentView.collection.widgetOptions.getNewUpdates !==
            undefined) {
          delete self.activityFeedView.contentView.collection.widgetOptions["getNewUpdates"];
        }
        var friends_count         = response.friends_count !== undefined ? response.friends_count :
                                    response.data.user.friends_count,
            followers_count       = response.followers_count !== undefined ?
                                    response.followers_count :
                                    response.data.user.followers_count,
            afwID                 = self.activityFeedOptions.collection.widgetOptions.activityfeed.widgetId,
            relationsCountResults = {
              friends_count: friends_count,
              followers_count: followers_count
            };
        Util.changeRelationsCounts(relationsCountResults);
        if ((self.options.selectedtab === Util.commonUtil.globalConstants.FRIENDS &&
             parseInt(friends_count, 10) === 0) ||
            (self.options.selectedtab === Util.commonUtil.globalConstants.FOLLOWERS &&
             parseInt(followers_count, 10) === 0)) {
          self.options.userwidgetmodel.attributes.followers_count = parseInt(followers_count, 10);
          self.options.userwidgetmodel.attributes.friends_count = parseInt(friends_count, 10);
          self.options.userwidgetmodel.attributes.relationCount = (self.options.selectedtab ===
                                                                   Util.commonUtil.globalConstants.FRIENDS ?
                                                                   self.options.userwidgetmodel.attributes.friends_count :
                                                                   self.options.userwidgetmodel.attributes.followers_count);
          if (self.options.selectedtab === Util.commonUtil.globalConstants.FRIENDS) {
            self.$el.find(".esoc-user-no-relations").show();
            self.$el.find("#esoc-user-no-relations").show();
          }
          self.$el.find("#esoc-user-relations-list").hide();
          self.$el.find("#esoc-user-relations-activity-list").hide();
          self.activityFeedView.contentView.collection.widgetOptions = _.extend(
              {getNewUpdates: false},
              self.activityFeedView.contentView.collection.widgetOptions);
          if (!self.options.userwidgetmodel.attributes.otherUser &&
              self.templateHelpers().messages.isFollowingTab) {
            self.$el.find(".esoc-user-no-relations").show();
          }
        }
        self.$el.find(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
                      afwID).hide();
        self.options.context._factories[afwID].fetch(self.activityFeedOptions);
      });
      this.listenTo(relationsModel, "add.follower", this.onAddFollower);
      this.options.showActions = true;
      this.pickerView = new UserPickerView({
        context: this.options.context,
        limit: 5,
        memberFilter: {type: [0]},
        widgetoptions: this.options,
        placeholder: Lang.userpickerplaceholder,
        prettyScrolling: true,
        scrollContainerHeight: 'auto'
      });
    },
    constructor: function RelationsView(options) {
      options = options || {};
      Marionette.ItemView.prototype.constructor.call(this, options);
    },
    errorHandle: function (model, response) {
    },
    onShow: function () {
      if (self.activityFeedView.contentView.collection.widgetOptions.getNewUpdates !== undefined) {
        delete self.activityFeedView.contentView.collection.widgetOptions["getNewUpdates"];
      }
      self.showUserPicker();
      var miniProfileCollectionRegion = new Marionette.Region({el: "#esoc-user-relations-list"}),
          activityFeedRegion          = new Marionette.Region({el: "#esoc-user-relations-activity-list"});
      miniProfileCollectionRegion.show(this.miniProfileCollectionView);
      activityFeedRegion.show(this.activityFeedView.contentView);
      if (this.options.userwidgetmodel.attributes.relationCount === 0) {
        self.activityFeedView.contentView.collection.widgetOptions = _.extend(
            {getNewUpdates: false},
            self.activityFeedView.contentView.collection.widgetOptions);
        self.$el.find("#esoc-user-relations-list").hide();
        self.$el.find("#esoc-user-relations-activity-list").hide();
        if (!self.options.userwidgetmodel.attributes.otherUser &&
            self.templateHelpers().messages.isFollowingTab) {
          self.$el.find(".esoc-user-no-relations").show();
        }
      }

      self.options.context._factories[self.activityFeedOptions.collection.widgetOptions.activityfeed.widgetId].fetch(
          self.activityFeedOptions).done(function () {
        self.trigger("view:shown");
      });

      if (skypeAttributeModel.getPresenceEnabled() && skypeAttributeModel.isPluginEnabled()) {
        var collectionLen = self.miniProfileCollectionView.collection.length,
            collection    = self.miniProfileCollectionView.collection,
            emailIDS      = [],
            presenceEle   = [];

        if (collectionLen > 0) {
          for (var item = 0; item < collectionLen; item++) {

            emailIDS[item] = collection.models[item].attributes.screen_name + '@' +
                             collection.models[item].attributes.chatSettings.chatDomain;
            presenceEle[item] = "esoc-mini-profile-presence-indicator-" +
                                collection.models[item].attributes.id;

          }

          var presenceOptions = {
            presenceHolder: presenceEle,
            email: emailIDS,
            context: self.options.context
          };

          if (emailIDS.length > 0 && presenceEle.length > 0) {
            ChatFactory.getProvider().showUserPresence(presenceOptions);
          }
        }
      }
    },
    onAddFollower: function (e) {
      var afwID = self.activityFeedOptions.collection.widgetOptions.activityfeed.widgetId;
      if (self.options.userwidgetmodel.attributes.relationCount === 0) {
        if (self.activityFeedView.contentView.collection.widgetOptions.getNewUpdates !==
            undefined) {
          delete self.activityFeedView.contentView.collection.widgetOptions["getNewUpdates"];
        }

        if (self.options.selectedtab === Util.commonUtil.globalConstants.FRIENDS) {
          self.$el.find("#esoc-user-no-relations").hide();
        }
        self.$el.find("#esoc-user-relations-list").show();
        self.$el.find("#esoc-user-relations-activity-list").show();
        Util.commonUtil.alignUpdateButton(afwID, false);
        if (this.options.relation === Util.commonUtil.globalConstants.FOLLOWERS) {
          self.options.userwidgetmodel.attributes.relationCount = self.options.userwidgetmodel.attributes.followers_count;
        }
        if (!(self.activityFeedView instanceof ActivityFeedContent)) {
          self.activityFeedView = new this.ActivityFeedContent(self.activityFeedOptions);
        }
      }
      self.$el.find(".esoc-activityfeed-getnewupdates.esoc-activityfeed-getnewupdates-" +
                    afwID).hide();
      self.options.context._factories[afwID].fetch(self.activityFeedOptions);
    },
    showUserPicker: function () {
      if (!self.options.userwidgetmodel.attributes.otherUser) {
        if (self.options.relation === Util.commonUtil.globalConstants.FRIENDS) {
          var pickerRegion = new Marionette.Region({
            el: this.$el.find('#esoc-user-picker')
          });
          pickerRegion.show(this.pickerView);
          this.$el.find(".esoc-user-relations-list").addClass("esoc-user-relations-with-picker");
        }
      }
    },
    onDestroy: function () {
      self.activityFeedView.contentView.destroy();
    }
  });
  return RelationsView;
});

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/settings',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "checked";
},"3":function(depth0,helpers,partials,data) {
    return " icon-checkbox-selected ";
},"5":function(depth0,helpers,partials,data) {
    return " icon-checkbox ";
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div\r\n        class=\"esoc-setting-privacySettings csui-facet-panel binf-col-lg-6 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-setting-name\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacySettings : stack1), depth0))
    + "</div>\r\n      <span class=\"esoc-sub-setting-name\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyMyUpdatesTo : stack1), depth0))
    + "</span>\r\n\r\n      <div class=\"csui-facet-item\">\r\n        <div class=\"esoc-settings-selection-label\">\r\n          <input type=\"radio\" name=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.CONTENT_PRIVACY : stack1), depth0))
    + "\" value=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "\"\r\n                 id=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "\" class=\"esoc_setting_edit_field\"\r\n                 "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.contentPrivacyEveryOne : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " >\r\n          <span id=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "_radio\"\r\n                class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.contentPrivacyEveryOne : stack1),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n        </div>\r\n\r\n        <div class=\"csui-filter-name\">\r\n            <label for=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyEveryOne : stack1), depth0))
    + "\">\r\n                "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyEveryOne : stack1), depth0))
    + "\r\n	    </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"csui-facet-item\">\r\n        <div class=\"esoc-settings-selection-label\">\r\n          <input type=\"radio\" name=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.CONTENT_PRIVACY : stack1), depth0))
    + "\" value=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "\"\r\n                 id=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "\" class=\"esoc_setting_edit_field\"\r\n                 "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.contentPrivacyFollow : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " >\r\n          <span id=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "_radio\"\r\n                class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.contentPrivacyFollow : stack1),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n        </div>\r\n\r\n        <div class=\"csui-filter-name\">\r\n            <label for=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyFollow : stack1), depth0))
    + "\">\r\n                "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyFollow : stack1), depth0))
    + "\r\n	    </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"csui-facet-item\">\r\n        <div class=\"esoc-settings-selection-label\">\r\n          <input type=\"radio\" name=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.CONTENT_PRIVACY : stack1), depth0))
    + "\" value=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "\"\r\n                 id=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "\" class=\"esoc_setting_edit_field\"\r\n                 "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.contentPrivacyNone : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " >\r\n          <span id=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "_radio\"\r\n                class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.contentPrivacyNone : stack1),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n        </div>\r\n\r\n        <div class=\"csui-filter-name\">\r\n            <label for=\"esoc_privacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyNone : stack1), depth0))
    + "\">\r\n                "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyNone : stack1), depth0))
    + "\r\n            </label>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n";
},"8":function(depth0,helpers,partials,data) {
    return " icon-radiobutton-selected ";
},"10":function(depth0,helpers,partials,data) {
    return " icon-radiobutton ";
},"12":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <div\r\n        class=\"esoc-setting-status-privacySettings csui-facet-panel binf-col-lg-6 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      <div class=\"esoc-setting-name\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacySettingsForStatusMessages : stack1), depth0))
    + "</div>\r\n      <span class=\"esoc-sub-setting-name\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyMyUpdatesTo : stack1), depth0))
    + "</span>\r\n\r\n      <div class=\"csui-facet-item\">\r\n        <div class=\"esoc-settings-selection-label\">\r\n          <input type=\"radio\" name=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.STATUS_PRIVACY : stack1), depth0))
    + "\" value=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "\"\r\n                 id=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "\"\r\n                 class=\"esoc_setting_edit_field\"\r\n                 "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.statusPrivacyEveryOne : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " >\r\n          <span id=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "_radio\"\r\n                class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.statusPrivacyEveryOne : stack1),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n        </div>\r\n\r\n        <div class=\"csui-filter-name\">\r\n            <label for=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.EVERYONE : stack1), depth0))
    + "\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyEveryOne : stack1), depth0))
    + "\">\r\n                "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyEveryOne : stack1), depth0))
    + "\r\n            </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"csui-facet-item\">\r\n        <div class=\"esoc-settings-selection-label\">\r\n          <input type=\"radio\" name=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.STATUS_PRIVACY : stack1), depth0))
    + "\" value=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "\"\r\n                 id=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "\" class=\"esoc_setting_edit_field\"\r\n                 "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.statusPrivacyFollow : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " >\r\n          <span id=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "_radio\"\r\n                class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.statusPrivacyFollow : stack1),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n        </div>\r\n\r\n        <div class=\"csui-filter-name\">\r\n            <label for=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.FOLLOW : stack1), depth0))
    + "\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyFollow : stack1), depth0))
    + "\">\r\n                "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyFollow : stack1), depth0))
    + "\r\n	    </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"csui-facet-item\">\r\n        <div class=\"esoc-settings-selection-label\">\r\n          <input type=\"radio\" name=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.STATUS_PRIVACY : stack1), depth0))
    + "\" value=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "\"\r\n                 id=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "\" class=\"esoc_setting_edit_field\"\r\n                 "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.statusPrivacyNone : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " >\r\n          <span id=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "_radio\"\r\n                class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.statusPrivacyNone : stack1),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n        </div>\r\n\r\n        <div class=\"csui-filter-name\">\r\n            <label for=\"esoc_statusPrivacySettings_"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.NONE : stack1), depth0))
    + "\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyNone : stack1), depth0))
    + "\">\r\n                "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.privacyNone : stack1), depth0))
    + "\r\n            </label>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<!--This class(esoc_setting_edit_field) is used for click event, do not use it for styling -->\r\n<div class=\"esoc-settings-tab-content binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n  <div class=\"esoc-setting-notification csui-facet-panel\">\r\n    <div class=\"esoc-setting-name\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notification : stack1), depth0))
    + "</div>\r\n\r\n    <div class=\"csui-facet-item\">\r\n      <div class=\"esoc-settings-selection-label\">\r\n        <input type=\"checkbox\" name=\"notification\" value=\"notifyMentions\"\r\n               id=\"esoc_setting_notifyMentions\" class=\"esoc_setting_edit_field\"\r\n               "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyMentions : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ">\r\n        <span id=\"esoc_setting_notifyMentions_checkbox\"\r\n              class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyMentions : stack1),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.program(5, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n      </div>\r\n\r\n      <div class=\"csui-filter-name\">\r\n          <label for=\"esoc_setting_notifyMentions\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyMentions : stack1), depth0))
    + "\">\r\n              "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyMentions : stack1), depth0))
    + "\r\n	  </label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"csui-facet-item\">\r\n      <div class=\"esoc-settings-selection-label\">\r\n        <input type=\"checkbox\" name=\"notification\" value=\"notifyNewFollower\"\r\n               id=\"esoc_setting_notifyNewFollower\" class=\"esoc_setting_edit_field\"\r\n               "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyNewFollower : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ">\r\n        <span id=\"esoc_setting_notifyNewFollower_checkbox\"\r\n              class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyNewFollower : stack1),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.program(5, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n      </div>\r\n\r\n      <div class=\"csui-filter-name\">\r\n          <label for=\"esoc_setting_notifyNewFollower\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyNewFollower : stack1), depth0))
    + "\">\r\n              "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyNewFollower : stack1), depth0))
    + "\r\n	  </label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"csui-facet-item\">\r\n      <div class=\"esoc-settings-selection-label\">\r\n        <input type=\"checkbox\" name=\"notification\" value=\"notifyCommentsMyPosts\"\r\n               id=\"esoc_setting_notifyCommentsMyPosts\" class=\"esoc_setting_edit_field\"\r\n               "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyCommentsMyPosts : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ">\r\n        <span id=\"esoc_setting_notifyCommentsMyPosts_checkbox\"\r\n              class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyCommentsMyPosts : stack1),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.program(5, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n      </div>\r\n\r\n      <div class=\"csui-filter-name\">\r\n          <label for=\"esoc_setting_notifyCommentsMyPosts\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyCommentsMyPosts : stack1), depth0))
    + "\">\r\n              "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyCommentsMyPosts : stack1), depth0))
    + "\r\n	  </label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"csui-facet-item\">\r\n      <div class=\"esoc-settings-selection-label\">\r\n        <input type=\"checkbox\" name=\"notification\" value=\"notifyCommentsMyThreads\"\r\n               id=\"esoc_setting_notifyCommentsMyThreads\" class=\"esoc_setting_edit_field\"\r\n               "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyCommentsMyThreads : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ">\r\n        <span id=\"esoc_setting_notifyCommentsMyThreads_checkbox\"\r\n              class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyCommentsMyThreads : stack1),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.program(5, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n      </div>\r\n\r\n      <div class=\"csui-filter-name\">\r\n          <label for=\"esoc_setting_notifyCommentsMyThreads\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyCommentsMyThreads : stack1), depth0))
    + "\">\r\n              "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyCommentsMyThreads : stack1), depth0))
    + "\r\n	  </label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"csui-facet-item\">\r\n      <div class=\"esoc-settings-selection-label\">\r\n        <input type=\"checkbox\" name=\"notification\" value=\"notifyPrivateMessages\"\r\n               id=\"esoc_setting_notifyPrivateMessages\" class=\"esoc_setting_edit_field\"\r\n               "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyPrivateMessages : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ">\r\n        <span id=\"esoc_setting_notifyPrivateMessages_checkbox\"\r\n              class=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.notifyPrivateMessages : stack1),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.program(5, data, 0)})) != null ? stack1 : "")
    + "\"></span>\r\n      </div>\r\n\r\n      <div class=\"csui-filter-name\">\r\n          <label for=\"esoc_setting_notifyPrivateMessages\" class=\"csui-name\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyPrivateMessages : stack1), depth0))
    + "\">\r\n              "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.notifyPrivateMessages : stack1), depth0))
    + "\r\n	  </label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.contentPrivacy : stack1),{"name":"if","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.settings : depth0)) != null ? stack1.statusPrivacy : stack1),{"name":"if","hash":{},"fn":this.program(12, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "</div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_settings', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/userwidget/model/settings.model',[
  'csui/lib/backbone',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/utils/url',
  'esoc/widgets/userwidget/util'
], function (Backbone, $, _, Url, Util) {
  var SettingsModel = Backbone.Model.extend({
    connector: "",
    restUrl: "",
    constructor: function SettingsModel(options) {
      this.options = options;
      this.restUrl = Url.combine(Util.commonUtil.getV2Url(options.connector.connection.url),
          Util.commonUtil.REST_URLS.pulseRestUrl,
          options.userWidgetView.model.attributes.userid);
      this.restUrl = Util.commonUtil.updateQueryStringValues(this.restUrl,
          Util.commonUtil.globalConstants.FIELDS, Util.commonUtil.globalConstants.SETTINGS);
      Backbone.Model.prototype.constructor.apply(this, arguments);
      if (options && options.connector) {
        options.connector.assignTo(this);
      }
    },
    url: function () {
      return this.restUrl;
    },
    fetch: function () {
      Backbone.Model.prototype.fetch.apply(this, arguments);
    },
    parse: function (data, options) {
      var results                 = data.results,
          possibleOptions         = Util.commonUtil.globalConstants.USER_PRIVACY_SETTINGS,
          possibleValues          = ["PrivacyEveryOne", "PrivacyFollow", "PrivacyNone"],
          contentPrivacyCurrValue = possibleValues[$.inArray(results.settings.contentPrivacy,
              possibleOptions)],
          statusPrivacyCurrValue  = possibleValues[$.inArray(results.settings.statusPrivacy,
              possibleOptions)];

      results.settings["content" + contentPrivacyCurrValue] = "on";
      results.settings["status" + statusPrivacyCurrValue] = "on";
      return results;
    }
  });
  return SettingsModel;
});

/**
 *  This is to show user's settings information
 */
csui.define('esoc/widgets/userwidget/view/settings.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/url',
  'hbs!esoc/widgets/userwidget/impl/settings',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'esoc/widgets/userwidget/model/settings.model',
  'esoc/widgets/userwidget/util',
  'csui/controls/tile/behaviors/perfect.scrolling.behavior'
], function ($, _, Handlebars, Marionette, Url, SettingsTemplate, Lang, SettingsModel, Util,
    PerfectScrollingBehavior) {
  var self = null;
  var SettingsView = Marionette.ItemView.extend({
    tagName: "div",
    className: 'esoc-settings-tab',
    template: SettingsTemplate,
    util: Util,
    templateHelpers: function () {
      return {
        messages: {
          notification: Lang.notification,
          notifyMentions: Lang.notifyMentions,
          notifyNewFollower: Lang.notifyNewFollower,
          notifyCommentsMyPosts: Lang.notifyCommentsMyPosts,
          notifyCommentsMyThreads: Lang.notifyCommentsMyThreads,
          notifyPrivateMessages: Lang.notifyPrivateMessages,
          privacySettings: Lang.privacySettings,
          privacySettingsForStatusMessages: Lang.privacySettingsForStatusMessages,
          notifyMyUpdatesTo: Lang.notifyMyUpdatesTo,
          privacyEveryOne: Lang.privacyEveryOne,
          privacyFollow: Lang.privacyFollow,
          privacyNone: Lang.privacyNone,
          EVERYONE: Util.commonUtil.globalConstants.USER_PRIVACY_SETTINGS[0],
          FOLLOW: Util.commonUtil.globalConstants.USER_PRIVACY_SETTINGS[1],
          NONE: Util.commonUtil.globalConstants.USER_PRIVACY_SETTINGS[2],
          CONTENT_PRIVACY: Util.commonUtil.globalConstants.CONTENT_PRIVACY,
          STATUS_PRIVACY: Util.commonUtil.globalConstants.STATUS_PRIVACY
        }
      };
    },
    events: {
      "click .esoc_setting_edit_field ": "updateSetting"
    },
    behaviors: {
      PerfectScrolling: {
        behaviorClass: PerfectScrollingBehavior,
        suppressScrollX: true,
        contentParent: ".esoc-settings-tab-content",
        scrollYMarginOffset: 15 // like bottom padding of container, otherwise scrollbar is shown always
      }
    },
    initialize: function (options) {
      this.options = options;
      this.editSettingUrl = Url.combine(
          this.util.commonUtil.getV2Url(this.options.connector.connection.url),
          this.util.commonUtil.REST_URLS.pulseRestUrl, this.model.attributes.userid);
    },
    constructor: function SettingsView(options) {
      options = options || {};
      var settingsOptions = _.extend({}, options);
      settingsOptions.model = new SettingsModel(settingsOptions);
      settingsOptions.model.fetch({async: false});
      Marionette.ItemView.prototype.constructor.call(this, settingsOptions);
    },
    onDomRefresh: function () {
      this.trigger("view:shown", this);
    },
    errorHandle: function (model, response) {
    },
    updateSetting: function (e) {
      var setting      = $(e.target).val(),
          setting_type = $(e.target).attr("name"),
          formData     = new FormData();
      formData.append(this.util.commonUtil.globalConstants.ACTION,
          this.util.commonUtil.globalConstants.UPDATE_SETTINGS_ACTION);
      if (setting_type === this.util.commonUtil.globalConstants.CONTENT_PRIVACY ||
          setting_type === this.util.commonUtil.globalConstants.STATUS_PRIVACY) {
        formData.append(setting_type, setting);
      } else {
        $(e.target).is(":checked") ? formData.append(setting, "on") :
        formData.append(setting, "off");
      }
      var args = {
        "itemview": this,
        "url": this.editSettingUrl,
        "type": "POST",
        "data": formData,
        "requestType": "updateSettings",
        "targetElement": $(e.target)
      };
      this.util.updateAjaxCall(args);
      $(e.target).prop('disabled', true);
      this.util.commonUtil.updateSelection(e, this, setting_type);
    }
  });
  return SettingsView;
});

csui.define('esoc/widgets/userwidget/model/view.simple.user.form',['csui/lib/underscore', 'csui/utils/url', 'csui/models/form', 'csui/lib/moment',
  'csui/models/mixins/resource/resource.mixin','esoc/widgets/userwidget/util'
], function (_, Url, FormModel, moment, ResourceMixin, Util) {
  'use strict';

  var ViewSimpleUserFormModel = FormModel.extend({
    util: Util,
    constructor: function ViewSimpleUserFormModel(attributes, options) {
      FormModel.prototype.constructor.apply(this, arguments);

      this.makeResource(options);
    },

    clone: function () {
      return new this.constructor(this.attributes, {
        connector: this.connector
      });
    },

    url: function () {
      var url = Url.combine(this.connector.connection.url, 'forms', 'users', this.attributes.userId,
          'view');

      return url;
    },

    parse: function (response) {
      var form = !!response.forms && response.forms[0];
      return form;
    }

  });

  ResourceMixin.mixin(ViewSimpleUserFormModel.prototype);

  return ViewSimpleUserFormModel;

});


/* START_TEMPLATE */
csui.define('hbs!esoc/controls/form/view.simple.user.info/impl/view.simple.user.form',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"binf-row\">\r\n  <div class=\"esoc-simple-user-widget-form binf-col-md-12 binf-col-sm-12\r\n  binf-col-lg-12\r\n  binf-col-xs-12\">\r\n    <div id=\"metadata-pane-left-{{options.cid}}\" class=\"cs-form-singlecolumn\">\r\n      <div id=\"reportsToID-{{options.cid}}\" class=\"esoc-simple-user-widget-manager\"></div>\r\n      <div id=\"OfficeLocation-{{options.cid}}\"\r\n           class=\"esoc-simple-user-widget-office-location\"></div>\r\n      <div id=\"MailAddress-{{options.cid}}\" class=\"esoc-simple-user-widget-email\"></div>\r\n      <div id=\"Contact-{{options.cid}}\" class=\"esoc-simple-user-widget-phone\"></div>\r\n      <div id=\"CellularPhone-{{options.cid}}\" class=\"esoc-simple-user-widget-mobile\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n";
}});
Handlebars.registerPartial('esoc_controls_form_view.simple.user.info_impl_view.simple.user.form', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/controls/form/view.simple.user.info/view.simple.user.form',[
  'csui/lib/underscore',
  'csui/lib/jquery',
  'csui/controls/form/form.view',
  'esoc/widgets/userwidget/util',
  'hbs!esoc/controls/form/view.simple.user.info/impl/view.simple.user.form'
], function (_, $, FormView, Util, formTemplate) {
  'use strict';

  var ViewSimpleUserForm = FormView.extend({

    className: 'cs-form esoc-simple-user-widget-view-form',
    formTemplate: formTemplate,
    util: Util,
    formTemplateHelpers: function () {
      return {
        cid: this.model.cid
      };
    },

    constructor: function ViewSimpleUserForm(options) {
      FormView.prototype.constructor.call(this, options);
      this.listenTo(this, 'change:field', this._saveField);
      this.onWinResize = _.bind(this.windowResize, this);
      $(window).on("resize.app", this.onWinResize);
      this.originalHeight = 0;
    },
    windowResize: function () {
      this.formHeight();
      this.triggerMethod('dom:refresh');
    },
    formHeight: function () {
      if (this.originalHeight === 0) {
        this.originalHeight = $(
            '.esoc-simple-user-widget-body .tab-links > .esoc-simple-user-widget-form-body').length >
                              0 ? $('.esoc-simple-user-widget-form-content').height() + 52 :
                              $('.esoc-simple-user-widget-body').height();
      }
      //Added extra 2px to height, because top and bottom borders of popover had 1px
      $('.esoc-simple-user-widget-dialog .binf-modal-content').css('height',
          ( this.originalHeight + $('.esoc-simple-user-widget-header').height() +
            $('.esoc-simple-user-widget-dialog .esoc-simple-user-widget-footer').height() + 2));
      $('.esoc-simple-user-widget-body').css('height',
          ( $('.esoc-simple-user-widget-dialog .binf-modal-content').height() - $('.esoc-simple-user-widget-header').height() -
            $('.esoc-simple-user-widget-dialog .esoc-simple-user-widget-footer').height()));
      if ($('.esoc-simple-user-widget-body .tab-links > .esoc-simple-user-widget-form-body').length > 0) {
        $('.esoc-simple-user-widget-form-body').css('height', $('.esoc-simple-user-widget-body').height() - 48);
      }
      $('.esoc-simple-user-widget-dialog .esoc-simple-user-widget-footer').css('display', 'block');
      this.options.orginatingView.triggerMethod('update:scrollbar');
    },
    onRenderForm: function () {
      this.formHeight();
      this.handleManagerAttributes();
      this.options.orginatingView.trigger("view:shown");
    },
    _getLayout: function () {
      var template = this.getOption('formTemplate'),
          html     = template.call(this, {
            data: this.alpaca.data,
            mode: this.mode
          }),
          bindings = this._getBindings(),
          view     = {
            parent: 'bootstrap-csui',
            layout: {
              template: html,
              bindings: bindings
            }
          };
      return view;
    },
    _getBindings: function () {
      var bindings = {
        reportsToID: _.str.sformat('reportsToID-{0}', this.model.cid),
        OfficeLocation: _.str.sformat('OfficeLocation-{0}', this.model.cid),
        MailAddress: _.str.sformat('MailAddress-{0}', this.model.cid),
        Contact: _.str.sformat('Contact-{0}', this.model.cid),
        CellularPhone: _.str.sformat('CellularPhone-{0}', this.model.cid)
      };
      return bindings;
    },
    _saveField: function (args) {
      var formData  = new FormData(),
          newValue  = args.value ? args.value : '',
          connector = this.model.connector;
      if (args.name == 'reportsToID') {
        formData.append(this.util.commonUtil.globalConstants.ACTION,
            this.util.commonUtil.globalConstants.UPDATE_EXTENDED_INFO);
        formData.append("reportsTo", newValue);

        var ajaxParams = {
          "itemview": this,
          "url": this.util.commonUtil.getV2Url(connector.connection.url) +
                 this.util.commonUtil.REST_URLS.pulseRestUrl +
                 args.model.attributes.userId,
          "type": "PUT",
          "data": formData,
          connector: connector
        };
      }
      else {
        switch (args.name) {
        case 'OfficeLocation':
          formData.append("office_location", newValue);
          break;
        case 'MailAddress':
          formData.append("business_email", newValue);
          break;
        case 'Contact':
          formData.append("business_phone", newValue);
          break;
        case 'CellularPhone':
          formData.append("cell_phone", newValue);
          break;
        }

        var ajaxParams = {
          "itemview": this,
          "url": this.util.commonUtil.getV2Url(connector.connection.url) +
                 "/members/" +
                 args.model.attributes.userId,
          "type": "PUT",
          "data": formData,
          connector: connector
        };
      }
      this.util.updateAjaxCall(ajaxParams);
      this.handleManagerAttributes();
    },
    handleManagerAttributes: function () {
      this.$el.find(".cs-field-read-inner button").attr("tabindex", "0");
      this.$el.find(".esoc-user-container").on("keypress", function (e) {
        e.stopPropagation();
      });
    }

  });

  return ViewSimpleUserForm;

});





/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/simple.userwidget.form.view',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    return "<div class=\"esoc-simple-user-widget-form-view\">\r\n  <div class=\"esoc-simple-user-widget-form-content\"></div>\r\n</div>";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_simple.userwidget.form.view', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/userwidget/view/simple.userwidget.form.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/controls/tile/behaviors/perfect.scrolling.behavior',
  'esoc/widgets/userwidget/model/view.simple.user.form',
  'esoc/controls/form/view.simple.user.info/view.simple.user.form',
  'hbs!esoc/widgets/userwidget/impl/simple.userwidget.form.view',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function ($, _, Backbone, Handlebars, Marionette, PerfectScrollingBehavior, ViewSimpleUserFormModel,
    ViewSimpleUserFormView, SimpleUserWidgetFormViewTemplate) {

  var SimpleUserWidgetFormView = Marionette.ItemView.extend({
    className: 'esoc-simple-user-widget-profile-view',
    template: SimpleUserWidgetFormViewTemplate,
    behaviors: {
      PerfectScrolling: {
        behaviorClass: PerfectScrollingBehavior,
        suppressScrollX: true,
        contentParent: ".esoc-simple-user-widget-form-view",
        scrollYMarginOffset: 15 // like bottom padding of container, otherwise scrollbar is shown always
      }
    },
    constructor: function SimpleUserWidgetFormView(options) {
      options = options || {};

      Marionette.ItemView.prototype.constructor.call(this, options);
      var form = new ViewSimpleUserFormModel({userId: this.options.userwidgetmodel.attributes.id}, {connector: this.options.connector}),
          that = this;
      form.fetch().done(function () {
        that.formView = new ViewSimpleUserFormView({
          context: that.options.context,
          orginatingView: that,
          model: form
        });
        that.render();
      });
    },
    onRender: function () {
      if (!!this.formView) {
        var formViewRegion = new Marionette.Region({el: this.$el.find('.esoc-simple-user-widget-form-content')});
        formViewRegion.show(this.formView);
      }
    }

  });
  return SimpleUserWidgetFormView;
});

csui.define('esoc/widgets/userwidget/userprofile',['module',
      'require',
      'csui/lib/jquery',
      'csui/lib/underscore',
      'csui/lib/marionette',
      'i18n!esoc/widgets/userwidget/nls/lang',
      'esoc/widgets/userwidget/view/general.view',
      'esoc/widgets/userwidget/view/personal.view',
      'esoc/widgets/userwidget/view/relations.view',
      'esoc/widgets/userwidget/view/settings.view',
      'esoc/widgets/activityfeedwidget/activityfeedwithfilter.view',
      'csui/behaviors/keyboard.navigation/tabable.region.behavior',
      'esoc/widgets/userwidget/view/simple.userwidget.form.view',
      'csui-ext!esoc/widgets/userprofile/tab.extension',
      "esoc/widgets/common/util"],
    function (module, _require, $, _, Marionette, Lang, GeneralView, PersonalView,
        RelationsView, SettingsView, ActivityFeedContent, TabableRegionBehavior, SimpleUserWidgetFormView, extraTabs,
        CommonUtil) {
      var viewInstance;
      var UserProfile = {
        userProfileTabViewMapping: {
          "esoc-user-profile-general-tab": GeneralView,
          "esoc-user-profile-personal-tab": PersonalView,
          "esoc-user-profile-activity-tab": ActivityFeedContent,
          "esoc-user-profile-following-tab": RelationsView,
          "esoc-user-profile-followers-tab": RelationsView,
          "esoc-user-profile-settings-tab": SettingsView
        },

        showTab: function (selectedTabId, regionId, options, view) {
          this.uniqueId = _.uniqueId();
          var activityFeedOptions,
              contentRegion = new Marionette.Region({
                el: view.$el.find("#" + regionId)
              }), self      = this;
          if (selectedTabId === "esoc-user-profile-following-tab") {
            options.selectedtab = CommonUtil.globalConstants.FRIENDS;
          } else if (selectedTabId === "esoc-user-profile-followers-tab") {
            options.selectedtab = CommonUtil.globalConstants.FOLLOWERS
          }
          if (!!viewInstance && $("esoc-simple-user-profile-tab-" + options.uniqueId).length > 0) {
            viewInstance.destroy();
          }
          if (selectedTabId === "esoc-user-profile-activity-tab") {
            var ActivityFeedContent = _require(
                    'esoc/widgets/activityfeedwidget/activityfeedwithfilter.view');
            activityFeedOptions = {
              "context": options.context,
              "otherUser": options.model.attributes.otherUser,
              "hideupdatesfrom": true,
              "hideExpandIcon": true,
              feedSettings: {
                "enableFilters": true
              },
              "updatesfrom": {
                "from": "user",
                "id": options.model.attributes.userid
              },
              "filterSource": "userprofile",
              "userActivity": true,
              "showCommentIcon": true,
              "origin": "userwidget",
              "userProfileView": view
            };
            viewInstance = new ActivityFeedContent(activityFeedOptions);
          } else {
            var viewOptions = _.extend({}, options);
            viewOptions.userwidgetmodel = options.model;
            delete viewOptions["model"];
            this.userProfileTabViewMapping["esoc-simple-user-profile-tab-" + options.uniqueId]= SimpleUserWidgetFormView;
            viewInstance = new this.userProfileTabViewMapping[selectedTabId](viewOptions);
          }
          viewInstance.on("relationsview.show.user.dialog", function (e) {
            view.trigger('userprofileview.show.user.dialog', e);
          });
          var selectorString = "a[href],input[type!='radio'],input[type='radio']:checked,textarea,*[tabindex] *[data-cstabindex],button";
          view.on("view:shown", function () {
            var profileImg = view.$el.find("img.esoc-full-profile-avatar-cursor");
            if (profileImg.attr("src") !== "#") {
              profileImg.attr("tabindex", "0").attr(
                  "data-cstabindex", "0");
            } else {
              view.$el.find("span.esoc-full-profile-avatar-cursor").attr("tabindex", "0").attr(
                  "data-cstabindex", "0");
            }
            view.setTabIndexForNonTabs && view.setTabIndexForNonTabs();
            view.trigger("dom:refresh");
            if (view.options.viewShown) {
              self.setTabbing(view, selectorString, selectedTabId);
              view.options.tabClicked = true;
            } else {
              view.options.viewShown = true;
            }
          });
          viewInstance.on("view:shown", function (eventName) {
            if (view.options.viewShown) {
              self.setTabbing(view, selectorString, selectedTabId, eventName);
              view.options.tabClicked = true;
            } else {
              view.options.viewShown = true;
            }
          });
          contentRegion.show(viewInstance);
          if (selectedTabId === "esoc-user-profile-activity-tab") {
            options.context._factories[activityFeedOptions.collection.widgetOptions.activityfeed.widgetId].fetch(
                activityFeedOptions).done(function () {
              viewInstance.trigger("view:shown");
            });
          }
        },

        setTabbing: function (view, selectorString, selectedTabId, eventName) {
          var self = this;
          if (selectedTabId !== "esoc-user-profile-activity-tab") {
            self.setTabIndexForViewElements(view);
            self.setTabIndexForViewInstanceElements(viewInstance, selectorString);
          }
          $(".esoc-user-widget-dialog-back").attr("tabindex", "0").attr("data-cstabindex", "0");
          view.$el.find("[data-cstabindex=0]").filter(
              ":not(a:empty)").on("focus", function (event) {
            self.addTabableClass(view, event);
          });
          if (view.options.tabClicked && eventName !== "contentChanged") {
             viewInstance.$el.find("[data-cstabindex=0]").filter(":visible").filter(":not(a:empty)").first().trigger("focus");
          }
        },

        setTabIndexForViewElements: function(view) {
          view.setTabIndexForTabs && view.setTabIndexForTabs();
        },

        addTabableClass: function(view,event) {
          var target = $(event.target);
          view.options.focusedElement && view.options.focusedElement.removeClass(
              TabableRegionBehavior.accessibilityActiveElementClass);
          target.addClass(TabableRegionBehavior.accessibilityActiveElementClass);
          view.options.focusedElement = target;
        },

        setTabIndexForViewInstanceElements: function (viewInstance, selectorString) {
          viewInstance.$el.find(selectorString).attr("tabindex", "0").attr(
              "data-cstabindex", "0");
        }
      };
      if (extraTabs) {
        extraTabs = _.flatten(extraTabs, true);
        _.each(extraTabs, function (tab) {
          var str = "esoc-user-profile-" + tab.tabName + "-tab";
          UserProfile.userProfileTabViewMapping[str] = tab.tabContentView;
        });
      }
      return UserProfile;
    });


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/userprofile',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "\r\n      esoc-full-profile-avatar-cursor ";
},"3":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.program(6, data, 0)})) != null ? stack1 : "");
},"4":function(depth0,helpers,partials,data) {
    return "          <a href=\"javascript:void(0);\">\r\n            <div id=\"esoc-userprofile-chat-action\" class=\"esoc-user-profile-chat-action\"></div>\r\n          </a>\r\n          <a href=\"javascript:void(0);\" class=\"esoc-userprofile-following-action\">\r\n          </a>\r\n";
},"6":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.enableUploadProfilePicture : stack1),{"name":"if","hash":{},"fn":this.program(7, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return "            <a href=\"javascript:void(0);\" class=\"esoc-update-profilepic\"\r\n               title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.updatePic : stack1), depth0))
    + "\">\r\n              <div class=\"esoc-userprofile-actions-name\">\r\n                "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.updatePic : stack1), depth0))
    + "\r\n              </div>\r\n            </a>\r\n            <input type=\"file\" id=\"esoc-profilepic-desktop-attachment\" name=\"updateProfilePic\"\r\n                   accept=\"image/*\" style=\"display:none\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.updatePic : stack1), depth0))
    + "\"/>\r\n";
},"9":function(depth0,helpers,partials,data) {
    var stack1;

  return "        <li role=\"presentation\" class=\"esoc-user-profile-tab\" id=\"esoc-user-profile-personal-tab\">\r\n          <a href=\"#tab3\" data-binf-toggle=\"tab\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.personal : stack1), depth0))
    + "</a>\r\n        </li>\r\n";
},"11":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers.unless.call(depth0,(depth0 != null ? depth0.hideFollowing : depth0),{"name":"unless","hash":{},"fn":this.program(12, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers.unless.call(depth0,(depth0 != null ? depth0.hideFollowers : depth0),{"name":"unless","hash":{},"fn":this.program(14, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"12":function(depth0,helpers,partials,data) {
    var stack1;

  return "				<li role=\"presentation\" class=\"esoc-user-profile-tab esoc-user-pulse-enabled-tabs\"\r\n				  id=\"esoc-user-profile-following-tab\">\r\n					<a href=\"#tab4\" data-binf-toggle=\"tab\" class=\"esoc-user-following-tab-label\"\r\n					   title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followingCount : stack1), depth0))
    + ">\r\n					  <span class=\"esoc-user-following-tab-label\"\r\n							title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followingCount : stack1), depth0))
    + ">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.following : stack1), depth0))
    + "</span>\r\n					  <span class=\"esoc-user-following-count esoc-user-following-tab-label\"\r\n							title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followingCount : stack1), depth0))
    + "></span>\r\n					</a>\r\n				</li>\r\n";
},"14":function(depth0,helpers,partials,data) {
    var stack1;

  return "				<li role=\"presentation\" class=\"esoc-user-profile-tab esoc-user-pulse-enabled-tabs\"\r\n				  id=\"esoc-user-profile-followers-tab\">\r\n					<a href=\"#tab5\" data-binf-toggle=\"tab\" class=\"esoc-user-followers-tab-label\"\r\n					   title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followersCount : stack1), depth0))
    + ">\r\n					  <span class=\"esoc-user-followers-tab-label\"\r\n							title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followersCount : stack1), depth0))
    + ">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followers : stack1), depth0))
    + "</span>\r\n					  <span class=\"esoc-user-followers-count esoc-user-followers-tab-label\"\r\n							title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.followersCount : stack1), depth0))
    + "></span>\r\n					</a>\r\n				</li>\r\n";
},"16":function(depth0,helpers,partials,data) {
    var stack1;

  return "			<li role=\"presentation\" class=\"esoc-user-profile-tab esoc-user-pulse-enabled-tabs\"\r\n				id=\"esoc-user-profile-activity-tab\">\r\n			  <a href=\"#tab6\" data-binf-toggle=\"tab\" class=\"esoc-user-activity-tab-label\"\r\n				 title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.activity : stack1), depth0))
    + ">\r\n				<span class=\"esoc-user-activity-tab-label\"\r\n					  title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.activity : stack1), depth0))
    + ">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.activity : stack1), depth0))
    + "</span></a>\r\n			</li>\r\n";
},"18":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers.unless.call(depth0,(depth0 != null ? depth0.hideSettings : depth0),{"name":"unless","hash":{},"fn":this.program(19, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"19":function(depth0,helpers,partials,data) {
    var stack1;

  return "				<li role=\"presentation\" class=\"esoc-user-profile-tab esoc-user-pulse-enabled-tabs\"\r\n				  id=\"esoc-user-profile-settings-tab\">\r\n					<a href=\"#tab7\" data-binf-toggle=\"tab\" class=\"esoc-user-settings-tab-label\"\r\n					   title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.settings : stack1), depth0))
    + ">\r\n					  <span class=\"esoc-user-settings-tab-label\" title= "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.settings : stack1), depth0))
    + ">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.settings : stack1), depth0))
    + "</span></a>\r\n				</li>\r\n";
},"21":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers.blockHelperMissing.call(depth0,this.lambda(depth0, depth0),{"name":"this","hash":{},"fn":this.program(22, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"22":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.show : depth0),{"name":"if","hash":{},"fn":this.program(23, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"23":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "            <li role=\"presentation\" class=\"esoc-user-profile-tab\"\r\n                id=\"esoc-user-profile-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-tab\">\r\n              <a href=\"#"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "\" data-binf-toggle=\"tab\"\r\n                 class=\"esoc-user-profile-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-tab-label\" title= "
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + ">\r\n              <span class=\"esoc-user-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-tab-label esoc-user-profile-tab-label\"\r\n                    title=\""
    + this.escapeExpression(((helper = (helper = helpers.tabDisplayName || (depth0 != null ? depth0.tabDisplayName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabDisplayName","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.tabDisplayName || (depth0 != null ? depth0.tabDisplayName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabDisplayName","hash":{}}) : helper)))
    + "</span>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.tabCount : depth0),{"name":"if","hash":{},"fn":this.program(24, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "              </a>\r\n            </li>\r\n";
},"24":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "                  <span class=\"esoc-user-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-count\r\n              esoc-user-profile-tab-count esoc-user-profile-tab-label\"\r\n                        title= \""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.tabCount : depth0)) != null ? stack1.count : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.tabCount : depth0)) != null ? stack1.count : stack1), depth0))
    + "</span>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12  esoc-nopadding-right\">\r\n  <div class=\"esoc-userprofile-actions\">\r\n    <div class=\"esoc-userprofile-pic-actions\">\r\n      <span class=\""
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"!this.messages.isOtherUser && this.messages.enableUploadProfilePicture",{"name":"xif","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n      image_user_placeholder esoc-userprofile-default-avatar esoc-full-profile-avatar-update\r\n    esoc-user-default-avatar-"
    + this.escapeExpression(((helper = (helper = helpers.userid || (depth0 != null ? depth0.userid : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"userid","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.displayname : stack1), depth0))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n      <img class=\""
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"!this.messages.isOtherUser && this.messages.enableUploadProfilePicture",{"name":"xif","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + " esoc-full-profile-avatar\r\n    esoc-full-profile-avatar-update binf-img-circle esoc-image\r\n    esoc-upload-image-style\r\n    esoc-userprofile-img-"
    + this.escapeExpression(((helper = (helper = helpers.userid || (depth0 != null ? depth0.userid : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"userid","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.displayname : stack1), depth0))
    + "\"\r\n           alt=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.display_name : stack1), depth0))
    + "\" src=\"#\"/>\r\n    </div>\r\n    <div class=\"esoc-profile-img-load-container esoc-social-progress-style\">\r\n      <div class=\"esoc-profile-img-outer-border\">\r\n        <div class=\"esoc-profile-img-loader\">\r\n          <div class=\"esoc-profile-img-inner-border\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"esoc-userprofile-action-names\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.deleted : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(3, data, 0)})) != null ? stack1 : "")
    + "    </div>\r\n  </div>\r\n  <a href=\"javascript:void(0);\" id=\"esoc-user-focus-element\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.updatePic : stack1), depth0))
    + "\"></a>\r\n\r\n  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 tab-links esoc-profile-tabs\r\n  esoc-nopadding-right\">\r\n    <div class=\"tab-links-bar\">\r\n      <div class=\"left-toolbar\"></div>\r\n      <ul class='binf-nav binf-nav-pills esoc-user-profile-tabcontainer'>\r\n        <li role=\"presentation\" class=\"esoc-user-profile-tab binf-active\"\r\n            id=\"esoc-user-profile-general-tab\">\r\n          <a href=\"#tab1\" data-binf-toggle=\"tab\" class=\"esoc-user-general-tab-label\"\r\n             title="
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.general : stack1), depth0))
    + ">\r\n          <span class=\"esoc-user-general-tab-label\"\r\n                title="
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.general : stack1), depth0))
    + ">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.general : stack1), depth0))
    + "</span></a>\r\n        </li>\r\n        <!--\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(9, data, 0)})) != null ? stack1 : "")
    + "      //-->\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.deleted : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(11, data, 0)})) != null ? stack1 : "")
    + ((stack1 = helpers.unless.call(depth0,(depth0 != null ? depth0.hideActivity : depth0),{"name":"unless","hash":{},"fn":this.program(16, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(18, data, 0)})) != null ? stack1 : "")
    + ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.extraTabs : depth0),{"name":"each","hash":{},"fn":this.program(21, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "      </ul>\r\n      <div class=\"right-toolbar\"></div>\r\n      <div id=\"esoc-user-profile-tab-content\"\r\n           class=\"esoc-user-profile-tab-content binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_userprofile', t);
return t;
});
/* END_TEMPLATE */
;

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/customchatbtn',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var helper;

  return "<a class='esoc-social-chat-control' title='"
    + this.escapeExpression(((helper = (helper = helpers.labeltext || (depth0 != null ? depth0.labeltext : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"labeltext","hash":{}}) : helper)))
    + "'> "
    + this.escapeExpression(((helper = (helper = helpers.chat || (depth0 != null ? depth0.chat : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"chat","hash":{}}) : helper)))
    + " </a>";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_customchatbtn', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/userwidget/view/userprofile.view',[
  'module',
  'require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/url', 'csui/controls/tab.panel/tab.links.ext.scroll.mixin',
  'csui/behaviors/keyboard.navigation/tabables.behavior',
  'csui/behaviors/keyboard.navigation/tabable.region.behavior',
  'csui/controls/mixins/layoutview.events.propagation/layoutview.events.propagation.mixin',
  'csui/utils/user.avatar.color',
  'esoc/widgets/userwidget/userprofile',
  'esoc/widgets/userwidget/util',
  'esoc/widgets/utils/chat/chat.view',
  'csui-ext!esoc/widgets/userprofile/tab.extension',
  'hbs!esoc/widgets/userwidget/impl/userprofile',
  'hbs!esoc/widgets/userwidget/impl/customchatbtn',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function (module, require, $, _, Handlebars, Marionette, Url, TabLinksScrollMixin, TabablesBehavior,
    TabableRegionBehavior, LayoutViewEventsPropagationMixin, UserAvatarColor, UserProfile, Util, ChatView, extraTabs,
    UserProfileTemplate, CustomChatBtnTemplate, lang) {
  // added module config (ESOC-7097)
  var config = module.config();
  
  var self = null;
  var UserProfileTabContentCollectionView, UserProfileTabPanelView, UserProfileTabLinkCollectionView;
  var loadItems = function () {
    var deferred = $.Deferred();
    if (!!UserProfileTabContentCollectionView && !!UserProfileTabPanelView &&
        !!UserProfileTabLinkCollectionView) {
      deferred.resolve();
    } else {
      csui.require(['csui/controls/tab.panel/tab.panel.view',
            'csui/controls/tab.panel/impl/tab.contents.view',
            'csui/controls/tab.panel/impl/tab.links.view'],
          function (TabPanelView, TabContentCollectionView,
              TabLinkCollectionView) {
            UserProfileTabContentCollectionView = TabContentCollectionView.extend({
              className: 'esoc-userprofile-widget',
              constructor: function UserProfileTabContentCollectionView(options) {
                options || (options = {});
                _.defaults(options, {
                  toolbar: true,
                  searchTabContentForTabableElements: true
                });
                TabContentCollectionView.prototype.constructor.apply(this, arguments);
              }
            });
            UserProfileTabPanelView = TabPanelView.extend({
              className: 'esoc-userprofile-widget',
              constructor: function UserProfileTabPanelView(options) {
                options || (options = {});
                _.defaults(options, {
                  toolbar: true,
                  searchTabContentForTabableElements: true
                });
                TabPanelView.prototype.constructor.apply(this, arguments);

              },
              behaviors: {
                TabableRegionBehavior: {
                  behaviorClass: TabableRegionBehavior
                }
              },
              currentlyFocusedElement: function (event) {
                var element = this.options.focusedElement;
                if (!event || !event.shiftKey) {
                  return this.$el.find("[data-cstabindex=0]")[0];
                } else if (element && $(element).length) {
                  return element;
                }
              },
              onLastTabElement: function (shiftTab) {
                var tabItems = this.$('[data-cstabindex=0]').filter(":visible"),
                    lastItem = tabItems.length - 1;
                if (tabItems.length) {
                  var focusElement = shiftTab ? tabItems[0] : tabItems[lastItem];
                  return $(focusElement).hasClass(TabableRegionBehavior.accessibilityActiveElementClass);
                }
                return true;
              }
            });
            UserProfileTabLinkCollectionView = TabLinkCollectionView.extend({
              className: 'esoc-userprofile-widget',
              constructor: function UserProfileTabLinkCollectionView(options) {
                options || (options = {});
                _.defaults(options, {
                  toolbar: true,
                  searchTabContentForTabableElements: true
                });
                TabLinkCollectionView.prototype.constructor.apply(this, arguments);
              }
            });
            deferred.resolve();
          }, deferred.reject);
    }
    return deferred.promise();
  };

  var UserProfileView = Marionette.ItemView.extend({
    className: 'esoc-userprofile-widget',
    template: UserProfileTemplate,
    util: Util,
    templateHelpers: function () {
	/*
	  ESOC-7097: Tabs can be hidden via require configuration
	   csui.require.config({
		config: {
		  'esoc/widgets/userwidget/view/userprofile.view': {
			hideFollowing: true,
			hideFollowers: true,
			hideActivity: true
			hideSettings: true
		  }
		}
	  });
	  }
	 */		 
	  return {
		hideFollowing: config.hideFollowing,
        hideFollowers: config.hideFollowers,
        hideActivity: config.hideActivity,
        hideSettings: config.hideSettings,
		
        extraTabs: this.getExtraTabs(extraTabs),
        messages: {
          general: lang.general,
          extended: lang.extended,
          personal: lang.personal,
          following: lang.following,
          followers: lang.followers,
          activity: lang.activity,
          settings: lang.settings,
          unfollow: lang.unfollow,
          follow: lang.follow,
          updatePic: lang.updatePic,
          displayname: !!this.model.attributes.display_name ? this.model.attributes.display_name :
                       this.options.display_name,
          enableUploadProfilePicture: !!this.options.enableUploadProfilePicture,
          isOtherUser: !!this.model.attributes.otherUser
        }
      };
    },
    behaviors: {
      TabableRegionBehavior: {
        behaviorClass: TabableRegionBehavior
      }
    },
    initialize: function (options) {
      this.options = options;
      self = this;
      var userId = !!this.model.id ? this.model.id : this.options.userid;
      self.userProfileFollowingUrl = Url.combine(
          this.util.commonUtil.getV2Url(this.options.connector.connection.url),
          this.util.commonUtil.REST_URLS.pulseRestUrl, userId);
      self.userPulseInfoUrl = Url.combine(
          self.util.commonUtil.getV2Url(self.options.connector.connection.url),
          self.util.commonUtil.REST_URLS.pulseRestUrl,
          userId);
      $(window).on('popstate hashchange', this.util.closeUserWidgetDialog);
      this.listenTo(this.util.commonUtil.globalConstants.event_bus, "updateuserfollowingstatus",
          function (miniprofileview, response) {
            if (!this.model.attributes.otherUser) {
              /* change the count in the following/followers tab for a self user when following
              user not present in the collection */
              this.util.changeRelationsCounts(response.data.user);
            }
            else {
              if (miniprofileview.model.attributes.id === this.model.attributes.id) {
                this.model.attributes.following = miniprofileview.model.attributes.following;
                if (miniprofileview.model.attributes.following) {
                  $(".esoc-userprofile-following-action").html(lang.unfollow);
                  $(".esoc-userprofile-following-action").attr('title', lang.unfollow);
                } else {
                  $(".esoc-userprofile-following-action").html(lang.follow);
                  $(".esoc-userprofile-following-action").attr('title', lang.follow);
                }
                var ajaxParams = {
                  "itemview": self,
                  "url": self.userPulseInfoUrl,
                  "type": "GET",
                  "requestType": "pulseInfo"
                };
                self.util.updateAjaxCall(ajaxParams);
              }
            }
          });
    },
    events: {
      'click .esoc-user-profile-tab': 'showTab',
      'click .esoc-userprofile-following-action': 'followUnFollowAction',
      'click .esoc-update-profilepic': 'updateProfilePicAction',
      'touchend .esoc-update-profilepic': 'updateProfilePicAction',
      'click .esoc-full-profile-avatar-update': 'updateProfilePicAction',
      'keydown .esoc-full-profile-avatar-update': 'updateProfilePicAction',
      'touchend .esoc-full-profile-avatar-update': 'updateProfilePicAction'
    },
    constructor: function UserProfileView(options) {
      options = options || {};
      _.defaults(options, {
        toolbar: true,
        tabClickedOnce: false,
        initialActivationWeight: 0
      });
      this.options = options;
      this.listenToOnce(this, 'before:hide', TabablesBehavior.popTabableHandler);
      Marionette.ItemView.prototype.constructor.call(this, options);
      $(window).on('resize', _.bind(this._onWindowResize, this));
    },
    errorHandle: function (model, response) {
    },
    onDestroy: function () {
      var element = this.options.targetEle;
      if (element && $(element).is(':visible')) {
        $(element).trigger('focus');
      } else if (!element) {
        element = $('.nav-profile');
        if (element && element.length) {
          $(element).trigger('focus');
        }
      }
      $(window).off('resize', this._onWindowResize);
    },
    _onWindowResize: function () {
      if (this.resizeTimer) {
        clearTimeout(this.resizeTimer);
      }
      this.resizeTimer = setTimeout(_.bind(function () {
        this._enableToolbarState();
      }, this), 200);
    },
    // private
    _initializeOthers: function () {
      var options = {
        gotoPreviousTooltip: lang.previous,
        gotoNextTooltip: lang.next
      };
      this._initializeToolbars(options);
      this._listenToTabEvent();

      // delay this a bit since the initial dialog fade in makes the tab to be hidden
      setTimeout(_.bind(this._enableToolbarState, this), 300);
    },
    onRender: function (e) {
      var that = this;
      that.options.userbackgroundcolor = UserAvatarColor.getUserAvatarColor(this.model.attributes);
      loadItems().done(function () {
        that.propagateEventsToRegions();
        var UserProfileTabPanelViewClass = new UserProfileTabPanelView(_.extend(that));
        UserProfileTabPanelViewClass.tabLinks = new UserProfileTabLinkCollectionView(_.extend(
            that));
        UserProfileTabPanelViewClass.tabContent = new UserProfileTabContentCollectionView(_.extend(
            that));
        UserProfileTabPanelViewClass.options = that.options;
        $.extend(that, UserProfileTabPanelViewClass);
        that.on("userprofileview.show.user.dialog", function (e) {
          that.options.userWidgetView.trigger('userwidgetview.show.user.dialog', e);
        });
        that._initializeOthers();
      });
    },

    tabItemsFocus: function (event) {
      this.options.focusedElement && this.options.focusedElement.removeClass(
          TabableRegionBehavior.accessibilityActiveElementClass);
      var target = $(event.target);
      target.addClass(TabableRegionBehavior.accessibilityActiveElementClass);
      this.options.focusedElement = target;
      if (target.attr("type") === "radio") {
        target[0].checked = true;
      }
    },

    setTabIndexForTabs: function () {
      this.$el.find("a[href][title],*[tabindex] *[data-cstabindex]").filter(":visible").filter(
          ":not(a:empty)").attr("tabindex", "0").attr(
          "data-cstabindex", "0");
    },

    onAfterShow: function (e) {
      var self = this;
      this._initializeOthers();
      this.$el.find("#esoc-user-profile-general-tab").trigger('click');
      var userId                = !!this.model.id ? this.model.id : this.options.userid,
          userProfilePicOptions = {
            userid: userId,
            context: self.options.context,
            photoElement: self.$el.find(".esoc-userprofile-img-" + Util.escapeSelector(userId)),
            defaultPhotElement: self.$el.find(".esoc-user-default-avatar-" + Util.escapeSelector(userId)),
            userbackgroundcolor: this.options.userbackgroundcolor,
            parentView: this,
            viewShownEvent: true
          }
      self.util.commonUtil.setProfilePic(userProfilePicOptions);
      self.util.commonUtil.setUserColor(userProfilePicOptions); 
      if (this.options.model.attributes.otherUser && !this.options.model.attributes.deleted &&
          !!this.options.model.attributes.chatSettings &&
          !!this.options.model.attributes.chatSettings.chatEnabled) {
        var contentparams = {
          chat: lang.chat,
          labeltext: _.str.sformat(lang.chatlabeltext, this.options.model.attributes.name)
        };
        var contentRegion = new Marionette.Region({el: '#esoc-userprofile-chat-action'}),
            chatOptions   = {
              context: this.options.context,
              tguser: this.options.model.attributes.name,
              customtemplate: CustomChatBtnTemplate(contentparams),
              domain: this.options.model.attributes.chatSettings.chatDomain
            },
            chatView      = new ChatView(chatOptions);
        contentRegion.show(chatView);
      }
    },
    showTab: function (e) {
      UserProfile.showTab(e.currentTarget.id, "esoc-user-profile-tab-content",
          self.options, this);
    },

    followUnFollowAction: function (e) {
      var formData = new FormData();
      var followUnfollowAction = !this.model.attributes.following ?
                                 Util.commonUtil.globalConstants.FOLLOW :
                                 Util.commonUtil.globalConstants.UNFOLLOW;
      formData.append(Util.commonUtil.globalConstants.ACTION, followUnfollowAction);
      var args = {
        "itemview": this,
        "url": this.userProfileFollowingUrl,
        "type": "POST",
        "data": formData,
        "requestType": "userProfileFollowingAction",
        "targetElement": $(e.target)
      };
      this.util.updateAjaxCall(args);
    },
    updateProfilePicAction: function (e) {
      if (this.processKeyEvent(e)) {
        return;
      }
      var that            = this,
          profilepicInput = this.$el.find("#esoc-profilepic-desktop-attachment");
      profilepicInput.off("change").on("change", function (e) {
        if (profilepicInput.val().length > 0) {
          var formData = new FormData(),
              photo    = profilepicInput[0].files[0];
          if (photo) {
            formData.append("photo", photo);
          }
          that.$el.find(".esoc-userprofile-actions .esoc-full-profile-avatar").addClass(
              "esoc-profile-opacity");
          that.$el.find(".esoc-userprofile-actions .esoc-profile-img-load-container").addClass(
              "esoc-progress-display");
          var v2url      = that.options.connector.connection.url.replace('/v1', '/v2'),
              ajaxParams = {
                "itemview": that,
                "url": Url.combine(v2url,
                    that.util.commonUtil.REST_URLS.updatePhotoUrl),
                "type": "POST",
                "requestType": "updatePhoto",
                "data": formData,
                "targetElement": e.target,
                "connector": that.options.connector
              };
          that.util.commonUtil.updateAjaxCall(ajaxParams);
        }
      });
      e.preventDefault();
      profilepicInput.trigger("click");
    },
    processKeyEvent: function (e) {
      if (e.type === "keydown") {
        var keyCode = e.keyCode || e.which;
        if (keyCode !== 32 && keyCode !== 13) {
          return true;
        }
      }
      return false;
    },
    getExtraTabs: function (extraTabs) {
      var that = this;
      extraTabs = _.flatten(extraTabs, true);
      _.each(extraTabs, function (tab) {
        if (!!tab.tabCount) {
          tab.tabCount.count = tab.tabCount.getItemCount(that.model, that.options);
        }
        tab.show = true;
        if (!!tab.showTab) {
          tab.show = tab.showTab(that.model, that.options);
        }
      });
      return extraTabs;
    }
  });
  _.extend(UserProfileView.prototype, TabLinksScrollMixin);
  _.extend(UserProfileView.prototype, LayoutViewEventsPropagationMixin);
  return UserProfileView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/simple.userwidget.tabs',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "  <div class=\"binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12 tab-links esoc-profile-tabs\r\n  esoc-nopadding-right\">\r\n    <div class=\"tab-links\">\r\n     <div class=\"tab-links-header\">\r\n       <div class=\"left-toolbar\"></div>\r\n       <div class=\"tab-links-bar\">\r\n        <ul class='binf-nav binf-nav-pills esoc-user-profile-tabcontainer'>\r\n        <li class=\"esoc-user-profile-tab binf-active\"\r\n            id=\"esoc-simple-user-profile-tab-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\">\r\n          <a href=\"#tab1\" data-binf-toggle=\"tab\" class=\"esoc-simple-user-profile-tab-label\" title="
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.profile : stack1), depth0))
    + ">\r\n          <span class=\"esoc-simple-user-profile-tab-label\"\r\n                title="
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.profile : stack1), depth0))
    + ">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.profile : stack1), depth0))
    + "</span></a>\r\n        </li>\r\n\r\n"
    + ((stack1 = helpers.each.call(depth0,(depth0 != null ? depth0.extraTabs : depth0),{"name":"each","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "      </ul>\r\n       </div>\r\n      <div class=\"right-toolbar\"></div>\r\n      </div>\r\n      <div id=\"esoc-simple-user-widget-form-body-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\"\r\n      class=\"esoc-simple-user-widget-form-body\" role=\"tabpanel\"></div>\r\n    </div>\r\n  </div>\r\n";
},"2":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers.blockHelperMissing.call(depth0,this.lambda(depth0, depth0),{"name":"this","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"3":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.show : depth0),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"4":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "              <li class=\"esoc-user-profile-tab\"\r\n                  id=\"esoc-user-profile-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-tab\">\r\n                <a href=\"#"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "\" data-binf-toggle=\"tab\" class=\"esoc-user-profile-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-tab-label\" title= "
    + this.escapeExpression(((helper = (helper = helpers.tabDisplayName || (depth0 != null ? depth0.tabDisplayName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabDisplayName","hash":{}}) : helper)))
    + ">\r\n              <span class=\"esoc-user-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-tab-label esoc-user-profile-tab-label\"\r\n                    title=\""
    + this.escapeExpression(((helper = (helper = helpers.tabDisplayName || (depth0 != null ? depth0.tabDisplayName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabDisplayName","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.tabDisplayName || (depth0 != null ? depth0.tabDisplayName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabDisplayName","hash":{}}) : helper)))
    + "</span>\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.tabCount : depth0),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "                </a>\r\n              </li>\r\n";
},"5":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "                    <span class=\"esoc-user-"
    + this.escapeExpression(((helper = (helper = helpers.tabName || (depth0 != null ? depth0.tabName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"tabName","hash":{}}) : helper)))
    + "-count\r\n              esoc-user-profile-tab-count esoc-user-profile-tab-label\"\r\n                          title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.tabCount : depth0)) != null ? stack1.count : stack1), depth0))
    + "\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.tabCount : depth0)) != null ? stack1.count : stack1), depth0))
    + "</span>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var helper;

  return "  <div id=\"esoc-simple-user-widget-form-body-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\" class=\"esoc-simple-user-widget-form-body\" role=\"tabpanel\"></div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.extraTabs : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(7, data, 0)})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_simple.userwidget.tabs', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/userwidget/view/simple.userwidget.tabs.view',[
  'require',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/url',
  'csui/controls/tab.panel/tab.links.ext.scroll.mixin',
  'csui/behaviors/keyboard.navigation/tabables.behavior',
  'csui/behaviors/keyboard.navigation/tabable.region.behavior',
  'csui/controls/mixins/layoutview.events.propagation/layoutview.events.propagation.mixin',
  'esoc/widgets/userwidget/userprofile',
  'esoc/widgets/userwidget/view/simple.userwidget.form.view',
  'csui-ext!esoc/widgets/userprofile/tab.extension',
  'hbs!esoc/widgets/userwidget/impl/simple.userwidget.tabs',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function (require, $, _, Backbone, Handlebars, Marionette, Url,
    TabLinksScrollMixin, TabablesBehavior, TabableRegionBehavior, LayoutViewEventsPropagationMixin,
    UserProfile, SimpleUserWidgetFormView, extraTabs, simpleUserWidgetTabsTemplate, Lang) {

  var UserProfileTabContentCollectionView, UserProfileTabPanelView, UserProfileTabLinkCollectionView;
  var loadItems = function () {
    var deferred = $.Deferred();
    if (!!UserProfileTabContentCollectionView && !!UserProfileTabPanelView &&
        !!UserProfileTabLinkCollectionView) {
      deferred.resolve();
    } else {
      csui.require(['csui/controls/tab.panel/tab.panel.view',
            'csui/controls/tab.panel/impl/tab.contents.view',
            'csui/controls/tab.panel/impl/tab.links.view'],
          function (TabPanelView, TabContentCollectionView,
              TabLinkCollectionView) {
            UserProfileTabContentCollectionView = TabContentCollectionView.extend({
              className: 'esoc-simple-user-widget-tab-view',
              constructor: function UserProfileTabContentCollectionView(options) {
                options || (options = {});
                _.defaults(options, {
                  toolbar: true,
                  searchTabContentForTabableElements: true
                });
                TabContentCollectionView.prototype.constructor.apply(this, arguments);
              }
            });
            UserProfileTabPanelView = TabPanelView.extend({
              className: 'esoc-simple-user-widget-tab-view',
              constructor: function UserProfileTabPanelView(options) {
                options || (options = {});
                _.defaults(options, {
                  toolbar: true,
                  searchTabContentForTabableElements: true
                });
                TabPanelView.prototype.constructor.apply(this, arguments);

              },
              behaviors: {
                TabableRegionBehavior: {
                  behaviorClass: TabableRegionBehavior
                }
              },
              currentlyFocusedElement: function (shiftTab) {
                var element = this.options.focusedElement;
                if (shiftTab === undefined || shiftTab.shiftKey === false) {
                  return $(this.$el.find("a[title]").filter(":visible").filter(":not(a:empty)")[0]);
                } else if (element && $(element).length) {
                  return element;
                }
              },
              onLastTabElement: function (shiftTab) {
                var tabableElements = this.$el.find(
                    "[tabindex=" + this.options.tabCount + "]").filter(
                    ":visible").filter(":not(a:empty)");
                var focusElement = shiftTab ? this.$el.find("a[title]").filter(":visible").filter(
                    ":not(a:empty)")[0] : tabableElements.last();
                if (!shiftTab && tabableElements.length === 1 &&
                    this.options.tabIndex + 1 === this.options.tabCount) {
                  this.options.tabIndex = 0;
                  return true;
                }
                return $(focusElement).hasClass(
                    TabableRegionBehavior.accessibilityActiveElementClass);
              }
            });
            UserProfileTabLinkCollectionView = TabLinkCollectionView.extend({
              className: 'esoc-simple-user-widget-tab-view',
              constructor: function UserProfileTabLinkCollectionView(options) {
                options || (options = {});
                _.defaults(options, {
                  toolbar: true,
                  searchTabContentForTabableElements: true
                });
                TabLinkCollectionView.prototype.constructor.apply(this, arguments);
              }
            });
            deferred.resolve();
          }, deferred.reject);
    }
    return deferred.promise();
  };

  var SimpleUserWidgetViewTabs = Marionette.ItemView.extend({
    className: 'esoc-simple-user-widget-tab-view',
    template: simpleUserWidgetTabsTemplate,
    templateHelpers: function () {
      return {
        uniqueId: this.options.uniqueId,
        extraTabs: this.getExtraTabs(extraTabs),
        messages: {
          profile: Lang.profile,
          settings: Lang.settings
        }
      };
    },
    events: {
      'click .esoc-user-profile-tab': 'showTab'
    },
    behaviors: {
      TabableRegionBehavior: {
        behaviorClass: TabableRegionBehavior
      }
    },
    constructor: function SimpleUserWidgetViewTabs(options) {
      options = options || {};
      _.defaults(options, {
        toolbar: true,
        tabClickedOnce: false,
        initialActivationWeight: 1
      });
      $(window).on('resize', {view: this}, this._onWindowResize);
      Marionette.ItemView.prototype.constructor.call(this, options);
      this.uniqueId= _.uniqueId();

    },
    onRender: function (e) {
      var that = this;
      loadItems().done(function () {
        that.propagateEventsToRegions();
        var UserProfileTabPanelViewClass = new UserProfileTabPanelView(_.extend(that));
        UserProfileTabPanelViewClass.tabLinks = new UserProfileTabLinkCollectionView(_.extend(
            that));
        UserProfileTabPanelViewClass.tabContent = new UserProfileTabContentCollectionView(_.extend(
            that));
        UserProfileTabPanelViewClass.options = that.options;
        $.extend(that, UserProfileTabPanelViewClass);
        that._initializeOthers();
      });
    },
    onShow: function () {
      if (this.templateHelpers().extraTabs.length === 0) {
        this.options.userwidgetmodel = this.options.model;
        var simpleUserWidgetFormView = new SimpleUserWidgetFormView(this.options),
            contentRegion            = new Marionette.Region({
              el: this.$el.find('#esoc-simple-user-widget-form-body-' + this.options.uniqueId)
            });
        contentRegion.show(simpleUserWidgetFormView);
      }
    },
    onAfterShow: function () {
      loadItems();
    },

    _onWindowResize: function (event) {
      if (event && event.data && event.data.view) {
        event.data.view._enableToolbarState();
      }
    },

    _initializeOthers: function () {
      var options = {
        gotoPreviousTooltip: Lang.previous,
        gotoNextTooltip: Lang.next
      };
      this._initializeToolbars(options);
      this._listenToTabEvent();

      // delay this a bit since the initial dialog fade in makes the tab to be hidden
      setTimeout(_.bind(this._enableToolbarState, this), 300);
    },
    showTab: function (e) {
      UserProfile.showTab(e.currentTarget.id, "esoc-simple-user-widget-form-body-" + this.options.uniqueId,
          this.options, this);
      var $selected = this.$el.find("#"+e.currentTarget.id);
      $selected.find('a').attr('aria-selected', true);
      $selected.siblings().find('a').attr('aria-selected', false);
    },
    getExtraTabs: function (extraTabs) {
      var that = this;
      extraTabs = _.flatten(extraTabs, true);
      _.each(extraTabs, function (tab) {
        if (!!tab.tabCount) {
          tab.tabCount.count = tab.tabCount.getItemCount(that.model, that.options);
        }
        tab.show = true;
        if (!!tab.showTab) {
          tab.show = tab.showTab(that.model, that.options);
        }
      });
      return extraTabs;
    }
  });
  _.extend(SimpleUserWidgetViewTabs.prototype, TabLinksScrollMixin);
  _.extend(SimpleUserWidgetViewTabs.prototype, LayoutViewEventsPropagationMixin);
  return SimpleUserWidgetViewTabs;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/simple.userwidget',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.chatSettings : depth0)) != null ? stack1.presenceEnabled : stack1),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.noop})) != null ? stack1 : "");
},"2":function(depth0,helpers,partials,data) {
    return "          <div id=\"esoc-user-profile-presence-indicator\" class=\"esoc-user-profile-presence-indicator binf-col-lg-12 binf-col-md-12 binf-col-sm-12\r\n    binf-col-xs-12\"></div>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var helper;

  return "          <div role=\"button\" class=\"esoc-user-profile-chat-comment\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.chatLabel || (depth0 != null ? depth0.chatLabel : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"chatLabel","hash":{}}) : helper)))
    + "\"\r\n               tabindex=\"0\" data-cstabindex=\"0\"></div>\r\n";
},"6":function(depth0,helpers,partials,data) {
    return " esoc-full-profile-avatar-cursor ";
},"8":function(depth0,helpers,partials,data) {
    var helper;

  return "            <span class=\"edit-user-image-placeholder edit-user\"></span>\r\n            <input type=\"file\" id=\"esoc-profilepic-desktop-attachment\"\r\n                   class=\"esoc-profilepic-desktop-attachment\" name=\"updateProfilePic\" accept=\"image/*\"\r\n                   aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.simpleUserProfileLabel || (depth0 != null ? depth0.simpleUserProfileLabel : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"simpleUserProfileLabel","hash":{}}) : helper)))
    + "\"/>\r\n\r\n            <div class=\"esoc-simple-profile-img-load-container esoc-social-progress-style\">\r\n                <div class=\"esoc-simple-profile-img-outer-border\">\r\n                    <div class=\"esoc-simple-profile-img-loader\">\r\n                        <div class=\"esoc-simple-profile-img-inner-border\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n";
},"10":function(depth0,helpers,partials,data) {
    var helper;

  return "        <div\r\n            class=\"esoc-user-title binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">"
    + this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"title","hash":{}}) : helper)))
    + "</div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "<div class=\"esoc-simple-user-widget\">\r\n  <div class=\"esoc-simple-user-widget-header\">\r\n    <div class=\"cs-close binf-close esoc-user-widget-dialog-close\" role=\"button\"\r\n         title=\""
    + this.escapeExpression(((helper = (helper = helpers.dialogCloseButtonTooltip || (depth0 != null ? depth0.dialogCloseButtonTooltip : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"dialogCloseButtonTooltip","hash":{}}) : helper)))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.closeDialogLabel || (depth0 != null ? depth0.closeDialogLabel : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"closeDialogLabel","hash":{}}) : helper)))
    + "\" tabindex=\"0\"\r\n         data-cstabindex=\"0\"></div>\r\n    <div class=\"esoc-userprofile-pic-actions\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.chatSettings : depth0)) != null ? stack1.chatEnabled : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "      <span role=\"button\" class=\""
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(6, data, 0)})) != null ? stack1 : "")
    + "\r\n      image_user_placeholder esoc-userprofile-default-avatar esoc-full-profile-avatar-update\r\n    esoc-user-default-avatar-"
    + this.escapeExpression(((helper = (helper = helpers.userid || (depth0 != null ? depth0.userid : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"userid","hash":{}}) : helper)))
    + "\" id=\"esoc-simple-user-default-avatar-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.displayname : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.simpleUserProfileLabel || (depth0 != null ? depth0.simpleUserProfileLabel : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"simpleUserProfileLabel","hash":{}}) : helper)))
    + "\" tabindex=\"0\"\r\n            data-cstabindex=\"0\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n      <img role=\"button\" class=\""
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.otherUser : depth0),{"name":"if","hash":{},"fn":this.noop,"inverse":this.program(6, data, 0)})) != null ? stack1 : "")
    + "\r\n      esoc-full-profile-avatar\r\n    esoc-full-profile-avatar-update binf-img-circle esoc-image\r\n    esoc-upload-image-style\r\n    esoc-userprofile-img-"
    + this.escapeExpression(((helper = (helper = helpers.userid || (depth0 != null ? depth0.userid : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"userid","hash":{}}) : helper)))
    + "\" id=\"esoc-simple-user-image-avatar-"
    + this.escapeExpression(((helper = (helper = helpers.uniqueId || (depth0 != null ? depth0.uniqueId : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uniqueId","hash":{}}) : helper)))
    + "\" title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.displayname : stack1), depth0))
    + "\" alt=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.displayname : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.simpleUserProfileLabel || (depth0 != null ? depth0.simpleUserProfileLabel : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"simpleUserProfileLabel","hash":{}}) : helper)))
    + "\"\r\n           tabindex=\"0\" data-cstabindex=\"0\" src=\"#\"/>\r\n\r\n"
    + ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.isEnableUploadProfilePicture && !this.otherUser",{"name":"xif","hash":{},"fn":this.program(8, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "    </div>\r\n\r\n    <div class=\"esoc-user-name binf-col-lg-12 binf-col-md-12 binf-col-sm-12 binf-col-xs-12\">\r\n      "
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\r\n"
    + ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.title : depth0),{"name":"if","hash":{},"fn":this.program(10, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "    </div>\r\n  </div>\r\n  <div class=\"esoc-simple-user-widget-body\">\r\n    <div class=\"esoc-simple-user-widget-tabs\"></div>\r\n  </div>\r\n  <div class=\"esoc-simple-user-widget-footer\"></div>\r\n</div>\r\n<div class=\"esoc-simple-user-widget-backdrop\"></div>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_simple.userwidget', t);
return t;
});
/* END_TEMPLATE */
;

/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/edit.profile.photo',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var helper;

  return "<div class=\"esoc-simple-user-profile-pic-update\">\r\n  <div class=\"esoc-simple-user-profile-pic-edit\r\n  esoc-profile-pic-edit\" role=\"button\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.uploadProfilePicture || (depth0 != null ? depth0.uploadProfilePicture : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uploadProfilePicture","hash":{}}) : helper)))
    + "\"\r\n       tabindex=\"-1\">"
    + this.escapeExpression(((helper = (helper = helpers.uploadProfilePicture || (depth0 != null ? depth0.uploadProfilePicture : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"uploadProfilePicture","hash":{}}) : helper)))
    + "</div>\r\n  <div class=\"esoc-simple-user-profile-pic-delete\r\n  esoc-profile-pic-edit\" role=\"button\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.deleteProfilePicture || (depth0 != null ? depth0.deleteProfilePicture : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"deleteProfilePicture","hash":{}}) : helper)))
    + "\"\r\n       tabindex=\"-1\">"
    + this.escapeExpression(((helper = (helper = helpers.deleteProfilePicture || (depth0 != null ? depth0.deleteProfilePicture : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"deleteProfilePicture","hash":{}}) : helper)))
    + "</div>\r\n</div>";
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_edit.profile.photo', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/userwidget/view/simple.userwidget.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/url',
  'csui/controls/form/fields/userfield.view',
  'csui/utils/user.avatar.color',
  'esoc/widgets/userwidget/model/extended.model',
  'esoc/widgets/userwidget/userprofile',
  'esoc/widgets/userwidget/util',
  'esoc/widgets/userwidget/view/extendedinfotextfield.view',
  'esoc/widgets/userwidget/chat/view/presence.view',
  'esoc/widgets/userwidget/chat/chatfactory',
  'esoc/widgets/utils/chat/impl/util',
  'esoc/widgets/userwidget/view/simple.userwidget.form.view',
  'esoc/widgets/userwidget/view/simple.userwidget.tabs.view',
  'hbs!esoc/widgets/userwidget/impl/simple.userwidget',
  'hbs!esoc/widgets/userwidget/impl/edit.profile.photo',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function ($, _, Backbone, Handlebars, Marionette, Url, UserFieldView,
    UserAvatarColor,
    UserExtendedInfoModel,
    UserProfile, Util,
    ExtendedInfoTextFieldView, PresenceView, ChatFactory, ChatUtil,
    SimpleUserWidgetFormView, SimpleUserWidgetViewTabs, simpleUserWidgetTemplate,
    EditProfilePhotoTemplate, Lang) {

  var SimpleUserWidgetView = Marionette.ItemView.extend({
    className: 'esoc-simple-user-widget-view',

    template: simpleUserWidgetTemplate,
    editProfilePhotoTemplate: EditProfilePhotoTemplate,
    util: Util,
    ui: {
      initialsPlaceholder: '.image_user_placeholder'
    },
    templateHelpers: function () {
      var extendedInfo = this.options.model.attributes.extendedInfo,
          canEdit      = !this.options.model.attributes.otherUser &&
                         (!!extendedInfo && extendedInfo.isEditable),
      chatEnabled = this.model.attributes.chatSettings && this.model.attributes.chatSettings.chatEnabled,
      presenceEnabled = chatEnabled && this.model.attributes.chatSettings.presenceEnabled && this.options.showPresenceIndicator;

      return {
        uniqueId: this.uniqueId,
        messages: {
          displayname: !!this.model.attributes.display_name ? this.model.attributes.display_name :
                       this.options.display_name,
          showReportsTo: canEdit || (!!extendedInfo && !!extendedInfo.reportsTo)
        },
        simpleUserProfileLabel: Lang.simpleUserProfileLabel,
        isEnableUploadProfilePicture: (!!this.options.enableUploadProfilePicture) ? true : false,
        dialogCloseButtonTooltip: Lang.dialogCloseButtonTooltip,
        chatLabel: Lang.chatLabel,
        closeDialogLabel: Lang.closeDialogLabel,
        chatSettings: { chatEnabled: chatEnabled, presenceEnabled: presenceEnabled }
      };
    },
    events: {
      'mouseover .esoc-simple-user-widget-header .edit-user': 'onMouseoverProfilePic',
      'mouseout .edit-user': 'onMouseoutProfilePic',
      'focusin .edit-user': 'onMouseoverProfilePic',
      'focusout .edit-user': 'onMouseoutProfilePic',
      'click .esoc-simple-user-widget-header .edit-user': 'editProfilePhoto',
      'click .esoc-user-profile-chat-comment': 'launchChatWindow',
      'keydown .esoc-user-profile-chat-comment': 'launchChatWindow',
      'keydown .esoc-user-widget-dialog-close': 'closeSimpleUserWidget',
      'click .esoc-simple-user-profile-pic-edit': 'uploadPhoto',
      'click .esoc-simple-user-profile-pic-delete': 'deletePhoto',
      'keydown .esoc-simple-user-profile-pic-edit': 'uploadPhoto',
      'keydown .esoc-simple-user-profile-pic-delete': 'deletePhoto',
      'keydown': 'onKeyDown'
    },

    onKeyDown: function (event) {
      if (event.keyCode === 9 || event.shiftKey) {
        // for simple user profile focus should remain inside dialog.
        // moving focus in circular way.
        // keyboard is traped in the current slick only.
        var tabableElements = this.$el.find(this.focusablesSelector).filter(':visible');
        if (event.target === tabableElements[0] && event.shiftKey && event.which === 9) {
          tabableElements.last().trigger('focus');
          event.preventDefault();
        } else if (event.target === tabableElements[tabableElements.length - 1] &&
                   !event.shiftKey) {
          tabableElements.first().trigger('focus');
          event.preventDefault();
        }
      }
    },

    initialize: function (options) {
      this.options = options;
      if (!this.options.model.attributes.isError) {
        var self         = this,
            ExtendedInfo = Backbone.Model.extend({}),
            messages     = this.templateHelpers().messages,
            extdInfo     = this.model.attributes.extendedInfo,
            defaultAttrs = {
              userid: this.model.attributes.userid,
              connector: this.options.connector,
              isEditable: !this.model.attributes.otherUser && !!extdInfo &&
                          extdInfo.isEditable
            };
      }
      this.uniqueId = _.uniqueId();
      var mouseoverOnDefaultAvatar = 'mouseover #esoc-simple-user-default-avatar-' + this.uniqueId;
      this.events[mouseoverOnDefaultAvatar] = 'onMouseoverProfilePic';
      var focusOnDefaultAvatar = 'focusin #esoc-simple-user-default-avatar-' + this.uniqueId;
      this.events[focusOnDefaultAvatar] = 'onMouseoverProfilePic';
      var mouseoutFromDefaultAvatar = 'mouseout #esoc-simple-user-default-avatar-' + this.uniqueId;
      this.events[mouseoutFromDefaultAvatar] = 'onMouseoutProfilePic';
      var focusoutFromDefaultAvatar = 'focusout #esoc-simple-user-default-avatar-' + this.uniqueId;
      this.events[focusoutFromDefaultAvatar] = 'onMouseoutProfilePic';
      var keydownOnDefaultAvatar = 'keydown #esoc-simple-user-default-avatar-' + this.uniqueId;
      this.events[keydownOnDefaultAvatar] = 'editProfilePhoto';
      var mouseoverOnImageAvatar = 'mouseover #esoc-simple-user-image-avatar-' + this.uniqueId;
      this.events[mouseoverOnDefaultAvatar] = 'onMouseoverProfilePic';
      var focusOnImageAvatar = 'focusin #esoc-simple-user-image-avatar-' + this.uniqueId;
      this.events[focusOnImageAvatar] = 'onMouseoverProfilePic';
      var mouseoutFromImageAvatar = 'mouseout #esoc-simple-user-image-avatar-' + this.uniqueId;
      this.events[mouseoutFromImageAvatar] = 'onMouseoutProfilePic';
      var focusoutFromImageAvatar = 'focusout #esoc-simple-user-image-avatar-' + this.uniqueId;
      this.events[focusoutFromImageAvatar] = 'onMouseoutProfilePic';
      var keydownOnImageAvatar = 'keydown #esoc-simple-user-image-avatar-' + this.uniqueId;
      this.events[keydownOnImageAvatar] = 'editProfilePhoto';
      this.focusablesSelector = 'a[href], area[href], input:not([disabled]), select:not([disabled]),' +
      'textarea:not([disabled]),  button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';
      this.delegateEvents();
    },
    constructor: function SimpleUserWidgetView(options) {
      options = options || {};
      var generalOptions = _.extend({}, options);
      generalOptions.model = new UserExtendedInfoModel(generalOptions);
      generalOptions.model.fetch({
        success: generalOptions.model.fetchSuccess,
        error: generalOptions.model.fetchError,
        async: false
      });
      Marionette.ItemView.prototype.constructor.call(this, generalOptions);
      this.listenTo(this, 'render', this._assignUserColor);
    },
    onAfterShow: function (e) {
      var that = this;
      var tabsViewRegion = new Marionette.Region(
          {el: this.$el.find(".esoc-simple-user-widget-tabs")});
      this.options.uniqueId = _.uniqueId();
      var tabsview = new SimpleUserWidgetViewTabs(this.options);
      tabsViewRegion.show(tabsview);
      tabsview.triggerMethod("after:show");

      tabsViewRegion.$el.find("#esoc-simple-user-profile-tab-" + this.options.uniqueId).trigger('click');

      var userId                = !!this.options.model.id ? this.options.model.id :
                                  this.options.userid,
          userProfilePicOptions = {
            userid: userId,
            context: this.options.context,
            photoElement: this.$el.find(".esoc-userprofile-img-" + Util.escapeSelector(userId)),
            defaultPhotElement: this.$el.find(".esoc-user-default-avatar-" + Util.escapeSelector(userId)),
            parentView: this,
            viewShownEvent: true
          };
      this.util.commonUtil.setProfilePic(userProfilePicOptions);
      if (this.model.attributes.chatSettings && this.model.attributes.chatSettings.chatEnabled &&
          this.model.attributes.chatSettings.presenceEnabled && this.options.showPresenceIndicator) {
        var presenceOptions = {
          id: this.model.attributes.id,
          context: this.options.context,
          username: this.model.attributes.name,
          subscribeEvent: true
        };
        var presenceRegion = new Marionette.Region({
          el: this.$el.find("#esoc-user-profile-presence-indicator")
        });
        ChatFactory.initializeApplication(this.options).promise().done(function () {
          var presenceView = new PresenceView(presenceOptions);
          presenceRegion.show(presenceView);
        });
      }
      if (!this.options.enableUploadProfilePicture || this.model.attributes.otherUser) {
        this.$el.find("#esoc-simple-user-default-avatar-" + this.uniqueId).attr("tabindex", "-1");
        this.$el.find("#esoc-simple-user-image-avatar-" + this.uniqueId).attr("tabindex", "-1");
      }
    },
    uploadPhoto: function (e) {
      if (this.processKeyEvent(e)) {
        return;
      }
      var that            = this,
          profilepicInput = this.$el.find("#esoc-profilepic-desktop-attachment");
      profilepicInput.off("change").on("change", function (e) {
        if (profilepicInput.val().length > 0) {
          var formData = new FormData(),
              photo    = profilepicInput[0].files[0];
          if (photo) {
            formData.append("photo", photo);
          }
          that.$el.find(".esoc-userprofile-actions .esoc-full-profile-avatar").addClass(
              "esoc-profile-opacity");
          that.$el.find(".esoc-userprofile-actions .esoc-profile-img-load-container").addClass(
              "esoc-progress-display");
          $(".esoc-simple-profile-img-load-container").addClass(
              "esoc-simple-profile-img-load-icon");
          var v2url      = that.options.connector.connection.url.replace('/v1', '/v2'),
              ajaxParams = {
                "itemview": that,
                "url": Url.combine(v2url,
                    that.util.commonUtil.REST_URLS.updatePhotoUrl),
                "type": "POST",
                "requestType": "updatePhoto",
                "data": formData,
                "targetElement": e.target,
                "connector": that.options.connector
              };
          that.util.commonUtil.updateAjaxCall(ajaxParams);
        }
      });
      e.preventDefault();
      profilepicInput.trigger("click");
      this.$el.find(".edit-user").css("opacity", "0");
      //set back the focus after upload operation.
      this.$el.find(".esoc-full-profile-avatar-cursor").trigger('focus');
    },
    editProfilePhoto: function (e) {
      if (this.processKeyEvent(e)) {
        return;
      }
      if (this.$el.find(".esoc-simple-user-edit-pic-popover").is(':visible')) {
        this.popoverTarget.binf_popover('destroy');
      }
      else {
        var that = this,
        getElementOffset = function (ele) {
          return ele.is(':visible') ? ele.offset() : {top: 0, left: 0};
        };
        if (!!that.options.enableUploadProfilePicture && !!that.model.attributes.photo_url) {
          this.popoverTarget = that.$el.find('.edit-user');
          var contentparams = {
                "uploadProfilePicture": Lang.uploadProfilePicture,
                "deleteProfilePicture": Lang.deleteProfilePicture
              },
              content       = this.editProfilePhotoTemplate(contentparams);
          this.popoverTarget.binf_popover({
            content: content,
            html: true,
            placement: function (tip, element) { //$this is implicit
              $(tip).addClass("esoc-simple-user-edit-pic-popover");
              var _tempElement = $('<div/>').addClass(
                  "esoc-simple-user-edit-pic-popover binf-popover esoc-simple-user-edit-pic-popover-temp-div")
                  .append(that.editProfilePhotoTemplate);
              that.popoverTarget.find('.edit-user').append(_tempElement);
              var popOverMaxHeight = $(".esoc-simple-user-edit-pic-popover-temp-div").height() + 40,
                  popOverMaxWidth  = $(".esoc-simple-user-edit-pic-popover-temp-div").width() + 40;
              _tempElement.remove();
              var offset        = getElementOffset($(element)),
                  window_top    = offset.top,
                  window_bottom = (($(window).height()) -
                                   (window_top + that.popoverTarget.outerHeight(true)));
              if (window_bottom > popOverMaxHeight) {
                return "bottom";
              }
              else if (window_top > popOverMaxHeight) {
                return "top";
              } else {
                return "auto";
              }
            }
          });
          this.popoverTarget.binf_popover('show');
          $("*").one('scroll', function () {
            that.popoverTarget.binf_popover('destroy');
          });
          $('.esoc-simple-user-widget-dialog').on('click', function (e) {
            $('.esoc-simple-user-widget-dialog [aria-describedby]').each(function () {
              if (!that.popoverTarget.is(e.target) &&
                  that.popoverTarget.has(e.target).length === 0 &&
                  $('.binf-popover').has(e.target).length === 0) {
                that.popoverTarget.binf_popover('destroy');
              }
            });
          });
          $('.esoc-simple-user-widget-dialog .csui-icon-edit').on('click', function (e) {
            that.popoverTarget.binf_popover('destroy');
          });
          $('.esoc-simple-user-widget-dialog .btn-container').on('click', function (e) {
            that.popoverTarget.binf_popover('destroy');
          });
          this.$el.find(".esoc-simple-user-profile-pic-update").on('keydown', function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode !== 13) {
              e.preventDefault();
              e.stopPropagation();
            }
            if (keyCode === 27) {
              that.popoverTarget.binf_popover('destroy');
              that.popoverTarget.siblings('img').first().trigger('focus');
            }
            if (e.target.classList.contains("esoc-simple-user-profile-pic-edit")) {
              if (keyCode === 40 || keyCode === 38) {
                $(".esoc-simple-user-profile-pic-delete").trigger('focus');
              }
            }
            else if (e.target.classList.contains("esoc-simple-user-profile-pic-delete")) {
              if (keyCode === 40 || keyCode === 38) {
                $(".esoc-simple-user-profile-pic-edit").trigger('focus');
              }
            }
          });
          this.$el.find(".esoc-simple-user-profile-pic-edit").trigger('focus');
          this.$el.find(".esoc-simple-user-profile-pic-edit").attr("tabindex", "0");
          this.$el.find(".esoc-simple-user-profile-pic-delete").attr("tabindex", "0");
        }
        else {
          this.uploadPhoto(e);
        }
      }
    },
    deletePhoto: function (e) {
      if (this.processKeyEvent(e)) {
        return;
      }
      this.popoverTarget.binf_popover('destroy');
      var v2url      = this.options.connector.connection.url.replace('/v1', '/v2'),
          ajaxParams = {
            "itemview": this,
            "url": Url.combine(v2url,
                this.util.commonUtil.REST_URLS.deletePhotoUrl),
            "type": "DELETE",
            "requestType": "deletePhoto",
            "targetElement": e.target,
            "connector": this.options.connector
          };
      this.util.commonUtil.updateAjaxCall(ajaxParams);
    },
    onMouseoverProfilePic: function () {
      this.$el.find(".edit-user").css("opacity", "1");
    },
    onMouseoutProfilePic: function () {
      this.$el.find(".edit-user").css("opacity", "0");
    },
    launchChatWindow: function (e) {
      if (this.processKeyEvent(e)) {
        return;
      }
      this.options.tguser = this.options.model.get('name');
      this.options.domain = this.options.model.get('chatSettings') &&
                            this.options.model.get('chatSettings').chatDomain;
      ChatUtil.launchChatWindow(this.options);
    },
    onDestroy: function () {
      var element = this.options.targetEle;
      if (element && $(element).is(':visible')) {
        $(element).trigger('focus');
      } else if (!element) {
        element = $('.nav-profile');
        if (element && element.length) {
          element.trigger('focus');
        }
      }
      // to avoid memory leakage off the key events on destroying the view.
      this.$el.find(".esoc-simple-user-profile-pic-update").off('keydown');

      // the user settings tab requires a page reload when the accessibleMode setting was changed. The change is communicated through a class.
      if (this.$el.hasClass('csui-dialog-page-reload')) {
        location.reload();
      }
    },
    closeSimpleUserWidget: function (e) {
      if (this.processKeyEvent(e)) {
        return;
      }
      var target = $(e.target);
      target.trigger('click');
    },
    processKeyEvent: function (e) {
      if (e.type === "keydown") {
        var keyCode = e.keyCode || e.which;
        if (keyCode !== 32 && keyCode !== 13) {
          return true;
        }
      }
      return false;
    },
    _assignUserColor: function () {
      var userbackgroundcolor = UserAvatarColor.getUserAvatarColor(this.model.attributes);
      this.ui.initialsPlaceholder.css("background", "#FFFFFF");
      this.ui.initialsPlaceholder.css("color", userbackgroundcolor);
    }
  });
  return SimpleUserWidgetView;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/userwidget/impl/userwidget',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return " <!-- For user show mini profile and user profile -->\r\n  <a href=\"javascript:void(0);\" class=\"esoc-user-container\r\n  "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showUserProfilePicture : stack1),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n    "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showUserProfileLink : stack1),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n    "
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showMiniProfile : stack1),{"name":"if","hash":{},"fn":this.program(6, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n    "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userWidgetWrapperClass : stack1), depth0))
    + "\">\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showUserProfilePicture : stack1),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showUserDisplayName : stack1),{"name":"if","hash":{},"fn":this.program(10, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n  </a>\r\n";
},"2":function(depth0,helpers,partials,data) {
    return "esoc-user-profile-pic-container";
},"4":function(depth0,helpers,partials,data) {
    return " esoc-user-profile-link ";
},"6":function(depth0,helpers,partials,data) {
    return " esoc-user-mini-profile ";
},"8":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <span class=\"image_user_placeholder esoc-userwidget-default-avatar esoc-user-default-avatar-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userid : stack1), depth0))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.initials || (depth0 != null ? depth0.initials : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"initials","hash":{}}) : helper)))
    + "</span>\r\n      <img class=\"esoc-userprofile-img-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userid : stack1), depth0))
    + " binf-img-circle esoc-user-widget-avatar\" alt=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\" src=\"#\">\r\n";
},"10":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <span class=\"esoc-user-display-name\" id=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.uniqueId : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showPresenceIndicator : stack1),{"name":"if","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        "
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\r\n    </span>\r\n";
},"11":function(depth0,helpers,partials,data) {
    var stack1;

  return "      <span id=\"user-presence-indicator-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userid : stack1), depth0))
    + "\" class=\"user-presence-indicator\"></span>\r\n";
},"13":function(depth0,helpers,partials,data) {
    var stack1;

  return " <!-- For group show only plain text and/or image without any miniprofile or user profile-->\r\n  <span class=\"esoc-group-container "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userWidgetWrapperClass : stack1), depth0))
    + "\">\r\n\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showUserProfilePicture : stack1),{"name":"if","hash":{},"fn":this.program(14, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showUserDisplayName : stack1),{"name":"if","hash":{},"fn":this.program(16, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "\r\n  </span>\r\n";
},"14":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <span class=\"image_group_placeholder esoc-userwidget-default-avatar esoc-user-default-avatar-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userid : stack1), depth0))
    + "\"></span>\r\n      <img class=\"esoc-userprofile-img-"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.userid : stack1), depth0))
    + " binf-img-circle esoc-user-widget-avatar\" alt=\""
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\" src=\"#\">\r\n";
},"16":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <span class=\"esoc-user-group-name\" id=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.uniqueId : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.showPresenceIndicator : stack1),{"name":"if","hash":{},"fn":this.program(11, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "        "
    + this.escapeExpression(((helper = (helper = helpers.display_name || (depth0 != null ? depth0.display_name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"display_name","hash":{}}) : helper)))
    + "\r\n    </span>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = (helpers.xif || (depth0 && depth0.xif) || helpers.helperMissing).call(depth0,"this.type === 0",{"name":"xif","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(13, data, 0)})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_userwidget_impl_userwidget', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/controls/userwidget/userwidget.view',[
  'module',
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/contexts/factories/user',
  'csui/utils/user.avatar.color',
  'esoc/widgets/userwidget/model/userwidget.model',
  'esoc/widgets/userwidget/view/miniprofile.view',
  'esoc/widgets/userwidget/view/userprofile.view',
  'esoc/widgets/userwidget/view/simple.userwidget.view',
  'esoc/widgets/userwidget/userprofile',
  'esoc/widgets/userwidget/util',
  'hbs!esoc/widgets/userwidget/impl/userwidget',
  'i18n!esoc/widgets/userwidget/nls/lang',
  'esoc/widgets/userwidget/chat/chatfactory',
  'css!esoc/widgets/userwidget/impl/userwidget.css'
], function (module, $, _, Handlebars, Marionette, UserModelFactory, UserAvatarColor, UserWidgetModel,
    MiniProfileView, UserProfileView, SimpleUserWidgetView, UserProfile, Util, UserWidgetTemplate, lang, ChatFactory) {
  var self           = null,
      userDialog     = null,
      UserWidgetView = Marionette.ItemView.extend({
        tagName: 'span',
        className: 'esoc-userwidget-wrapper',
        template: UserWidgetTemplate,
        util: Util,
        ui: {
            initialsPlaceholder: '.image_user_placeholder'
        },
        templateHelpers: function () {
          return {
            messages: {
              showPresenceIndicator: this.options.showPresenceIndicator,
              showMiniProfile: this.options.showMiniProfile,
              showUserProfileLink: this.options.showUserProfileLink,
              showUserProfilePicture: this.showProfilePic,
              showUserDisplayName: !this.showProfilePic,
              userWidgetWrapperClass: this.options.userWidgetWrapperClass,
              myProfile: lang.myProfile,
              othersProfile: lang.othersProfile,
              userid: this.options.userid,
              uniqueId: _.uniqueId(),
              xFrame: this.options.xFrame
            }
          };
        },
        initialize: function (options) {
          this.options = options;
          var loggedUserId = this.options.context.getModel(UserModelFactory).get("id") || this.options.loggedUserId;
          this.options.model.attributes.otherUser = parseInt(loggedUserId, 10) !==
                                                    parseInt(this.options.userid, 10);
          self = this;
          if (this.options.showPresenceIndicator !== undefined &&
              this.options.showPresenceIndicator) {
            setInterval(this.getCurrentUserStatus(), 5000);
          }
          this.showProfilePic = !!this.options.showUserWidgetFor &&
                                this.options.showUserWidgetFor === "profilepic";  
        },
        onRender: function (e) {
          if (!this.options.unKnownUser && this.showProfilePic &&
              this.options.model.attributes.photo_url !== undefined) {
            var userProfilePicOptions = {
              userModel: this.options.model,
              context: this.options.context,
              userid: this.options.userid,
              photoElement: this.$el.find(
                  '[class^="esoc-userprofile-img-' + Util.escapeSelector(this.options.userid) + '"]'),
              defaultPhotElement: this.$el.find(
                  ".esoc-user-default-avatar-" + Util.escapeSelector(this.options.userid))
            }
            Util.commonUtil.setProfilePic(userProfilePicOptions);
          }
          if (this.options.showMiniProfile) {
            // triggering mouseover to initialize popover
            this.$el.find(".esoc-user-mini-profile").trigger('mouseover', { stopPropagation : true });
          }
        },
        getCurrentUserStatus: function () {
        },
        events: {
          'click .esoc-user-profile-link': 'showUserProfileDialog',
          'keydown .esoc-user-profile-link': 'showUserProfileDialogWithSpaceKey',
          'mouseover .esoc-user-mini-profile': 'showMiniProfilePopup'
        },

        showUserProfileDialogWithSpaceKey: function (e) {
          if ((e.keyCode || e.which) === 32) {
            e.preventDefault();
            $(e.currentTarget).trigger("click");
          }
        },
        showMiniProfilePopup: function (e, extraParameters) {
          // Render mini profile only if it is of user type
          if (this.model.attributes.type === 0) {
            var _evt = e || window.event;
            extraParameters && extraParameters.stopPropagation && _evt.stopPropagation();
            this.options.targetEle = _evt.target;
            this.options.userWidgetView = this;
            this.options.userprofileView = UserProfileView;
            var miniProfileView = new MiniProfileView(this.options);
            miniProfileView.render(e);
          }
        },
        showUserProfileDialog: function (e) {
          // Render user profile only if it is of user type
          if (this.model.attributes.type === 0) {
            if (e) {
              this.options.targetEle = e.currentTarget;
            }
            this.options.originatingView &&
            this.options.originatingView.disengageModalKeyboardFocusOnClose &&
            this.options.originatingView.disengageModalKeyboardFocusOnClose();
            Util.showUserProfileDialog(this, UserProfileView, SimpleUserWidgetView);
            var alreadyPushed = ((Util.userStack.length > 0 &&
                                  Util.userStack[Util.userStack.length - 1].model.id ===
                                  this.model.id) ? true : false);
            //push the userwidget view if the it is not pushed
            if (!alreadyPushed) {
              Util.userStack.push(this);
            }
          }

        },
        constructor: function UserWidgetView(options) {
          var self = this;
          options = options || {};
          options = this.setDefaultWidgetOptions(options);

          ChatFactory.initializeApplication(options);

          if (options.model) {
            options.model.connector = options.connector;
            options.model.userid = options.model.attributes.id;
            options.model.attributes.userid = options.model.attributes.id;
          } else {
            var userWidgetOptions = {
              userid: options.userid,
              connector: options.connector,
              context: options.context
            };
            options.model = Util.commonUtil.getUserWidgetModel(userWidgetOptions);
            this.isUserModelLoaded = false;
            options.model.ensureFetched().done(function () {
              if (options.source === "extendedInfoText") {
                if (self.$el) {
                  options.parentView.trigger("view:shown");
                } else {
                  self.isUserModelLoaded = true;
                  self.parentView = options.parentView;
                }
              }
              options.model.userid = options.model.attributes.id;
              options.model.attributes.userid = options.model.attributes.id;
              options.model.attributes.department_name = options.model.attributes.group_id ?
                                                         options.model.attributes.group_id["name"] :
                                                         "";
            });
          }
          var config = module.config();
          if (!!config) {
            if (config.enableSimpleUserProfile !== undefined) {
              options.enableSimpleSettingsModel = config.enableSimpleUserProfile;
            }
            if (config.enableProfilePicture !== undefined) {
              options.enableUploadProfilePicture = config.enableProfilePicture;
            }
          }

          Marionette.ItemView.prototype.constructor.call(this, options);
          this.model.on('change', this.render, this);
          this.model.on('error', this.errorHandle, this);
          this.listenTo(this, 'render', this._assignUserColor);
        },
        onShow: function () {
          if (this.isUserModelLoaded && this.parentView) {
            this.parentView.isUserModelLoaded = true;
          }
        },
        setDefaultWidgetOptions: function (options) {
          options.unKnownUser = options.userid === -3;
          options.showMiniProfile = !options.unKnownUser &&
                                    (options.showMiniProfile ? options.showMiniProfile : false);
          options.showUserProfileLink = !options.unKnownUser &&
                                        (options.showUserProfileLink ? options.showUserProfileLink :
                                         false);
          // chat is not in scope, for now hard coded value to false
          options.showPresenceIndicator = !options.unKnownUser && false;
          return options;
        },
        errorHandle: function (model, response) {
        },
        _assignUserColor: function(){
            var userbackgroundcolor = UserAvatarColor.getUserAvatarColor(this.model.attributes);
            this.ui.initialsPlaceholder.css("background",userbackgroundcolor);
        }
      });
  return UserWidgetView;
});


csui.define('esoc/widgets/utils/commentdialog/commentdialog.model',[
  'csui/lib/backbone',
  'csui/utils/url',
  'esoc/widgets/common/util',
  'csui/models/mixins/resource/resource.mixin'
], function (Backbone, Url, CommonUtil, ResourceMixin) {
  var CommentDialogModel = Backbone.Model.extend({
    defaults: {
      attachementsEnabled: true,
      chatEnabled: true,
      commentingOpen: true,
      commentsEnabled: true,
      likesEnabled: true,
      taggingEnabled: true,
      threadingEnabled: true,
      csid: "",
      commentCount: 0
    },
    connector: "",
    commonUtil: CommonUtil,
    constructor: function CommentDialogModel(attributes, options) {
      this.defaults.csid = options.nodeid;
      this.options = options || {};
      Backbone.Model.prototype.constructor.apply(this, arguments);

      if (options && options.connector) {
        options.connector.assignTo(this);
      }

      this.makeResource(options);
    },
    url: function () {
      var restUrl = Url.combine(this.connector.connection.url, this.commonUtil.REST_URLS.csGetROI);
      restUrl += "csid=" + this.options.csid + "&includes=comment_count";
      return restUrl;
    },
    parse: function (response) {
      var responseData = JSON.parse(JSON.stringify(response.available_settings)),
          data         = {
            socialactions: responseData
          };
      data.id = responseData.CSID;
      data.showSocialActions = responseData.pulseEnabled;
      data.wnd_comments = responseData.commentCount;
      data.wnd_comments_validated = responseData.commentCount > 0 ?
                                    responseData.commentCount > 99 ? '99+' :
                                    responseData.commentCount : '';
      return data;
    }
  });

  ResourceMixin.mixin(CommentDialogModel.prototype);

  return CommentDialogModel;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/tablecell/impl/tablecell',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "  <span class=\"esoc-social-actions-widget-area esoc-column-social\" data-csid=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.socialactions : depth0)) != null ? stack1.commentsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(2, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  </span>\r\n";
},"2":function(depth0,helpers,partials,data) {
    var stack1, helper;

  return "      <span class=\"esoc-column-social-comment-wrapper\">\r\n      <span class=\"esoc-socialactions-comment\"\r\n            data-value=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\">\r\n		<span class=\"esoc-socialactions-comment-container\">	\r\n          <a href=\"javascript:void(0);\" class=\"cs-icon cs-icon-comment\"\r\n             title=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.addComments : stack1), depth0))
    + "\" aria-label=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.addComments : stack1), depth0))
    + "\"></a>\r\n		</span>   \r\n          <span title=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\"\r\n                class=\"cs-text wnd_comments_validated\" data-csid=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_validated || (depth0 != null ? depth0.wnd_comments_validated : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_validated","hash":{}}) : helper)))
    + "</span>\r\n      </span>\r\n      <span class=\"binf-sr-only\">"
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.addAComment : stack1), depth0))
    + "</span>\r\n    </span>\r\n";
},"4":function(depth0,helpers,partials,data) {
    var helper;

  return "  <span class=\"esoc-socialactions-comment\" data-value=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\"\r\n        aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_no_comments || (depth0 != null ? depth0.wnd_no_comments : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_no_comments","hash":{}}) : helper)))
    + "\"></span>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.showSocialActions : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(4, data, 0)})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_tablecell_impl_tablecell', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/factory/commentmodelfactory',[
  'module', 'csui/lib/underscore', 'csui/lib/backbone',
  'csui/utils/contexts/factories/factory', 'csui/utils/contexts/factories/connector',
  'esoc/widgets/utils/commentdialog/commentdialog.model',
], function (module, _, Backbone, ModelFactory, ConnectorFactory,
    CommentDialogModel) {
  'use strict';

  var commentModelFactory = ModelFactory.extend({
    propertyPrefix: 'comment',

    constructor: function commentModelFactory(context, options) {
      ModelFactory.prototype.constructor.apply(this, arguments);

      var comment = this.options.comment || {},
          config = module.config();
      if (!(comment instanceof Backbone.Model)) {
        var creationOptions = {
          connector: this.options.connector || context.getObject(ConnectorFactory, options),
          csid: this.options.attributes.id
        }
        comment = new CommentDialogModel(comment.attributes, _.extend(creationOptions, comment.options, config.options));
      }
      this.property = comment;
    },

    isFetchable: function () {
      return this.property.isFetchable();
    },

    fetch: function (options) {
      return this.property.fetch(options);
    }
  });

  return commentModelFactory;
});
csui.define('esoc/widgets/tablecell/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('esoc/widgets/tablecell/nls/root/lang',{
    addComments: 'Comments',
    addAComment: 'Add a comment',
    commentCount: 'comments',
    noComments: 'No comments',
    oneComment: 'comment'
});


csui.define('esoc/widgets/utils/commentdialog/commentdialog.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'csui/utils/contexts/factories/connector',
  'esoc/widgets/utils/commentdialog/commentdialog.model',
  'hbs!esoc/widgets/tablecell/impl/tablecell',
  'esoc/widgets/socialactions/commentscollectionwidget',
  'esoc/widgets/common/util',
  'esoc/factory/commentmodelfactory',
  'csui/utils/log',
  'csui/utils/url',
  'i18n!esoc/widgets/tablecell/nls/lang',
  'css!esoc/widgets/socialactions/socialactions.css',
  'css!esoc/widgets/tablecell/impl/social.css'
], function ($, _, Handlebars, Marionette, ConnectorFactory, CommentDialogModel,
    CommentDialogTemplate, CommentsCollectionWidget, CommonUtil, CommentModelFactory, Log, Url, Lang) {
  var self = null;
  var CommentDialogView = Marionette.ItemView.extend({
    className: 'esoc-socialactions-wrapper',
    template: CommentDialogTemplate,
    templateHelpers: function () {
      var messages = {
        addComments: Lang.addComments
      }
      var wnd_comments_title = this.model.attributes.wnd_comments > 0 ?
                               this.model.attributes.wnd_comments > 1 ?
                               this.model.attributes.wnd_comments + " " + Lang.commentCount :
                               this.model.attributes.wnd_comments + " " + Lang.oneComment : '';
      return {
        messages: messages,
        wnd_comments_title: wnd_comments_title
      };
    },
    initialize: function (options) {
      this.options = options;
      self = this;
      $(document).on('keydown click', this.closeCommentDialog);
    },
    events: {
      'click .esoc-socialactions-comment .cs-icon-comment': 'onClickComments'
    },
    log: Log,
    commonUtil: CommonUtil,
    constructor: function CommentDialogView(options) {
      options = options || {};
      options.connector = options.connector ? options.connector :
                          options.context.getObject(ConnectorFactory);
      if (!options.model) {
        options.model = options.context.getModel(CommentModelFactory, {
          attributes: { id: options.nodeid },
          connector: options.connector
        });
        options.model.ensureFetched();
      } else {
        this.updateSocailActions(options.model);
        var wnd_comments_validated = options.model.attributes.wnd_comments > 0 ?
                                     options.model.attributes.wnd_comments > 99 ? '99+' :
                                     options.model.attributes.wnd_comments : '';
        options.model = new CommentDialogModel({
          wnd_comments_validated: wnd_comments_validated,
          wnd_comments: options.model.attributes.wnd_comments,
          socialactions: options.model.attributes.socialactions,
          id: options.model.attributes.id,
          showSocialActions: options.model.attributes.showSocialActions
        }, {
          connector: options.connector,
          csid: options.nodeid
        });

      }
      Marionette.ItemView.prototype.constructor.call(this, options);
      this.model.on('change', this.render, this);
      this.model.on('error', this.errorHandle, this);
    },
    errorHandle: function (model, response) {
      var errText = response.responseJSON ?
                    ( response.responseJSON.errorDetail ? response.responseJSON.errorDetail :
                      response.responseJSON.error) :
                    Lang.defaultErrorMessageCommentsFetch;
      self.log.info("Error Occured :" + errText);
    },
    updateSocailActions: function (nodeModel) {
      var showSocialActions = !!nodeModel.actions.get('comment');
      nodeModel.attributes.showSocialActions = showSocialActions;
      nodeModel.attributes.socialactions = {
        "attachementsEnabled": showSocialActions,
        "chatEnabled": showSocialActions,
        "commentingOpen": showSocialActions,
        "commentsEnabled": showSocialActions,
        "CSID": nodeModel.attributes.id,
        "likesEnabled": showSocialActions,
        "taggingEnabled": showSocialActions,
        "threadingEnabled": showSocialActions,
        "shortcutEnabled": showSocialActions
      };

    },
    onClickComments: function (e) {

      var commentConfig = {
            tablecellwidget: true,
            currentNodeModel: this.model,
            baseElement: this.$el.find(".esoc-socialactions-comment"),
            currentTarget: e.currentTarget,
            socialActionsInstanse: this,
            nodeID: this.options.CSID,
            context: this.options.context
          },
          csId          = commentConfig.nodeID;
      commentConfig.csId = csId;
      var ajaxParams = {
        "url": Url.combine(CommonUtil.getV2Url(this.options.connector.connection.url),
            "nodes", csId),
        "type": "GET",
        "connector": this.options.connector,
        "currentNodeModel": this.model,
        "requestType": "updateCommentCount"
      };
      CommonUtil.updateAjaxCall(ajaxParams);

      var restUrl = Url.combine(this.options.connector.connection.url,
              this.commonUtil.REST_URLS.csGetROI) + "CSID=" + csId;
      var responseData;

      $.ajax(this.options.connector.extendAjaxOptions({
        type: "GET",
        async: false,
        cache: false,
        url: restUrl,
        success: function (response) {
          responseData = JSON.parse(JSON.stringify(response.available_settings));
        },
        error: function () {
          self.log.error("Error while getting available settings");
        }
      }));
      this.model.attributes.socialactions = responseData;
      commentConfig.socialActionsInstanse.options.connector.connection.url = this.options.connector.connection.url;
      var commentsCollectionWidget = new CommentsCollectionWidget(commentConfig);
      commentsCollectionWidget.show();
      $(document.activeElement).trigger("blur");
    }
  });
  return CommentDialogView;
});

/**
 * This controls display the social button along with comment count.
 */

csui.define('esoc/widgets/utils/commentdialog/commentdialog',[
  'module',
  'require',
  'csui/lib/jquery',
  'csui/lib/marionette',
  'csui/utils/connector',
  'esoc/widgets/utils/commentdialog/commentdialog.view',
  'csui/utils/contexts/factories/connector'
], function (module, _require, $, Marionette, Connector, CommentDialogView, ConnectorFactory) {
  var CommentsDialog = {
    getCommentButton: function (options) {
      if (!options.connector) {
        options.connector = options.context.getObject(ConnectorFactory);
      }
      $(options.placeholder).ready(function () {
        var contentRegion = new Marionette.Region({
          el: $(options.placeholder)
        });
        var commentDialogView = new CommentDialogView({
          connector: options.connector,
          CSID: options.nodeid,
          baseElement: $(options.placeholder),
          context: options.context
        });
        contentRegion.show(commentDialogView);
      });
    }
  };
  return CommentsDialog;
});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/utils/command/comment/comment.toolitem',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "";
},"3":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.icon : depth0),{"name":"if","hash":{},"fn":this.program(4, data, 0),"inverse":this.program(12, data, 0)})) != null ? stack1 : "");
},"4":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.renderIconAndText : depth0),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.program(7, data, 0)})) != null ? stack1 : "");
},"5":function(depth0,helpers,partials,data) {
    var helper;

  return "      <a href=\"#\" class=\"needsclick csui-acc-focusable\" tabindex=\"-1\" data-cstabindex=\"-1\"\r\n         aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\">\r\n        <span class=\""
    + this.escapeExpression(((helper = (helper = helpers.icon || (depth0 != null ? depth0.icon : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"icon","hash":{}}) : helper)))
    + "\" data-cstabindex=\"-1\"></span>\r\n        <span>"
    + this.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"name","hash":{}}) : helper)))
    + "</span>\r\n        <span title=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\"\r\n              class=\"cs-text wnd-comment-count wnd_comments_validated\" data-csid=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_validated || (depth0 != null ? depth0.wnd_comments_validated : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_validated","hash":{}}) : helper)))
    + "</span>\r\n      </a>\r\n";
},"7":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.renderTextOnly : depth0),{"name":"if","hash":{},"fn":this.program(8, data, 0),"inverse":this.program(10, data, 0)})) != null ? stack1 : "");
},"8":function(depth0,helpers,partials,data) {
    var helper;

  return "        <a href=\"#\" class=\"needsclick csui-acc-focusable\" tabindex=\"-1\" data-cstabindex=\"-1\"\r\n           aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\">\r\n          <span>"
    + this.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"name","hash":{}}) : helper)))
    + "</span>\r\n          <span title=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\"\r\n                class=\"cs-text wnd-comment-count wnd_comments_validated\" data-csid=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_validated || (depth0 != null ? depth0.wnd_comments_validated : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_validated","hash":{}}) : helper)))
    + "</span>\r\n        </a>\r\n";
},"10":function(depth0,helpers,partials,data) {
    var helper;

  return "        <a href=\"#\" title=\""
    + this.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"name","hash":{}}) : helper)))
    + "\" class=\"needsclick csui-acc-focusable\" tabindex=\"-1\"\r\n           data-cstabindex=\"-1\" aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\">\r\n          <span class=\""
    + this.escapeExpression(((helper = (helper = helpers.icon || (depth0 != null ? depth0.icon : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"icon","hash":{}}) : helper)))
    + "\" data-cstabindex=\"-1\"></span>\r\n          <span title=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\"\r\n                class=\"cs-text wnd-comment-count wnd_comments_validated\" data-csid=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_validated || (depth0 != null ? depth0.wnd_comments_validated : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_validated","hash":{}}) : helper)))
    + "</span>\r\n        </a>\r\n";
},"12":function(depth0,helpers,partials,data) {
    var helper;

  return "    <a href=\"#\" class=\"needsclick csui-acc-focusable\" tabindex=\"-1\" data-cstabindex=\"-1\"\r\n       aria-label=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\">\r\n      <span>"
    + this.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"name","hash":{}}) : helper)))
    + "</span>\r\n      <span title=\""
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_title || (depth0 != null ? depth0.wnd_comments_title : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_title","hash":{}}) : helper)))
    + "\"\r\n            class=\"cs-text wnd-comment-count wnd_comments_validated\" data-csid=\""
    + this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"id","hash":{}}) : helper)))
    + "\">"
    + this.escapeExpression(((helper = (helper = helpers.wnd_comments_validated || (depth0 != null ? depth0.wnd_comments_validated : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0,{"name":"wnd_comments_validated","hash":{}}) : helper)))
    + "</span>\r\n    </a>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return ((stack1 = helpers['if'].call(depth0,(depth0 != null ? depth0.isSeparator : depth0),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0)})) != null ? stack1 : "");
}});
Handlebars.registerPartial('esoc_widgets_utils_command_comment_comment.toolitem', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('esoc/widgets/utils/command/comment/comment.toolitem.view',["module", "csui/lib/jquery", "csui/lib/underscore",
  "csui/utils/log",
  "hbs!esoc/widgets/utils/command/comment/comment.toolitem",
  "csui/controls/toolbar/toolitem.view",
  "i18n!esoc/widgets/tablecell/nls/lang"
], function (module, $, _, log, template, ToolItemView, Lang) {

  var CommentToolItemView = ToolItemView.extend({

    tagName: 'li',

    template: template,

    templateHelpers: function () {
      var commentCount = this.model.attributes.commandData.wnd_comments;
      var data = {
        renderIconAndText: this.options.renderIconAndText === true,
        renderTextOnly: this.options.renderTextOnly === true,
        isSeparator: this.model.isSeparator(),
        id: this.model.attributes.commandData.id,
        wnd_comments_title: this._getCommentsTitle(commentCount),
        wnd_comments_validated: commentCount > 99 ? '99+' : (commentCount > 0 ? commentCount : "")
      };
      return data;
    },

    constructor: function CommentToolItemView() {
      ToolItemView.prototype.constructor.apply(this, arguments);
    },

    /* TODO this should go to the widgets/common/util class and be used in all places, also the wnd_comments_validated */
    /* always return a non-empty string for aria-label and title */
    _getCommentsTitle: function(commentCount) {
      Number.isInteger = Number.isInteger || function(value) {
        return typeof value === 'number' &&
          isFinite(value) &&
          Math.floor(value) === value;
      };
      commentCount = Number.isInteger(commentCount) ? commentCount : 0;

      /* TODO should rather use _.str.sformat() and texts with placeholders in the lang.js files */
      if (commentCount !== 1) {
        return commentCount + " " + Lang.commentCount;
      } else {
        return "1 " + Lang.oneComment;
      }
    }
  });

  return CommentToolItemView;

});


csui.define('esoc/commands/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

csui.define('esoc/commands/nls/root/lang',{

  commentLabel: "Comment"

});


csui.define('esoc/commands/comment/comment.command',["require", 'csui/lib/marionette', 'csui/lib/jquery',
  'csui/lib/underscore', 'csui/utils/commandhelper', 'csui/utils/commands/node',
  'csui/utils/command.error', 'csui/utils/url', 'i18n!esoc/commands/nls/lang'
], function (require, Marionette, $, _, CommandHelper, NodeCommand, CommandError, Url, lang) {
  'use strict';

  var CommentCommand = NodeCommand.extend({

    constructor: function CommentCommand(attributes, options) {
      NodeCommand.prototype.constructor.call(this, arguments);
      var self = this;
      csui.require(
          ['esoc/widgets/utils/command/comment/comment.toolitem.view'],
          function (CommentToolItemView) {
            self.customView = CommentToolItemView;
          });
    },

    defaults: {
      signature: "Comment",
      command_key: ['comment', 'Comment'],
      scope: "single",
      name: lang.name,
      verb: lang.verb,
      doneVerb: lang.doneVerb
    },

    //only one node allowed at a time
    enabled: function (status) {
      var nodeModel;
      if (status && status.data) {
        nodeModel = status.data.useContainer ? status.container :
                    CommandHelper.getJustOneNode(status);
        if (!!nodeModel) {
          if (status.toolItem) {
            status.toolItem.set({
              commandData: _.defaults({
                wnd_comments: nodeModel.get('wnd_comments'),
                id: nodeModel.get('id'),
                customView: this.customView
              }, status.toolItem.get('commandData'))
            });
          }
        }
      } else {
        nodeModel = CommandHelper.getJustOneNode(status);
      }
      return nodeModel && !!nodeModel.actions.get('comment');
    },

    execute: function (status, options) {
      var self      = this,
          nodeModel = (status.data && status.data.useContainer) ?
                      status.container :
                      CommandHelper.getJustOneNode(status),
          deferred  = $.Deferred();
      csui.require(['esoc/widgets/socialactions/commentscollectionwidget', 'esoc/widgets/common/util'],
          function (CommentsCollectionWidget, CommonUtil) {
            var config        = (typeof window.require !== "undefined") ?
                                window.require.s.contexts._.config :
                                window.csui.require.s.contexts._.config,
                commentConfig = _.extend(config, {
                  tablecellwidget: true,
                  currentNodeModel: nodeModel,
                  nodeID: nodeModel.get('id'),
                  CSID: nodeModel.get('id'),
                  context: status.context,
                  baseElement: status.toolItemView.$el,
                  connector: nodeModel.connector,
                  currentTarget: document.activeElement
                }),
                restUrl       = Url.combine(nodeModel.connector.connection.url,
                        CommonUtil.REST_URLS.csGetROI) + "CSID=" + commentConfig.CSID,
                responseData;

            nodeModel.connector.makeAjaxCall({
              type: "GET",
              cache: false,
              url: restUrl,
              success: function (response) {
                responseData = JSON.parse(JSON.stringify(response.available_settings));

                nodeModel.attributes.socialactions = responseData;
                commentConfig.socialActions = responseData;
                commentConfig.baseElement.dataset = {value: nodeModel.get('id')};
                var commentsCollectionWidget = new CommentsCollectionWidget(commentConfig);
                commentsCollectionWidget.show();

                deferred.resolve();
              },
              error: function (jqXHR, exception) {
                deferred.reject(new CommandError(exception));
              }
            });
          }, function (error) {
            deferred.reject(new CommandError(error));
          });

          return deferred.promise();
    }
  });

  return CommentCommand;

});

csui.define('esoc/commands/open.roi',['csui/utils/commandhelper', 'csui/utils/commands/open.classic.page'
], function (CommandHelper, OpenClassicPageCommand) {

  var OpenROICommand = OpenClassicPageCommand.extend({

    defaults: {
      signature: 'OpenROI'
    },

    enabled: function (status) {
      var node = CommandHelper.getJustOneNode(status);
      return node && node.get('type') === 952;
    },

    getUrlQueryParameters: function (node, options) {
      return {
        func: 'll',
        objAction: 'info',
        objId: node.get('id'),
        nexturl: location.href
      };
    }

  });

  return OpenROICommand;

});

csui.define('esoc/widgets/utils/esocactionitems',[],function () {
  'use strict';
  return [
    {
      type: 952,
      signature: 'OpenROI',
      sequence: 20
    }
  ];

});


csui.define('css!esoc/widgets/utils/esocnodesprites',[],function(){});
csui.define('esoc/widgets/utils/esocnodesprites',['css!esoc/widgets/utils/esocnodesprites'], function () {
  'use strict';
  return [
    {
      // pulse ROC
      equals: {type: 951},
      className: 'csui-icon esoc-icon-pulse-roc',
      mimeType: 'Remote Object Container',
      sequence: 100
    },
    {
      // pulse ROI
      equals: {type: 952},
      className: 'csui-icon esoc-icon-pulse-roi',
      mimeType: 'Remote Object Instance',
      sequence: 100
    },
    {
      // activity manager
      equals: {type: 907},
      className: 'csui-icon esoc-icon-activity-manager',
      sequence: 1000
    }
  ];

});


/* START_TEMPLATE */
csui.define('hbs!esoc/widgets/socialactions/socialactions',['module','hbs','csui/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return "    <span class=\"esoc-socialactions-getcomments\" data-value=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.socialactions : depth0)) != null ? stack1.CSID : stack1), depth0))
    + "\">\r\n            <div class=\"binf-btn binf-btn-primary\"> "
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.messages : depth0)) != null ? stack1.comments : stack1), depth0))
    + " </div>\r\n        </span>\r\n";
},"3":function(depth0,helpers,partials,data) {
    return "      <span>\r\n        <div class=\"binf-btn binf-btn-success\">Like</div>\r\n      </span>\r\n";
},"5":function(depth0,helpers,partials,data) {
    return "      <span>\r\n        <div class=\"binf-btn btn-binf-warning\">Tag</div>\r\n      </span>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<span>\r\n  <div class=\"esoc-error-socialactions\" style=\"display: none;\">\r\n    <div class=\"binf-panel-danger\">\r\n      <div class=\"binf-panel-heading\">\r\n        <h4 class=\"binf-panel-title\"></h4>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.socialactions : depth0)) != null ? stack1.commentsEnabled : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  <!--\r\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.socialactions : depth0)) != null ? stack1.likesEnabled : stack1),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.socialactions : depth0)) != null ? stack1.taggingEnabled : stack1),{"name":"if","hash":{},"fn":this.program(5, data, 0),"inverse":this.noop})) != null ? stack1 : "")
    + "  -->\r\n</span>\r\n";
}});
Handlebars.registerPartial('esoc_widgets_socialactions_socialactions', t);
return t;
});
/* END_TEMPLATE */
;
/**
 * Verify whether the social actions on the perticular ROI is enable or not,
 * based on this, render respective social action HTML fragment.
 */

csui.define('esoc/widgets/socialactions/socialactions.view',[
  'csui/lib/jquery',
  'csui/lib/underscore',
  'csui/lib/handlebars',
  'csui/lib/marionette',
  'esoc/widgets/socialactions/socialactions.model',
  'i18n!esoc/widgets/socialactions/nls/lang',
  'hbs!esoc/widgets/socialactions/socialactions',
  'esoc/widgets/socialactions/commentscollectionwidget',
  'css!esoc/widgets/socialactions/socialactions.css'
], function ($, _, Handlebars, Marionette, SocialActionsModel, lang,
    SocialActionsItemsTemplate, CommentsCollectionWidget) {
  var self = null;
  var SocialActionsItemView = Marionette.ItemView.extend({
    // Outermost parent element should contain a unique widget-specific class
    className: 'esoc-socialactions-wrapper panel panel-default',
    template: SocialActionsItemsTemplate,
    templateHelpers: function () {
      return {
        messages: {
          comments: lang.comments
        }
      };
    },
    initialize: function (options) {
      this.options = options;
      self = this;
      $(document).on('keydown click', this.closeCommentDialog);
    },
    events: {
      "click .esoc-socialactions-getcomments": "getComments",
      "click .esoc-socialactions-getlikes": "getLikes", //Can be used later when working on Like and Tags Widgets...
      "click .esoc-socialactions-gettags": "getTags"
    },
    constructor: function SocialActionsItemView(options) {
      options = options || {};
      // If the model has not been passed to the view, application widgets
      // should create their models automatically from options
      if (!options.model) {
        options.model = new SocialActionsModel(undefined, {
          connector: options.connector,
          rockey: options.rockey,
          roid: options.roid,
          csid: options.csid
        });
        // Ensure that the data will are fresh at the beginning
        options.model.fetch();
      }
      // Models and collections passed via options to the parent constructor
      // are wired to
      Marionette.ItemView.prototype.constructor.call(this, options);
      // Whenever the properties of the model change, re-render the view
      this.model.on('change', this.render, this);
      this.model.on('error', this.errorHandle, this);
    },
    errorHandle: function (model, response) {
      //TODO: this is a temporary fix for this error handling, LA will decide where and how to render this error message.
      this.$el.find(".esoc-error-socialactions").show();
      this.$el.find(".binf-panel-title").html(response.responseJSON.error);
    },
    getComments: function (e) {
      var commentConfig            = {
            baseElement: this.$el.find(".esoc-socialactions-getcomments"),
            socialActionsInstanse: this,
            maxMessageLength: this.options.maxMessageLength,
            context: this.options.context
          },
          commentsCollectionWidget = new CommentsCollectionWidget(commentConfig);
      commentsCollectionWidget.show();
    }
  });
  return SocialActionsItemView;
});

/**
 * SocialActionsMainWidget is for initiating all the
 * social actions (comments, likes, tags, chat, etc.,)
 * based on the permissions.
 */

csui.define('esoc/widgets/socialactions/socialactions.main',[
  'module',
  'require',
  'csui/lib/jquery',
  'csui/lib/marionette',
  'csui/utils/connector',
  'csui/utils/namedsessionstorage',
  'esoc/widgets/socialactions/socialactions.view',
  'csui/utils/contexts/factories/connector'
], function (module, _require, $, Marionette, Connector, NamedSessionStorage,
    SocialActionsItemView, ConnectorFactory) {
  function SocialActionsMainWidget(options) {
    if (!options.connector) {
      options.connector = options.context.getObject(ConnectorFactory);
    }
    var namedSessionStorage = new NamedSessionStorage();
    $(options.placeholder).ready(function () {
      $(options.placeholder).each(function () {
        var contentRegion = new Marionette.Region({
          el: $(this)
        });
        var rockey = $(this).data("rockey");
        var roid = $(this).data("roid");
        if (namedSessionStorage.get(rockey + roid) !== undefined &&
            namedSessionStorage.get(rockey + roid).length > 0) {
          $(this).attr("data-csid", namedSessionStorage.get(rockey + roid));
        }
        var socialActionsItemsView = new SocialActionsItemView({
          connector: options.connector,
          context: options.context,
          rockey: rockey,
          roid: roid,
          csid: $(this).data("csid"),
          baseElement: $(this),
          maxMessageLength: options.config_settings.maxMessageLength
        });
        contentRegion.show(socialActionsItemsView);
      });
    });
  }

  return SocialActionsMainWidget;
});

csui.define('esoc/widgets/activityfeedwidget/activityfeedwidget.view',[
  'csui/lib/underscore',
  'csui/lib/handlebars',
  "csui/lib/marionette",
  'esoc/widgets/activityfeedwidget/object/object.view',
  'csui/controls/tile/tile.view',
  'csui/behaviors/limiting/limiting.behavior',
  'csui/controls/tile/behaviors/expanding.behavior',
  'csui/behaviors/default.action/default.action.behavior',
  "csui/lib/jquery",
  "csui/utils/connector",
  "esoc/widgets/activityfeedwidget/activityfeed.model",
  "esoc/widgets/activityfeedwidget/activityfeed.view",
  "esoc/widgets/activityfeedwidget/activityfeedwithfilter.view",
  "esoc/widgets/activityfeedwidget/activityfeedfactory",
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/lang',
  'esoc/widgets/activityfeedwidget/util',
  'csui/models/mixins/fetchable/fetchable.mixin',
  'csui/models/browsable/client-side.mixin',
  "css!esoc/widgets/activityfeedwidget/activityfeed.css"
], function (_, Handlebars, Marionette, ObjectView, TileView,
    LimitingBehavior, ExpandingBehavior, DefaultActionBehavior, $, Connector, ActivityFeedModel,
    ActivityFeedView, ActivityFeedWithFilterView, ActivityFeedFactory, lang, Util, FetchableMixin,
    ClientSideBrowsableMixin) {

  var ActivityFeedWidget = TileView.extend({
    constructor: function ActivityFeedWidget(options) {
      options || (options = {}); // /app data.options;
      options.title = options.title || lang.dialogTitle;
      options.icon = options.titleBarIcon || 'title-activityfeed';
      Util.commonUtil.fillDefaultActivityOptions(options);
      TileView.prototype.constructor.apply(this, arguments);
    },
    initialize: function (options) {
      options = options.data ? _.extend(options, options.data) : options;
      delete options["data"];
      this.options = options;

      if (this.options.feedtype !== undefined) {
        ActivityFeedFactory.prototype.propertyPrefix = Util.commonUtil.getActivityWidgetId(
            this.options);
        ActivityFeedFactory.prototype.uniqueid = Util.commonUtil.getActivityWidgetId(this.options);
      }

      if (this.options.wrapperClass !== undefined) {
        this.$el.addClass(this.options.wrapperClass);
      }
      this.collection = options.context.getCollection(ActivityFeedFactory, options);
      this.contentViewOptions = _.extend(this.options, {collection: this.collection});

      ClientSideBrowsableMixin.mixin(ActivityFeedFactory); //TODO: check in /app, if not useful remove.
      FetchableMixin.mixin(ActivityFeedFactory);
    },
    childEvents: {
      'click:item': 'onClickItem'
    },
    events: {
      "keydown .icon-tileExpand": "onKeydownHeader"
    },
    contentView: ObjectView,
    behaviors: {

      Expanding: {
        titleBarIcon: function () {
          return this.options.icon || 'title-activityfeed';
        },
        behaviorClass: ExpandingBehavior,
        expandedView: ActivityFeedWithFilterView,
        dialogTitle: function () {
          return this.options.title || lang.dialogTitle;
        },
        dialogTitleIconRight: 'icon-tileCollapse',
        dialogClassName: 'activityfeed-expand esoc',
        expandedViewOptions: function () {
          return _.extend(this.options, {collection: this.collection});
        }
      },
      DefaultAction: {
        behaviorClass: DefaultActionBehavior
      }
    },

    onClickItem: function (target) {
      //this.trigger('click:item');
      this.triggerMethod('execute:defaultAction', target.model);
    },
    onClickHeader: function (target) {
      this.triggerMethod('expand');
    },

    onKeydownHeader: function (event) {
      var keyCode = event.keyCode || event.which;
      if (keyCode === 32 || keyCode === 13) {
        this.triggerMethod('expand');
      }
    },

    onDomRefresh: function () {
      var ele = this.$el.find(".icon-tileExpand")
      ele.attr("title",lang.expandTitle)
      if (ele && $(ele).length) {
        $(ele[0]).attr("tabindex", 0)
      }
    }
  });
  return ActivityFeedWidget;
});

csui.define('esoc/widgets/tablecell/server.adaptor.mixin',[
  'csui/lib/underscore',
  'csui/lib/backbone',
  'csui/utils/url',
  'esoc/widgets/common/util'
], function (_, Backbone, Url, CommonUtil) {
  'use strict';

  var ServerAdaptorMixin = {
    mixin: function (prototype) {
      return _.extend(prototype, {
        makeServerAdaptor: function (options) {
          return this;
        },

        url: function () {
          var csId = this.attributes.csId,
              currentNodeModel = this.attributes.currentNodeModel,
              connector = this.connector,
              parentObject = currentNodeModel.get("parent_id"),
              parentId     = !!parentObject && parentObject instanceof Object ? parentObject.id :
                             parentObject,
              nodesUrl     = CommonUtil.updateQueryStringValues(
                  Url.combine(CommonUtil.getV2Url(connector.connection.url),
                      "nodes", parentId, "nodes"), "where_name", currentNodeModel.get("name")),
              ajaxParams   = {
                "url": nodesUrl,
                "type": "GET",
                "currentNodeModel": currentNodeModel,
                "connector": connector,
                "requestType": "getCommentCount"
              };
          CommonUtil.updateAjaxCall(ajaxParams);
          return Url.combine(currentNodeModel.connector.connection.url,
                    CommonUtil.REST_URLS.csGetROI) + "CSID=" + csId;

        },

        sync: function (method, model, options) {
            options.cache = false;
            return Backbone.Model.prototype.sync.apply(this, arguments);
        }
      });
    }

  };

  return ServerAdaptorMixin;
});

csui.define('esoc/widgets/tablecell/tablecell.model',['csui/lib/backbone',
  'csui/models/mixins/expandable/expandable.mixin',
  'csui/models/mixins/resource/resource.mixin',
  'csui/models/mixins/uploadable/uploadable.mixin',
  'csui/models/mixins/including.additional.resources/including.additional.resources.mixin',
  'esoc/widgets/tablecell/server.adaptor.mixin'
], function (Backbone, ExpandableMixin, ResourceMixin,
    UploadableMixin, IncludingAdditionalResourcesMixin, ServerAdaptorMixin) {
  'use strict';

  var TableCellModel = Backbone.Model.extend({
    constructor: function TableCellModel(attributes, options) {
      Backbone.Model.prototype.constructor.call(this, attributes, options);

      this.makeResource(options)
          .makeIncludingAdditionalResources(options)
          .makeUploadable(options)
          .makeExpandable(options)
          .makeServerAdaptor(options);
    },

    clone: function () {
      return new this.constructor(this.attributes, {
        connector: this.connector
      });
    }
  });

  IncludingAdditionalResourcesMixin.mixin(TableCellModel.prototype);
  ExpandableMixin.mixin(TableCellModel.prototype);
  UploadableMixin.mixin(TableCellModel.prototype);
  ResourceMixin.mixin(TableCellModel.prototype);
  ServerAdaptorMixin.mixin(TableCellModel.prototype);

  return TableCellModel;
});

csui.define('esoc/widgets/tablecell/tablecell.view',['csui/lib/underscore', 'csui/lib/jquery', 'csui/lib/handlebars', 'csui/lib/marionette',
  'csui/utils/contexts/factories/connector',
  'csui/controls/table/cells/templated/templated.view',
  'csui/controls/table/cells/cell.registry',
  'csui/controls/table/table.columns',
  'csui/utils/url',
  'csui/utils/log',
  'hbs!esoc/widgets/tablecell/impl/tablecell',
  'esoc/widgets/socialactions/commentscollectionwidget',
  'esoc/widgets/tablecell/tablecell.model',
  'esoc/widgets/common/util',
  'i18n!esoc/widgets/tablecell/nls/lang',
  'css!esoc/widgets/tablecell/impl/social.css',
  'css!esoc/widgets/socialactions/socialactions.css'
], function (_, $, Handlebars, Marionette, ConnectorFactory, TemplatedCellView, cellViewRegistry, tableColumns, Url,
    Log, template, CommentsCollectionWidget, TableCellModel,CommonUtil, lang) {

  // Writes the `thenValue` to the output if the `flag` converts to `true`,
  // otherwise writes the `elseValue`.  If no `elseValue` is provided,
  // nothing will be written out.
  Handlebars.registerHelper('value-if', function (flag, thenValue, elseValue) {
    // The last parameter is a hash of named parameters, which are not used
    // here; use it to simulate the undefined default value for the `elsevalue`
    if (_.isObject(elseValue) && _.isObject(elseValue.hash)) {
      elseValue = '';
    }
    return flag ? thenValue : elseValue;
  });

  // Declares a column which renders its contents by a template and uses
  // the social information as-is inside the template
  var TableCellView = TemplatedCellView.extend({

        // The table cell will obtain a CSS class `esoc-column-social`
        // automatically; we just add a class provided by the CS UI Widgets
        // to prevent the icons to be wrapped on multiple lines
        className: 'csui-nowrap',

        // Point to the Handlebars template rendering the HTML view
        template: template,
        title: '',  // do not display the column header

        // Declare events triggered by clicking on the rendered icons; they
        // can be caught by the caller and they are handled in this object too

        events: {
          "keydown": "onKeyInView",
          "click .esoc-socialactions-comment .cs-icon-comment": "onClickComment"
        },

        log: Log,
        commonUtil: CommonUtil,

        // Always declare the named constructor function to see the object name
        // in the web browser debugger
        constructor: function SocialColumnHandler() {
          TemplatedCellView.prototype.constructor.apply(this, arguments);
          // Whenever the social properties change, re-render the table cell;
          // this could be optimized to re-render just the elements which show
          // the changing data by using Backbone.ModelBinder, for example
          this.listenTo(this.model, 'change', this.render);
        },

        getValueData: function () {
          // set the computed social settings and return the model
          var actions = this.model && this.model.collection && this.model.collection.delayedActions,
              that    = this;
          this.updateSocailActions(this.model);
          actions && this.listenTo(actions, 'sync', function () {
            that.updateSocailActions(that.model);
            that.render();
          });
          this.model.attributes.messages = lang;
          this.model.attributes.wnd_comments_title = this.model.attributes.wnd_comments > 0 ?
                                                     this.model.attributes.wnd_comments > 1 ?
                                                     this.model.attributes.wnd_comments + " " + lang.commentCount :
                                                     this.model.attributes.wnd_comments + " " + lang.oneComment : '';
          /* TODO: lang bundle has to move to templateHelpers*/
          this.model.attributes.wnd_comments_validated =
              this.model.attributes.wnd_comments > 0 ?
              this.model.attributes.wnd_comments > 99 ? '99' + '+' :
              this.model.attributes.wnd_comments : '';
          this.model.attributes.wnd_no_comments = lang.noComments;
          return this.model.toJSON();
        },

        updateSocailActions: function (nodeModel) {
          var showSocialActions = !!nodeModel.actions.get('comment');
          nodeModel.attributes.showSocialActions = showSocialActions;
          nodeModel.attributes.socialactions = {
            "attachementsEnabled": showSocialActions,
            "chatEnabled": showSocialActions,
            "commentingOpen": showSocialActions,
            "commentsEnabled": showSocialActions,
            "CSID": nodeModel.attributes.id,
            "likesEnabled": showSocialActions,
            "taggingEnabled": showSocialActions,
            "threadingEnabled": showSocialActions,
            "shortcutEnabled": showSocialActions
          };

        },

        // Clicking on the comment icon adds a comment to the item on behalf
        // of the current user and updates the like count accordingly
        onClickComment: function (e) {
          this.options.connector = this.options.connector ||
                                   this.options.context.getObject(ConnectorFactory);
          var commentConfig = {
                tablecellwidget: true,
                currentNodeModel: this.model,
                currentTarget: $(e.currentTarget).closest("td"),
                baseElement: this.$el.find(".esoc-socialactions-comment"),
                socialActionsInstanse: this
              },
              commentEle    = this.$el.find(".esoc-socialactions-comment")[0],
              csId          = commentEle.getAttribute("data-value") || commentEle.dataset.value;
          commentConfig.csId = csId;

          var tableCellModel = new TableCellModel({
            csId: csId,
            currentNodeModel: this.model
          }, {
            connector: this.options.connector
          });

          tableCellModel.fetch().then(function (response) {
            this.model.attributes.socialactions = response.available_settings;
            commentConfig.socialActionsInstanse.options.connector.connection.url = this.options.connector.connection.url;
            var commentsCollectionWidget = new CommentsCollectionWidget(commentConfig);
            commentsCollectionWidget.show();
          }.bind(this), function (jqXHR, statusText, error) {
            this.log.error("TEMP.  ERROR Getting available settings");
          }.bind(this));
        },

        onKeyInView: function (event) {
          if (event.keyCode === 32 || event.keyCode === 13) {
            // space or enter key
            var hasSocialActions = !!this.model.actions.get('comment') ? true : false;
            if (hasSocialActions) {
              event.preventDefault();
              this.onClickComment(event);
            }
          }
        }
      },
      {
        hasFixedWidth: true,
        columnClassName: 'csui-table-cell-esoc-social'
      }
  );

  // Register this cell view for the `social` column key, which the server
  // sends if the browsed container has it enabled, or which can be added
  // by the `featuredColumns` to the node table on the client side
  cellViewRegistry.registerByColumnKey('wnd_comments', TableCellView);

  // Make the column always appear behind the system columns, which have
  // sequence number < 100; custom columns have sequence number > 1000
  tableColumns.add({
    key: 'wnd_comments',
    sequence: 905,
    permanentColumn: true // don't wrap column due to responsiveness into details row
  });

});

csui.define('esoc/widgets/tablecell/thumbnail.content.view',['csui/lib/underscore', 'csui/lib/jquery', 'csui/lib/handlebars', 'csui/lib/marionette',
  'csui/utils/contexts/factories/connector',
  'csui/controls/thumbnail/content/content.registry',
  'csui/controls/thumbnail/thumbnail.content',
  'csui/utils/url',
  'csui/utils/log',
  'hbs!esoc/widgets/tablecell/impl/tablecell',
  'esoc/widgets/socialactions/commentscollectionwidget',
  'esoc/widgets/tablecell/tablecell.model',
  'esoc/widgets/common/util',
  'i18n!esoc/widgets/tablecell/nls/lang',
  'css!esoc/widgets/tablecell/impl/social.css',
  'css!esoc/widgets/socialactions/socialactions.css'
], function (_, $, Handlebars, Marionette, ConnectorFactory, ContentRegistry, thumbnailContent, Url,
    Log, template, CommentsCollectionWidget, TableCellModel, CommonUtil, lang) {

  // Writes the `thenValue` to the output if the `flag` converts to `true`,
  // otherwise writes the `elseValue`.  If no `elseValue` is provided,
  // nothing will be written out.
  Handlebars.registerHelper('value-if', function (flag, thenValue, elseValue) {
    // The last parameter is a hash of named parameters, which are not used
    // here; use it to simulate the undefined default value for the `elsevalue`
    if (_.isObject(elseValue) && _.isObject(elseValue.hash)) {
      elseValue = '';
    }
    return flag ? thenValue : elseValue;
  });

  // Declares a column which renders its contents by a template and uses
  // the social information as-is inside the template
  var ThumbnailContentView = Marionette.ItemView.extend({

        // The table cell will obtain a CSS class `esoc-column-social`
        // automatically; we just add a class provided by the CS UI Widgets
        // to prevent the icons to be wrapped on multiple lines
        className: 'csui-nowrap csui-thumbnail-test',

        // Point to the Handlebars template rendering the HTML view
        template: template,
        title: '',  // do not display the column header

        // Declare events triggered by clicking on the rendered icons; they
        // can be caught by the caller and they are handled in this object too

        events: {
          "keydown": "onKeyInView",
          "click .esoc-socialactions-comment .cs-icon-comment": "onClickComment"
        },

        log: Log,
        commonUtil: CommonUtil,

        // Always declare the named constructor function to see the object name
        // in the web browser debugger
        constructor: function ThumbnailContentView() {
           Marionette.ItemView.prototype.constructor.apply(this, arguments);
          // Whenever the social properties change, re-render the table cell;
          // this could be optimized to re-render just the elements which show
          // the changing data by using Backbone.ModelBinder, for example
          this.listenTo(this.model, 'change', this.render);
        },

        templateHelpers: function () {
          // set the computed social settings and return the model
          var actions = this.model.collection && this.model.collection.delayedActions,
              that    = this;
          this.updateSocailActions(this.model);
          actions && this.listenTo(actions, 'sync', function () {
            that.updateSocailActions(that.model);
            that.render();
          });
          this.model.attributes.messages = lang;
          this.model.attributes.wnd_comments_title = this.model.attributes.wnd_comments > 0 ?
                                                     this.model.attributes.wnd_comments > 1 ?
                                                     this.model.attributes.wnd_comments + " " + lang.commentCount :
                                                     this.model.attributes.wnd_comments + " " + lang.oneComment : '';
          /* TODO: lang bundle has to move to templateHelpers*/
          this.model.attributes.wnd_comments_validated =
              this.model.attributes.wnd_comments > 0 ?
              this.model.attributes.wnd_comments > 99 ? '99' + '+' :
              this.model.attributes.wnd_comments : '';
          this.model.attributes.wnd_no_comments = lang.noComments;
          return this.model.toJSON();
        },

        updateSocailActions: function (nodeModel) {
          var showSocialActions = !!nodeModel.actions.get('comment');
          nodeModel.attributes.showSocialActions = showSocialActions;
          nodeModel.attributes.socialactions = {
            "attachementsEnabled": showSocialActions,
            "chatEnabled": showSocialActions,
            "commentingOpen": showSocialActions,
            "commentsEnabled": showSocialActions,
            "CSID": nodeModel.attributes.id,
            "likesEnabled": showSocialActions,
            "taggingEnabled": showSocialActions,
            "threadingEnabled": showSocialActions,
            "shortcutEnabled": showSocialActions
          };

        },

        // Clicking on the comment icon adds a comment to the item on behalf
        // of the current user and updates the like count accordingly
        onClickComment: function (e) {
          if (!this.options.connector) {
            this.options.connector = this.options.context.getObject(ConnectorFactory);
          }
          var commentConfig = {
                tablecellwidget: true,
                currentNodeModel: this.model,
                currentTarget: $(e.currentTarget).closest("td"),
                baseElement: this.$el.find(".esoc-socialactions-comment"),
                socialActionsInstanse: this
              },
              commentEle    = this.$el.find(".esoc-socialactions-comment")[0],
              csId          = commentEle.getAttribute("data-value") || commentEle.dataset.value;
          commentConfig.csId = csId;

          var tableCellModel = new TableCellModel({
            csId: csId,
            currentNodeModel: this.model
          }, {
            connector: this.options.connector
          });

          tableCellModel.fetch().then(function (response) {
            this.model.attributes.socialactions = response.available_settings;
            commentConfig.socialActionsInstanse.options.connector.connection.url = this.options.connector.connection.url;
            var commentsCollectionWidget = new CommentsCollectionWidget(commentConfig);
            commentsCollectionWidget.show();
          }.bind(this), function (jqXHR, statusText, error) {
            this.log.error("TEMP.  ERROR Getting available settings");
          }.bind(this));
        },

        onKeyInView: function (event) {
          if (event.keyCode === 32 || event.keyCode === 13) {
            // space or enter key
            var hasSocialActions = !!this.model.actions.get('comment') ? true : false;
            if (hasSocialActions) {
              this.onClickComment(event);
            }
          }
        }
      },
      {
        hasFixedWidth: true,
        columnClassName: 'csui-table-cell-esoc-social'
      }
  );
  ContentRegistry.registerByKey('wnd_comments', ThumbnailContentView);
  // Make the column always appear behind the system columns, which have
  // sequence number < 100; custom columns have sequence number > 1000
  thumbnailContent.add({
    key: 'wnd_comments',
    sequence: 905,
    permanentColumn: true // don't wrap column due to responsiveness into details row
  });

});


csui.define('json!esoc/widgets/activityfeedwidget/activityfeedwidget.manifest.json',{
  "$schema": "http://opentext.com/cs/json-schema/draft-04/schema#",
  "title": "{{title}}",
  "description": "{{description}}",
  "kind": "tile",
  "schema": {
    "type": "object",
    "properties": {
      "wrapperClass": {
        "title": "{{wrapperClassTitle}}",
        "description": "{{wrapperClassDescription}}",
        "type": "string",
        "default": ""
      },
      "feedsize": {
        "title": "{{feedSizeTitle}}",
        "description": "{{feedSizeDescription}}",
        "type": "number",
        "default": 20
      },
      "feedtype": {
        "title": "{{feedTypeTitle}}",
        "description": "{{feedTypeDescription}}",
        "type": "string",
        "default": "all",
        "enum": [
          "all",
          "content",
          "status",
          "attribute"
        ]
      },
      "feedSettings": {
        "title": "{{feedSettingsTitle}}",
        "description": "{{feedSettingsDescription}}",
        "type": "object",
        "properties": {
          "enableComments": {
            "title": "{{enableCommentsTitle}}",
            "description": "{{enableCommentsDescription}}",
            "type": "boolean",
            "default": true
          },
          "enableFilters": {
            "title": "{{enableFiltersTitle}}",
            "description": "{{enableFiltersDescription}}",
            "type": "boolean",
            "default": false
          }
        }
      },
      "honorfeedsource": {
        "title": "{{honorfeedsourceTitle}}",
        "description": "{{honorfeedsourceDescription}}",
        "type": "boolean",
        "default": false
      },
      "headerView": {
        "title": "{{headerViewTitle}}",
        "description": "{{headerViewDescription}}",
        "type": "boolean",
        "default": false
      },
      "feedsource": {
        "title": "{{feedsourceTitle}}",
        "description": "{{feedsourceDescription}}",
        "type": "object",
        "properties": {
          "source": {
            "title": "{{sourceTitle}}",
            "description": "{{sourceDescription}}",
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "node",
              "pulsefrom"
            ]
          },
          "id": {
            "title": "{{feedsourceIdTitle}}",
            "description": "{{feedsourceIdDescription}}",
            "type": "string",
            "default": ""
          }
        }
      },
      "updatesfrom": {
        "title": "{{updatesfromTitle}}",
        "description": "{{updatesfromDescription}}",
        "type": "object",
        "properties": {
          "from": {
            "title": "{{fromTitle}}",
            "description": "{{fromDescription}}",
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "iamfollowing",
              "myfollowers",
              "following",
              "followers",
              "myupdates",
              "mentions",
              "myfavorites",
              "user",
              "group"
            ]
          },
          "id": {
            "title": "{{updatesfromIdTitle}}",
            "description": "{{updatesfromIdDescription}}",
            "type": "string",
            "default": ""
          }
        }
      },
      "config_settings": {
        "title": "{{configSettingsTitle}}",
        "description": "{{configSettingsDescription}}",
        "type": "object",
        "properties": {
          "feedsAutoRefreshWait": {
            "title": "{{feedsAutoRefreshWaitTitle}}",
            "description": "{{feedsAutoRefreshWaitDescription}}",
            "type": "number",
            "default": 60000
          },
          "maxMessageLength": {
            "title": "{{maxMessageLengthTitle}}",
            "description": "{{maxMessageLengthDescription}}",
            "type": "number",
            "default": 1000
          }
        }
      }
    }
  }
}
);

csui.define('esoc/widgets/activityfeedwidget/impl/nls/activityfeedwidget.manifest',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

csui.define('esoc/widgets/activityfeedwidget/impl/nls/root/activityfeedwidget.manifest',{
  title: "Activity Feed",
  description: "Shows activity feeds for the given option parameters.",
  wrapperClassTitle: "Wrapper class",
  wrapperClassDescription: "Wrapper class to be apply on top of activity feed list",
  feedSizeTitle: "Feed size",
  feedSizeDescription: "Number of feed items to be fetched per page",
  feedTypeTitle: "Feed type",
  feedTypeDescription: "Type of the feeds that should be consider",
  feedSettingsTitle: "Feed settings",
  feedSettingsDescription: "Feed settings to be considered",
  enableCommentsTitle: "Enable comments",
  enableCommentsDescription: "Whether to show comment button or not respective to each feed",
  enableFiltersTitle: "Enable filters",
  enableFiltersDescription: "Whether to show filter panel at left side or not in expanded view",
  honorfeedsourceTitle: "Honor feed source",
  honorfeedsourceDescription: "Whether to consider pulsefrom or consider widget options as feed" +
                              " source",
  headerViewTitle: "Header View",
  headerViewDescription: "Show feeds in horizontal view with dark theme",
  feedsourceTitle: "Feed source",
  feedsourceDescription: "Source for the feed to be considered",
  sourceTitle: "Source",
  sourceDescription: "Consider feed source as all or node or pulsefrom",
  feedsourceIdTitle: "id",
  feedsourceIdDescription: "Object id to be consider as feed source and applicable only when" +
                 " feedsource.source is either node or pulsefrom",
  updatesfromTitle: "Updates from",
  updatesfromDescription: "Feed updates from" +
                          " all/iamfollowing/myfollowers/following/followers/myupdates/mentions/myfavorites/user/group",

  fromTitle: "From",
  fromDescription: "Consider feed updates from different available sources",
  updatesfromIdTitle: "id",
  updatesfromIdDescription: "User id or group id and applicable only if updatesfrom.from is" +
                            " following/followers/user/group",
  configSettingsTitle: "Config settings",
  configSettingsDescription: "Widget instance level config settings",
  feedsAutoRefreshWaitTitle: "Activity feed auto refresh wait",
  feedsAutoRefreshWaitDescription: "Auto feed refresh interval time",
  maxMessageLengthTitle: "Maximum message length",
  maxMessageLengthDescription: "Maximum text length should be allowed while posting a comment or reply"
});


// Placeholder for the build target file; the name must be the same,
// include public modules from this component

csui.define('bundles/esoc-all',[

  // Controls
  'esoc/controls/userwidget/userwidget.view',
  'esoc/widgets/utils/commentdialog/commentdialog',
  'esoc/widgets/utils/commentdialog/commentdialog.view',

  'esoc/widgets/utils/command/comment/comment.toolitem.view',

  // Commands
  "esoc/commands/comment/comment.command",
  "esoc/commands/open.roi",

  // Actions
  "esoc/widgets/utils/esocactionitems",
  
  // NodeSprites
  "esoc/widgets/utils/esocnodesprites",

  // Widgets
  'esoc/widgets/socialactions/socialactions.main',
  'esoc/widgets/activityfeedwidget/activityfeedwidget.view',
  'esoc/widgets/activityfeedwidget/activityfeedfactory',
  'esoc/widgets/activityfeedwidget/activityfeedcontent',
  'esoc/widgets/tablecell/tablecell.view',
  'esoc/widgets/tablecell/thumbnail.content.view',
  'esoc/widgets/userwidget/userwidget',

  // Application widgets manifests
  'json!esoc/widgets/activityfeedwidget/activityfeedwidget.manifest.json',
  'i18n!esoc/widgets/activityfeedwidget/impl/nls/activityfeedwidget.manifest'

], {});

csui.require(['require', 'css'], function (require, css) {

  css.styleLoad(require, 'esoc/bundles/esoc-all', true);

});

