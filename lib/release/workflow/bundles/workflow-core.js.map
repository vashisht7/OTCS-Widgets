{"version":3,"file":"workflow-core.js","sources":["../../src/models/workitem/workitem.model.js","../../src/models/workflow/workflow.model.js","../../src/models/workitem/workitem.model.factory.js","../../src/commands/defaultactionitems.js","../../src/widgets/workitem/workitem/impl/nls/lang.js","../../src/widgets/workitem/workitem/impl/nls/root/lang.js","../../src/widgets/workitem/workitem/impl/nls/lang!i18n","../../src/commands/initiate.workflow/initiate.workflow.js","../../src/commands/edit.workflow.map/edit.workflow.map.js","../../src/commands/initiate.document.workflow/initiate.document.workflow.js","../../src/commands/open.workitem/open.workitem.js","../../src/commands/open.form/open.form.js","../../src/perspective/routers/workflow.perspective.router.js","workflow-core.js"],"names":[],"mappings":"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","sourcesContent":["csui.define('workflow/models/workitem/workitem.model',[\r\n  'csui/lib/backbone',\r\n  'csui/utils/url',\r\n  'csui/utils/base',\r\n  'csui/lib/underscore',\r\n  'csui/lib/jquery',\r\n  'csui/utils/contexts/factories/connector'\r\n], function (Backbone, Url, base, _, $, ConnectorFactory) {\r\n  'use strict';\r\n\r\n  var ActionModel = Backbone.Model.extend({\r\n\r\n    defaults: {\r\n      id: \"\",\r\n      key: \"\",\r\n      label: \"\",\r\n      custom: false\r\n    },\r\n    constructor: function ActionModel(attributes, options) {\r\n      Backbone.Model.prototype.constructor.apply(this, arguments);\r\n    },\r\n\r\n    parse: function (response, options) {\r\n      //parse the current action structure into a model structure\r\n      var key = response.key;\r\n      var label = response.label;\r\n      var id = options.custom ? \"custom-\" + key : \"standard-\" + key;\r\n      // Return the data\r\n      return {key: key, label: label, id: id, custom: options.custom};\r\n    }\r\n\r\n  });\r\n\r\n  var ActionsCollection = Backbone.Collection.extend({\r\n    model: ActionModel,\r\n\r\n    constructor: function ActionsCollection(models, options) {\r\n      Backbone.Collection.prototype.constructor.apply(this, arguments);\r\n    }\r\n  });\r\n\r\n  var FormModel = Backbone.Model.extend({\r\n\r\n    constructor: function FormModel(attributes, options) {\r\n      Backbone.Model.prototype.constructor.apply(this, arguments);\r\n    },\r\n\r\n    _saveChanges: function (changes, formView) {\r\n      var connector = formView.options.context.getObject(ConnectorFactory),\r\n          baseUrl   = connector.connection.url.replace('/v1', '/v2'),\r\n          formUrl   = (formView.alpaca.options.form.attributes.action).split(\"v1\"),\r\n          putUrl    = Url.combine(baseUrl, formUrl[1]),\r\n          dfd       = $.Deferred();\r\n\r\n      var ajaxOptions = {\r\n        type: 'PUT',\r\n        url: putUrl,\r\n        data: changes\r\n      };\r\n      connector.makeAjaxCall(ajaxOptions)\r\n          .done(_.bind(function () {\r\n            dfd.resolve();\r\n          }, this))\r\n          .fail(_.bind(function (jqxhr) {\r\n            // show the error\r\n            var error = new base.Error(jqxhr);\r\n            dfd.reject(error);\r\n          }, this));\r\n      return dfd;\r\n    }\r\n  });\r\n\r\n  var FormsCollection = Backbone.Collection.extend({\r\n    model: FormModel,\r\n\r\n    constructor: function FormsCollection(models, options) {\r\n      Backbone.Collection.prototype.constructor.apply(this, arguments);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Workitem model which represents an instance of a running workflow\r\n   * It contains the REST calls to get and set the workitem properties and to send on the workflow.\r\n   *\r\n   * The model fires the following events:\r\n   *\r\n   * workitem:sendon  This event is triggered when the workitem was successful sent on.\r\n   *\r\n   */\r\n  var WorkItemModel = Backbone.Model.extend({\r\n\r\n    defaults: {\r\n      process_id: 0,\r\n      subprocess_id: 0,\r\n      task_id: 0,\r\n      isDraft: false,\r\n      title: \"\",\r\n      instructions: \"\",\r\n      doc_id: 0,\r\n      mapsList: []\r\n    },\r\n\r\n    // Constructor gives an explicit name to the object in the debugger\r\n    constructor: function WorkItemModel(attributes, options) {\r\n      Backbone.Model.prototype.constructor.apply(this, arguments);\r\n\r\n      // Enable this model for communication with the CS REST API\r\n      if (options && options.connector) {\r\n        options.connector.assignTo(this);\r\n      }\r\n    },\r\n\r\n    url: function () {\r\n\r\n      var baseUrl = this.connector.connection.url;\r\n\r\n      var isDraft   = this.get('isDraft'),\r\n          mapsList  = this.get('mapsList'),\r\n          draftId   = this.get('draft_id'),\r\n          processId = draftId ? draftId : this.get('process_id');\r\n\r\n      if (isDraft || this.get('isDocDraft') || (mapsList && mapsList.length === 1)) {\r\n        // URL of the REST call to get the work item\r\n        return Url.combine(baseUrl,\r\n            '/forms/draftprocesses/update?draftprocess_id=' + processId);\r\n      } else {\r\n        // URL of the REST call to get the work item\r\n        return Url.combine(baseUrl,\r\n            '/forms/processes/tasks/update?process_id=' + this.get('process_id') +\r\n            '&subprocess_id=' +\r\n            this.get('subprocess_id') + '&task_id=' + this.get('task_id'));\r\n      }\r\n    },\r\n\r\n    parse: function (response) {\r\n      // Forms\r\n      this.forms = new FormsCollection(response.forms);\r\n\r\n      // Actions\r\n      this.actions = new ActionsCollection(response.data.actions, {parse: true, custom: false});\r\n      delete response.data.actions; //remove action property, so that it is not part of the general model\r\n\r\n      this.customActions = new ActionsCollection(response.data.custom_actions, {\r\n        parse: true,\r\n        custom: true\r\n      });\r\n      delete response.data.custom_actions;//remove action property, so that it is not part of the general model\r\n\r\n      // Return the data\r\n      return response.data;\r\n\r\n    },\r\n\r\n    isFetchable: function () {\r\n      var docId = this.get('doc_id');\r\n      return docId ? docId : !!this.get('process_id');\r\n    },\r\n\r\n    /**\r\n     * Clear the model and its collections\r\n     * @param options\r\n     */\r\n    reset: function (options) {\r\n      this.clear(options);\r\n\r\n      //reset the different collections\r\n      if (!_.isUndefined(this.actions)) {\r\n        this.actions.reset();\r\n      }\r\n      if (!_.isUndefined(this.customActions)) {\r\n        this.customActions.reset();\r\n      }\r\n      if (!_.isUndefined(this.forms)) {\r\n        this.forms.reset();\r\n      }\r\n    },\r\n\r\n    title: function () {\r\n      return this.get('title');\r\n    },\r\n\r\n    /**\r\n     * Sends an action to the server\r\n     * @param action Action object for the current action.\r\n     *\r\n     * @returns a promise object. This promise is resolved when the send action call returns from the server without an error.\r\n     * In the case of an error the promise will be rejected.\r\n     */\r\n    sendAction: function (action) {\r\n      // URL of the REST call to send the workflow with the correct action attached\r\n      var baseUrl   = this.connector.connection.url.replace('/v1', '/v2'),\r\n          putUrl    = Url.combine(baseUrl, 'processes', this.get('process_id'), 'subprocesses',\r\n              this.get('subprocess_id'), 'tasks', this.get('task_id')),\r\n          dfd       = $.Deferred(),\r\n          isDraft   = this.get('isDraft'),\r\n          mapsList  = this.get('mapsList'),\r\n          draftId   = this.get('draft_id'),\r\n          processId = draftId ? draftId : this.get('process_id');\r\n\r\n      // is it a draft process\r\n      if (isDraft || this.get('isDocDraft') || (mapsList && mapsList.length === 1)) {\r\n        putUrl = Url.combine(baseUrl, 'draftprocesses', processId);\r\n      }\r\n\r\n      // prepare request content - action\r\n      var content = {};\r\n      if (action.get('custom')) {\r\n        //custom action\r\n        content.custom_action = action.get('key');\r\n      } else {\r\n        //standard action\r\n        content.action = action.get('key');\r\n      }\r\n      // prepare request content - comment\r\n      // TODO: verify whether the 'comments_on' flag is set.\r\n      if (this.get('comment') !== undefined && this.get('comment').length > 0) {\r\n        content.comment = this.get('comment');\r\n      }\r\n      // prepare request content - assignee\r\n      if (action.get('key') === 'Delegate') {\r\n        content.assignee = this.get('assignee').toString();\r\n      }\r\n      // prepare request content - assignee and assignee option\r\n      if (action.get('key') === 'Review') {\r\n        content.assignee = this.get('assignee').toString();\r\n        if (_.isNumber(this.get('assigneeOption'))) {\r\n          content.assigneeOption = this.get('assigneeOption').toString();\r\n        } else {\r\n          // fall back to default value which is 0 == member accept\r\n          content.assigneeOption = '0';\r\n        }\r\n      }\r\n      // prepare request content - authentication\r\n      if (this.get('authentication') === true) {\r\n        content.authentication_info = this.get('authentication_info');\r\n      }\r\n\r\n      // prepare request content - duration and duration unit\r\n      if (this.get('duration') !== undefined && this.get('duration').length > 0) {\r\n        content.duration = this.get('duration');\r\n      }\r\n\r\n      if (this.get('duration_unit') !== undefined && this.get('duration_unit').length > 0) {\r\n        content.duration_unit = this.get('duration_unit');\r\n      }\r\n\r\n      var formData = new FormData();\r\n      formData.append('body', JSON.stringify(content));\r\n\r\n      var ajaxOptions = {\r\n        type: 'PUT',\r\n        url: putUrl,\r\n        data: formData,\r\n        contentType: false,\r\n        processData: false\r\n      };\r\n      this.connector.makeAjaxCall(ajaxOptions)\r\n          .done(_.bind(function (resp) {\r\n            dfd.resolve(resp.results);\r\n            //the workitem was sent on, fire an event\r\n            this.trigger('workitem:sendon');\r\n          }, this))\r\n          .fail(_.bind(function (resp) {\r\n            dfd.reject(resp);\r\n          }, this));\r\n\r\n      return dfd;\r\n    },\r\n\r\n    /**\r\n     * Sends a member accept action to the server to accept the current workitem.\r\n     *\r\n     * @returns a promise object. This promise is resolved when the accept call returns from the server without an error. In the case of an error\r\n     * the promise will be rejected.\r\n     */\r\n    sendMemberAcceptAction: function (acceptStatus) {\r\n      // URL of the REST call to send the workflow with the accept action\r\n      var baseUrl = this.connector.connection.url.replace('/v1', '/v2');\r\n      var putUrl = Url.combine(baseUrl, 'processes', this.get('process_id'), 'subprocesses',\r\n          this.get('subprocess_id'), 'tasks', this.get('task_id'));\r\n      acceptStatus = acceptStatus ? acceptStatus : \"accept\";\r\n      var content = {action: acceptStatus};\r\n      var formData = new FormData();\r\n      var dfd = $.Deferred();\r\n      formData.append('body', JSON.stringify(content));\r\n\r\n      var ajaxOptions = {\r\n        type: 'PUT',\r\n        url: putUrl,\r\n        data: formData,\r\n        contentType: false,\r\n        processData: false\r\n      };\r\n      this.connector.makeAjaxCall(ajaxOptions)\r\n          .done(_.bind(function () {\r\n            dfd.resolve();\r\n          }, this))\r\n          .fail(_.bind(function (resp) {\r\n            var response = JSON.parse(resp.responseText);\r\n            dfd.reject(response);\r\n          }, this));\r\n      return dfd;\r\n    }\r\n\r\n  });\r\n\r\n  return WorkItemModel;\r\n\r\n});\r\n\n","csui.define('workflow/models/workflow/workflow.model',[\r\n  'csui/lib/backbone',\r\n  'csui/utils/url',\r\n  'csui/utils/base',\r\n  'csui/lib/underscore',\r\n  'csui/lib/jquery',\r\n  'csui/utils/contexts/factories/connector'\r\n], function (Backbone, Url, base, _, $, ConnectorFactory) {\r\n  'use strict';\r\n\r\n  /**\r\n   * Workflow model which represents a workflow definition\r\n   * It contains the REST calls to create a draft process which could then be initiate.\r\n   * Other parts for the workflow are currently not implemented\r\n   */\r\n  var WorkflowModel = Backbone.Model.extend({\r\n\r\n    defaults: {\r\n      workflow_id: 0\r\n    },\r\n\r\n    // Constructor gives an explicit name to the object in the debugger\r\n    constructor: function WorkflowModel(attributes, options) {\r\n      Backbone.Model.prototype.constructor.apply(this, arguments);\r\n\r\n      // Enable this model for communication with the CS REST API\r\n      if (options && options.connector) {\r\n        options.connector.assignTo(this);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Create a draft process instance for the workflow\r\n     *\r\n     * @returns {*}\r\n     */\r\n    createDraftProcess: function () {\r\n      // URL of the REST call to create a draft process\r\n      var baseUrl = this.connector.connection.url.replace('/v1', '/v2');\r\n      var postUrl = Url.combine(baseUrl, 'draftprocesses');\r\n      var content = {workflow_id: this.get('workflow_id'),doc_ids : this.get('DocIDs')};\r\n      var formData = new FormData();\r\n      var dfd = $.Deferred();\r\n      formData.append('body', JSON.stringify(content));\r\n\r\n      // call REST service to create a draft processs\r\n      var ajaxOptions = {\r\n        type: 'POST',\r\n        url: postUrl,\r\n        data: formData,\r\n        contentType: false,\r\n        processData: false\r\n      };\r\n\r\n      this.connector.makeAjaxCall(ajaxOptions)\r\n          .done(_.bind(function (resp) {\r\n            // call successful, return draft process id\r\n            dfd.resolve(resp.results);\r\n          }, this))\r\n          .fail(_.bind(function (resp) {\r\n            // call failed, return error\r\n            dfd.reject(resp.responseJSON.error);\r\n          }, this));\r\n      return dfd;\r\n    },\r\n\r\n    /**\r\n     * list workflows for document node\r\n     *\r\n     * @returns {*}\r\n     */\r\n    getDocumentWorkflows: function () {\r\n\r\n      var generateUrl = function (attributes) {\r\n        var url         = '',\r\n            docIds      = (attributes.doc_id) ? attributes.doc_id.split(',') : attributes.DocIDs,\r\n            selectionID = $(\"#selectionID\");\r\n\r\n        _.each(docIds, function (docId) {\r\n          url = url.concat('doc_id').concat('=').concat(docId).concat('&');\r\n        });\r\n\r\n        if (attributes.ParentID) {\r\n          url = url.concat('parent_id=').concat(attributes.ParentID);\r\n        }\r\n        if (attributes.checkEnabled) {\r\n          url = url.concat('&checkEnabled=').concat(attributes.checkEnabled);\r\n        }\r\n        // The unique ID is used to determine that the user selection(of the documents) is happening\r\n        // from the the same page\r\n        // Created : On the first selection of the node(document)\r\n        // Removed : This uinique ID is removed on deselection of a node\r\n        if (selectionID.length === 0) {\r\n          var firstRow = $(\"#tableview tbody>tr\")[0];\r\n          if(firstRow){\r\n            $('<input>').attr({\r\n              type: 'hidden',\r\n              id: 'selectionID',\r\n              value: _.uniqueId()\r\n            }).appendTo(firstRow);\r\n            selectionID = $(\"#selectionID\");\r\n          }\r\n        }\r\n        if(selectionID.val()){\r\n          url = url.concat('&selectionID=').concat(selectionID.val());\r\n        }\r\n        // newDocID contains the document id's of the newly selected nodes(documents) if there is a\r\n        // previous selection already exist\r\n        if (attributes.newDocID) {\r\n          _.each(attributes.newDocID, function (docId) {\r\n            url = url.concat('&newDocID').concat('=').concat(docId);\r\n          });\r\n\r\n          \r\n        }\r\n        return url;\r\n      };\r\n\r\n      // URL of the REST call to create a draft process\r\n      var baseUrl     = this.connector.connection.url.replace('/v1', '/v2'),\r\n          getUrl      = Url.combine(baseUrl, 'docworkflows?' + generateUrl(this.attributes)),\r\n          dfd         = $.Deferred(),\r\n          // call REST service to get matched workflow types\r\n          ajaxOptions = {\r\n            type: 'GET',\r\n            url: getUrl,\r\n            async: (this.get(\"CheckEnable\")) ? false : true\r\n          };\r\n\r\n      this.connector.makeAjaxCall(ajaxOptions)\r\n        .done(_.bind(function (resp) {\r\n          // call successfull, return the results.\r\n          dfd.resolve(resp.results);\r\n        }, this))\r\n        .fail(_.bind(function (resp) {\r\n          // call failed, return error\r\n          dfd.reject(resp);\r\n        }, this));\r\n      return dfd;\r\n    },\r\n\r\n    /**\r\n     * To start the workflow for which start step is not enabled.\r\n     */\r\n    startWorkflow: function () {\r\n      // URL of the REST call to start the workflow\r\n      var baseUrl = this.connector.connection.url.replace('/v1', '/v2'),\r\n        postUrl = Url.combine(baseUrl, 'draftprocesses/startwf'),\r\n        content = { workflow_id: this.get('workflow_id'), doc_ids: this.get('DocIDs') },\r\n        formData = new FormData(),\r\n        dfd = $.Deferred();\r\n\r\n      formData.append('body', JSON.stringify(content));\r\n\r\n      // call REST service to start the workflow\r\n      var ajaxOptions = {\r\n        type: 'POST',\r\n        url: postUrl,\r\n        data: formData,\r\n        contentType: false,\r\n        processData: false\r\n      };\r\n\r\n      this.connector.makeAjaxCall(ajaxOptions)\r\n        .done(_.bind(function (resp) {\r\n          // call successful, return the process id and custom message if any\r\n          dfd.resolve(resp.results);\r\n        }, this))\r\n        .fail(_.bind(function (resp) {\r\n          // call failed, return error\r\n          dfd.reject(resp);\r\n        }, this));\r\n      return dfd;\r\n    }\r\n    \r\n  });\r\n\r\n  return WorkflowModel;\r\n});\r\n\n","csui.define('workflow/models/workitem/workitem.model.factory',[\r\n  'csui/lib/jquery',\r\n  'csui/lib/underscore',\r\n  'csui/utils/contexts/factories/factory',   // Factory base to inherit from\r\n  'csui/utils/contexts/factories/connector', // Factory for the server connector\r\n  'workflow/models/workitem/workitem.model',     // Model to create the factory for\r\n  'workflow/models/workflow/workflow.model'\r\n], function ($, _, ModelFactory, ConnectorFactory, WorkItemModel, WorkflowModel) {\r\n  'use strict';\r\n\r\n  var WorkItemModelFactory = ModelFactory.extend({\r\n\r\n    // Unique prefix of the default model instance, when this model is placed\r\n    // to a context to be shared by multiple widgets\r\n    propertyPrefix: 'workitem',\r\n\r\n    constructor: function WorkItemModelFactory(context, options) {\r\n      ModelFactory.prototype.constructor.apply(this, arguments);\r\n\r\n      // Obtain the server connector from the application context to share\r\n      // the server connection with the rest of the application; include\r\n      // the options, which can contain settings for dependent factories\r\n      var connector = context.getObject(ConnectorFactory, options);\r\n      this.context = context;\r\n\r\n      // Expose the model instance in the `property` key on this factory\r\n      // instance to be used by the context\r\n      this.property = new WorkItemModel(undefined, {\r\n        connector: connector\r\n      });\r\n\r\n      this.workflow = new WorkflowModel(undefined, {\r\n        connector: connector\r\n      });\r\n    },\r\n\r\n    isFetchable: function () {\r\n      return this.property.isFetchable();\r\n    },\r\n\r\n    fetch: function (options) {\r\n\r\n      var isDoc   = this.property.get('isDoc'),\r\n          mapList = this.property.get('mapsList'),\r\n          dfd     = $.Deferred();\r\n\r\n      if (isDoc && !(this.property.get('process_id') || this.property.get('draft_id'))) {\r\n\r\n        if (mapList && mapList.length > 0) {\r\n          return dfd.resolve(this.property);\r\n\r\n        } else {\r\n\r\n          this.workflow.set('doc_id', this.property.get(\"doc_id\"));\r\n          this.workflow.set('ParentID', this.property.get(\"parent_id\"));\r\n          this.workflow.set('isNewDraft', this.property.get(\"isNewDraft\"));\r\n\r\n          // create a draft process\r\n          this.workflow.getDocumentWorkflows()\r\n              .done(_.bind(function (resp) {\r\n                this.property.set({datafetched: true}, {silent: true});\r\n                this.property.set('mapsList', resp.data);\r\n                dfd.resolve(this.property);\r\n              }, this))\r\n              .fail(_.bind(function (error) {\r\n                dfd.reject(error);\r\n              }, this));\r\n\r\n          return dfd.promise();\r\n\r\n        }\r\n\r\n      } else if (this.property.get('isDocDraft')) {\r\n        var model = this.property.fetch({silent: true});\r\n        model.done(_.bind(function (resp) {\r\n\r\n          this.workflow.set('doc_id', this.property.get(\"doc_id\"));\r\n          this.workflow.set('ParentID', this.property.get(\"parent_id\"));\r\n          this.workflow.set('isNewDraft', this.property.get(\"isNewDraft\"));\r\n          this.property.set('workflowType', resp.data.workflow_type);\r\n\r\n          // create a draft process\r\n          this.workflow.getDocumentWorkflows()\r\n              .done(_.bind(function (resp) {\r\n                this.property.set({datafetched: true}, {silent: true});\r\n                this.property.set('mapsList', resp.data);\r\n                dfd.resolve(this.property);\r\n              }, this))\r\n              .fail(_.bind(function (error) {\r\n                dfd.reject(error);\r\n              }, this));\r\n        }, this))\r\n            .fail(_.bind(function (error) {\r\n              dfd.reject(error);\r\n            }, this));\r\n        return dfd.promise();\r\n      } else {\r\n        // Just fetch the model exposed y this factory\r\n        return this.property.fetch(options);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  return WorkItemModelFactory;\r\n\r\n});\r\n\n","csui.define('workflow/commands/defaultactionitems',[],function () {\r\n    'use strict';\r\n\r\n    return [\r\n        // Workflow\r\n        {\r\n            equals: {type: [128]},\r\n            signature: 'InitiateWorkflow',\r\n            sequence: 30\r\n        },\r\n        // WorkItem\r\n        {\r\n            equals: {type: [153]},\r\n            signature: 'OpenWorkflowStep',\r\n            sequence: 30\r\n        },\r\n        // Forms\r\n        {\r\n            equals: {type: [223]},\r\n            signature: 'openform',\r\n            sequence: 30\r\n        }\r\n    ];\r\n\r\n});\n","// Lists explicit locale mappings and fallbacks\r\n\r\ncsui.define('workflow/widgets/workitem/workitem/impl/nls/lang',{\r\n  // Always load the root bundle for the default locale (en-us)\r\n  \"root\": true,\r\n  // Do not load English locale bundle provided by the root bundle\r\n  \"en-us\": false,\r\n  \"en\": false\r\n});\r\n\n","// Defines localizable strings in the default language (English)\r\n\r\ncsui.define('workflow/widgets/workitem/workitem/impl/nls/root/lang',{\r\n  CloseButtonLabel: 'Close',\r\n  CancelButtonLabel: 'Cancel',\r\n  StartButtonLabel: 'Start',\r\n  ActionFailMessageTitle: 'Action \"{0}\" failed',\r\n  ActionFailMessage: 'Action \"{0}\" failed. \\n\\n{1}',\r\n  AssigneePickerLabelTo: 'To',\r\n  AssigneePickerLabelSendTo: 'Send to',\r\n  CommentTextFieldLabelInstructions: 'Instructions',\r\n  CommentTextFieldPlaceholderInstructions: 'Add instructions',\r\n  CommentTextFieldLabelReply: 'Reply',\r\n  CommentTextFieldPlaceholderReply: 'Add reply',\r\n  SubmitLabelSend: 'Send',\r\n  SuccessSendOnMessage: 'One workflow submitted by you.',\r\n  SuccessInitiateMessage: 'Start workflow action was successful.',\r\n  ErrorMessageLoadExtension: 'Workflow could not load extension.',\r\n  MultipleMapsSelectPlaceholder: 'Select workflow type',\r\n  ChangeWorkflowTypeTitle: 'Changing Workflow Type',\r\n  ChangeWorkflowTypeMessage: 'Any changes you have made to this step will be lost.',\r\n  ReserveDocumentMessageTitle: 'Document reserved',\r\n  ReserveDocumentMessageText: 'The document {0} is reserved. \\nDo you want to continue anyway?',\r\n  MemberAcceptDialogTitle: 'Workflow sent to a group',\r\n  MemberAcceptDialogMessage: 'Click Accept to work on this Workflow. It will be removed from the My Assignments tile of the other group members. It will be available on your My Assignments tile.',\r\n  MemberAcceptAcceptButtonLabel: 'Accept',\r\n  MemberAcceptCloseButtonLabel: 'Close',\r\n  MemberAcceptedMessage: 'This workflow has been accepted by you',\r\n  MemberAcceptErrorDescription: 'This Workflow was accepted by another group member.',\r\n  MemberAcceptErrorTitle: 'Workflow no longer available',\r\n  DialogModelTitle: '{0}: {1}',\r\n  WorkflowStepTitle: 'Workflow Step : {0}',\r\n  StartWorkflowTitle: 'Start workflow',\r\n  StartWorkflowSingleMessage: 'Clicking OK will initiate the \"{0}\" workflow. Do you want to continue?'\r\n});\r\n\n","\n","csui.define('workflow/commands/initiate.workflow/initiate.workflow',['csui/lib/jquery',\r\n  'csui/lib/underscore',\r\n  'csui/utils/commandhelper',\r\n  'csui/utils/commands/open.classic.page',\r\n  'csui/utils/contexts/factories/application.scope.factory',\r\n  'csui/models/node.actions',\r\n  'csui/dialogs/modal.alert/modal.alert',\r\n  'workflow/models/workitem/workitem.model.factory',\r\n  'workflow/models/workflow/workflow.model',\r\n  'i18n!workflow/widgets/workitem/workitem/impl/nls/lang'\r\n], function ($, _, CommandHelper, OpenClassicPageCommand, ApplicationScopeModelFactory, NodeActionCollection, ModalAlert, WorkitemModelFactory, WorkflowModel, lang) {\r\n  'use strict';\r\n\r\n  // Dependencies loaded in the execute method first\r\n  var GlobalMessage,\r\n      ConnectorFactory;\r\n\r\n  var InitiateWorkflowCommand = OpenClassicPageCommand.extend({\r\n\r\n    defaults: {\r\n      signature: 'InitiateWorkflow',\r\n      command_key: ['initiateworkflow'],\r\n      scope: 'single'\r\n    },\r\n\r\n    enabled: function (status) {\r\n      var node = CommandHelper.getJustOneNode(status);\r\n      // support both scenarios - default action only or a full node info\r\n      return node && node.get('type') === 128 && (node.get('openable') || node.actions.get('initiateworkflow'));\r\n    },\r\n\r\n    // check if work item should be opened in smart or standard UI\r\n    execute: function (status, options) {\r\n      return this._getActionParameters(status, options)\r\n        .then(_.bind(function (action) {\r\n          var resp = action.get(\"body\");\r\n          resp = resp && JSON.parse(resp);\r\n          if (resp && !resp.showStartStep) {\r\n\r\n            var popupOptions = { centerVertically: true, buttons: ModalAlert.buttons.OkCancel },\r\n              message = _.str.sformat(lang.StartWorkflowSingleMessage, status.nodes.models[0].get(\"name\")),\r\n              context = status.context || options && options.context,\r\n              attrs = {},\r\n              workItem;\r\n\r\n            if (status.isDoc && status.mapsList && status.mapsList.length > 0) {\r\n              workItem = context.getModel(WorkitemModelFactory);\r\n\r\n              attrs.isDoc = status.isDoc;\r\n              attrs.docModels = status.docModel;\r\n              attrs.parent_id = status.parent_id;\r\n              attrs.status = status;\r\n              attrs.url_org = status.url_org;\r\n              attrs.isNewDraft = true; // created label to verify from start workflow or browser back button\r\n\r\n              workItem.set(attrs, { silent: true });\r\n              workItem.set({ 'doc_id': status.doc_id, 'doc_names': status.docNames });\r\n            }\r\n\r\n            ModalAlert.confirmQuestion(message, lang.StartWorkflowTitle, popupOptions)\r\n              .always(_.bind(function (result) {\r\n                if (result) {\r\n                  return this._startWorkflow(status, options, resp);\r\n                }\r\n                else {\r\n                  return $.Deferred().resolve();\r\n                }\r\n              }, this));\r\n          }\r\n          else {\r\n            return this._intiateWorkflow(status, options, resp);\r\n          }\r\n        }, this));\r\n    },\r\n\r\n    _startWorkflow: function (status, options, action) {\r\n\r\n      var deferred = $.Deferred(), originatingView;\r\n      var node = CommandHelper.getJustOneNode(status);\r\n      status.workflow_parent_id = node.get(\"parent_id\");\r\n\r\n      //if this is true, it is a shortcut, for which the Start Workitem command was clicked,\r\n      // and the original node has to be extracted\r\n      if (node.get('type') === 1) {\r\n        node = node.original;\r\n      }\r\n\r\n      if (options && options.originatingView) {\r\n        originatingView = options.originatingView;\r\n      }\r\n      else if (status && status.originatingView) {\r\n        originatingView = status.originatingView;\r\n      }\r\n\r\n      if (originatingView) {\r\n        originatingView.blockActions();\r\n      }\r\n\r\n      // init workflow in smart UI\r\n      require(['csui/controls/globalmessage/globalmessage',\r\n        'csui/utils/contexts/factories/connector' // Factory for the server connector\r\n      ], function () {\r\n        GlobalMessage = arguments[0];\r\n        ConnectorFactory = arguments[1];\r\n\r\n        options = options || {};\r\n        var context = status.context || options && options.context,\r\n        connector = context.getObject(ConnectorFactory, options),\r\n        workflow = new WorkflowModel({\r\n          workflow_id: node.get('id'),\r\n          DocIDs: status.doc_id\r\n        },\r\n        _.extend(options, {\r\n          connector: connector\r\n        }));\r\n        \r\n        // start the workflow\r\n        workflow.startWorkflow()\r\n          .done(_.bind(function (resp) {\r\n            var successMsg = lang.SuccessInitiateMessage;\r\n\r\n            // check if the custom message available or not.\r\n            if (resp && resp.custom_message) {\r\n              successMsg = resp.custom_message;\r\n            }\r\n            // workflow started sucessfully, show the success message\r\n            GlobalMessage.showMessage('success', successMsg);\r\n            deferred.resolve();\r\n          }, this))\r\n          .fail(_.bind(function (error) {\r\n            // starting the workflow failed, show message\r\n            if (error.responseJSON) {\r\n              GlobalMessage.showMessage('error', error.responseJSON.error);\r\n            }\r\n            deferred.reject();\r\n          }, this))\r\n          .always(function() {\r\n            if (originatingView) {\r\n              originatingView.unblockActions();\r\n            }\r\n            if (status.isDoc && status.mapsList && status.mapsList.length > 1) {\r\n              var viewStateModel = status.context.viewStateModel;\r\n              if (viewStateModel.get(\"lastRouter\")) {\r\n                viewStateModel.restoreLastRouter();\r\n              }\r\n              else {\r\n                this.options.context.getModel(ApplicationScopeModelFactory).set('id', '');\r\n              }\r\n            }\r\n          });\r\n\r\n        // set the map it to load the temp map\r\n\r\n      }, function (error) {\r\n        deferred.reject(error);\r\n      });\r\n      // Return deferred to react on issues/success in the caller\r\n      return deferred;\r\n    },\r\n\r\n    _intiateWorkflow: function (status, options, action) {\r\n\r\n      var deferred = $.Deferred();\r\n      var node = CommandHelper.getJustOneNode(status);\r\n      status.workflow_parent_id = node.get(\"parent_id\");\r\n\r\n      //if this is true, it is a shortcut, for which the Start Workitem command was clicked,\r\n      // and the original node has to be extracted\r\n      if (node.get('type') === 1) {\r\n        node = node.original;\r\n      }\r\n\r\n      if (action && action.initiateInSmartView && action.initiatecmd && action.initiatecmd === 'initiate_in_smartview') {\r\n        // init workflow in smart UI\r\n        require(['csui/controls/globalmessage/globalmessage',\r\n          'csui/utils/contexts/factories/connector' // Factory for the server connector\r\n        ], function () {\r\n          GlobalMessage = arguments[0];\r\n          ConnectorFactory = arguments[1];\r\n\r\n          options = options || {};\r\n          var context   = status.context || options && options.context,\r\n              connector = context.getObject(ConnectorFactory, options),\r\n              workflow  = new WorkflowModel({\r\n                    workflow_id: node.get('id'),\r\n                    DocIDs : status.doc_id\r\n                  },\r\n                  _.extend(options, {\r\n                    connector: connector\r\n                  }));\r\n\r\n          // create a draft process\r\n          workflow.createDraftProcess()\r\n              .done(_.bind(function (resp) {\r\n                // creation of the draft process succeeded, load the work item model and switch perspective\r\n                var workItem = context.getModel(WorkitemModelFactory);\r\n                var url = location.href;\r\n                if (status.isDoc === true) {\r\n                  var attrs = {};\r\n                  attrs.isDocDraft = true;\r\n                  attrs.docModels = status.docModel;\r\n                  attrs.parent_id = status.parent_id;\r\n                  attrs.status = status;\r\n                  attrs.url_org = status.url_org;\r\n                  attrs.draft_id = resp.draftprocess_id;\r\n                  attrs.isNewDraft = true; // created label to verify from start workflow or browser back button\r\n\r\n                  workItem.set(attrs, {silent: true});\r\n                  workItem.set('doc_id', status.doc_id);\r\n                  workItem.set('doc_names', status.docNames);\r\n\r\n\r\n                } else {\r\n                  workItem.set('isDraft', true);\r\n                  workItem.set('url_org', url);\r\n                  workItem.set('process_id', resp.draftprocess_id);\r\n                  workItem.set('parent_id', status.workflow_parent_id);\r\n                }\r\n              }, this))\r\n              .fail(_.bind(function (error) {\r\n                // creation of the draft process failed, show message\r\n                GlobalMessage.showMessage('error', error);\r\n                deferred.reject();\r\n              }, this));\r\n\r\n          // set the map it to load the temp map\r\n\r\n        }, function (error) {\r\n          deferred.reject(error);\r\n        });\r\n        // Return deferred to react on issues/success in the caller\r\n        return deferred;\r\n      } else {\r\n        // classic UI\r\n        var context  = status.context || options && options.context,\r\n            workItem = context.getModel(WorkitemModelFactory);\r\n        options = options || {};\r\n        workItem.set('isDoc', status.isDoc);\r\n        workItem.set('parent_id', status.parent_id);\r\n        workItem.set('doc_id', status.doc_id);\r\n        workItem.set('doc_names', status.docNames);\r\n        if (status.isDoc === true) {\r\n          options.isDoc = true;\r\n          options.doc_id = status.doc_id;\r\n          options.parent_id = status.parent_id;\r\n          options.doc_names = status.docNames;\r\n          options.connector = workItem.connector;\r\n        }\r\n        return this._navigateTo(node, options);\r\n      }\r\n    },\r\n\r\n    _getActionParameters: function (status, options) {\r\n\r\n      var node = CommandHelper.getJustOneNode(status);\r\n\r\n       //if this is true, it is a shortcut, for which the Start Workitem command was clicked,\r\n       // and the original node has to be extracted\r\n       if (node.get('type') === 1) {\r\n         node = node.original;\r\n       }\r\n\r\n      //if this is e.g called by 'initiate from document' the necessary informatimn is\r\n      // already available\r\n      var cmd;\r\n      if (node.actions) {\r\n        cmd = node.actions.get(this.get('command_key')[0]);\r\n      }\r\n      if (cmd) {\r\n        var deferred = $.Deferred();\r\n        deferred.resolve(cmd);\r\n        return deferred;\r\n      }\r\n\r\n      //get the necessary information for initiation\r\n      var workflowActionCollection = new NodeActionCollection(undefined, {\r\n        connector: node.connector,\r\n        nodes: [ node.get('id') ],\r\n        commands: [ 'initiateworkflow' ]\r\n      });\r\n      var originatingView = status.originatingView || options.originatingView;\r\n      originatingView && originatingView.blockActions && originatingView.blockActions();\r\n      return workflowActionCollection\r\n          .fetch()\r\n          .then(function () {\r\n            var action = workflowActionCollection\r\n                .get(node.get('id'))\r\n            .actions.get('initiateworkflow');\r\n            return action;\r\n          })\r\n          .always(function () {\r\n            originatingView && originatingView.unblockActions && originatingView.unblockActions();\r\n          });\r\n    },\r\n\r\n\r\n\r\n    getUrlQueryParameters: function (node, options) {\r\n      var urlParams;\r\n      if (options.isDoc === true) {\r\n        var params = {},\r\n            baseUrl     = options.connector.connection.url.replace('/api/v1', '');\r\n        params.func = 'wfinitiation.InitiateWorkflowMap';\r\n        params.ParentID = options.parent_id;\r\n        params.DocNames = options.doc_names;\r\n        params.WFMapsDataID = node.get('id');\r\n        params.nexturl = baseUrl + '/app' + (options.parent_id !== -1 ? '/nodes/' + params.ParentID: '');\r\n        urlParams = $.param(params);\r\n        var docIds = options.doc_id.split(\",\");\r\n        for (var docId in  docIds) {\r\n          urlParams += '&DocID='.concat(docIds[docId]);\r\n        }\r\n      } else {\r\n        urlParams = {};\r\n        urlParams.func = 'll';\r\n        urlParams.objAction = 'Initiate';\r\n        urlParams.objId = node.get('id');\r\n        urlParams.nexturl = location.href;\r\n      }\r\n\r\n      return urlParams;\r\n\r\n    }\r\n  });\r\n\r\n  return InitiateWorkflowCommand;\r\n\r\n});\n","csui.define('workflow/commands/edit.workflow.map/edit.workflow.map',['csui/lib/jquery',\r\n    'csui/lib/underscore',\r\n    'csui/utils/commandhelper',\r\n    'csui/utils/commands/open.classic.page',\r\n    'workflow/models/workitem/workitem.model.factory'\r\n], function ($, _, CommandHelper, OpenClassicPageCommand, WorkitemModelFactory) {\r\n    'use strict';\r\n\r\n    // Dependencies loaded in the execute method first\r\n\r\n    var EditWorkflowMapCommand = OpenClassicPageCommand.extend({\r\n\r\n        defaults: {\r\n            signature: 'EditWorkflowMap',\r\n            command_key: ['editworkflowmap'],\r\n            scope: 'single'\r\n        },\r\n\r\n        execute: function (status, options) {\r\n            var node = CommandHelper.getJustOneNode(status);\r\n\r\n            // classic UI\r\n            options = options || {};\r\n            return this._navigateTo(node, options);\r\n        },\r\n\r\n        getUrlQueryParameters: function (node, options) {\r\n            var urlParams;\r\n            urlParams = {};\r\n            urlParams.func = 'll';\r\n            urlParams.objAction = 'paint';\r\n            urlParams.objId = node.get('id');\r\n            return urlParams;\r\n        }\r\n    });\r\n\r\n    return EditWorkflowMapCommand;\r\n\r\n});\n","csui.define('workflow/commands/initiate.document.workflow/initiate.document.workflow',['csui/lib/jquery',\r\n  'csui/lib/underscore',\r\n  'csui/utils/commandhelper',\r\n  'csui/utils/commands/open.classic.page',\r\n  'csui/models/node/node.model',\r\n  'csui/controls/globalmessage/globalmessage',\r\n  'csui/dialogs/modal.alert/modal.alert',\r\n  'workflow/models/workitem/workitem.model.factory',\r\n  'workflow/models/workflow/workflow.model',\r\n  'i18n!workflow/widgets/workitem/workitem/impl/nls/lang'\r\n], function ($, _, CommandHelper, OpenClassicPageCommand, NodeModel, GlobalMessage, ModalAlert, WorkitemModelFactory,\r\n    WorkflowModel, lang) {\r\n  'use strict';\r\n\r\n  // Dependencies loaded in the execute method first\r\n  var ConnectorFactory,\r\n      NodeModelFactory;\r\n\r\n  var InitiateDocumentWorkflowCommand = OpenClassicPageCommand.extend({\r\n\r\n    defaults: {\r\n      signature: 'InitiateDocumentWorkflow',\r\n      command_key: ['initiatedocumentworkflow'],\r\n      scope: 'multiple'\r\n    },\r\n\r\n    // returns a boolean value by caluclating common workflows of selected doc's.\r\n    hasCommonWorkflows: function (selectedWfList) {\r\n\r\n      // return a boolean value by caluclating common workflows.\r\n      var wfListLength = selectedWfList.length;\r\n      for (var i = 0, lengthFirstSelectedWfList = selectedWfList[0].length;\r\n           i < lengthFirstSelectedWfList; i++) {\r\n        var item = selectedWfList[0][i];\r\n        var j;\r\n        for (j = 1; j < wfListLength; j++) {\r\n          if (!_.contains(selectedWfList[j], item)) { break; }\r\n        }\r\n        if (j === wfListLength) { return true; }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    enabled: function (status, options) {\r\n\r\n      // stopping the execution if the status object not available.\r\n      // by using status we can get the selected nodes.\r\n      if (!status) {\r\n        return false;\r\n      }\r\n\r\n      var signatures   = this.get(\"command_key\"),\r\n          nodes        = CommandHelper.getAtLeastOneNode(status).models,\r\n          enableAction = false, \r\n          wfList, list;\r\n\r\n      // stopping the exection if no node selected\r\n      // and checking permitted actions on the nodes\r\n      if (nodes.length > 0 && this.checkPermittedActions(nodes, signatures)) {\r\n        \r\n        list = [];\r\n\r\n        if (nodes.length === 1) {\r\n  \r\n          wfList = nodes[0].actions.get(\"initiatedocumentworkflow\").get(\"wfList\");\r\n          if(wfList) {\r\n            enableAction = wfList.length > 0;\r\n          }\r\n        } else if (nodes.length > 1) {\r\n  \r\n          for (var j = 0; j < nodes.length; j++) {\r\n  \r\n            wfList = nodes[j].actions.get(\"initiatedocumentworkflow\").get(\"wfList\");\r\n            if (wfList && wfList.length > 0) {\r\n              enableAction = true;\r\n              list.push(wfList);\r\n            } else {\r\n              enableAction = false;\r\n              break;\r\n            }\r\n          }\r\n          if (enableAction) {\r\n            enableAction = this.hasCommonWorkflows(list);\r\n          }\r\n        }\r\n      }\r\n    \r\n      return enableAction;\r\n    },\r\n    //Get all the doc_ids for the selected nodes(document).\r\n    getDocIds: function (nodes) {\r\n      var docIds = [];\r\n      _.each(nodes, function (node) {\r\n        docIds.push(node.get('id'));\r\n      });\r\n      return docIds;\r\n    },\r\n    //Get all the doc names for the selected nodes(document).\r\n    getDocNames: function (nodes) {\r\n      var docNames = {};\r\n      _.each(nodes, function (node) {\r\n        docNames[node.get('id')] = node.get('name');\r\n      });\r\n      return docNames;\r\n    },\r\n    getDelimitedString : function (docList , delimiter) {\r\n      var delimitedString = '', delim = '';\r\n      _.each(docList, function (doc) {\r\n        delimitedString = delimitedString.concat(delim).concat(doc);\r\n        delim = delimiter;\r\n      });\r\n      return delimitedString;\r\n    },\r\n    getCommonWorkflows: function (status, options) {\r\n      var deferred = $.Deferred();\r\n      var connector = status.container.connector;\r\n      var scope      = this.get(\"scope\"),\r\n          cmdOptions = options || {},\r\n          nodes      = this._getNodesByScope(status, scope);\r\n      var workflow = new WorkflowModel({\r\n            CheckEnable: true\r\n          },\r\n          _.extend(cmdOptions, {\r\n            connector: connector\r\n          }));\r\n      var curSelection = this.getDocIds(nodes);\r\n      workflow.set('DocIDs', curSelection);\r\n      workflow.set('ParentID', status.container.attributes.id);\r\n      workflow.set('checkEnabled', options.checkEnabled );\r\n\r\n      var prevNodeSelection = this.get(\"prevNodeSelection\");\r\n\r\n      if (prevNodeSelection) {\r\n        // Determine the newly selected nodes using  previous node selection\r\n        var newDocID = _.filter(curSelection, function (id) {\r\n          return !_.contains(prevNodeSelection, id);\r\n        });\r\n\r\n        // Determining the action based on the current selection(curSelection) and previous selection of\r\n        // nodes(prevNodeSelection)\r\n        if (curSelection.length > prevNodeSelection.length &&\r\n            $(curSelection).filter(prevNodeSelection).length === prevNodeSelection.length) {\r\n          // Adding newDocID if the current node selection contains previous node selection along\r\n          // with newly added nodes\r\n          workflow.set('newDocID', newDocID);\r\n        } else if (((curSelection.length < prevNodeSelection.length) ||\r\n                    (curSelection.length === 1 && curSelection.length === prevNodeSelection.length &&\r\n                     curSelection[0] !== prevNodeSelection[0]) ) && $(\"#selectionID\").length > 0) {\r\n          // Removing selectionID on deselecting a node\r\n          $(\"#selectionID\").remove();\r\n        }\r\n      }\r\n\r\n      // 'prevEnabledNodeLen'  stores the length of the selected documents.\r\n      // Once the results are available, based on 'prevEnabledNodeLen' we make 'commandEnabled'\r\n      // as a check to stop other 'XHR'/'REST' calls.\r\n      workflow.getDocumentWorkflows()\r\n          .done(_.bind(function (resp) {\r\n\r\n            this.set('prevEnabledNodeLen', nodes.length);\r\n            this.set('prevNodeSelection', curSelection);\r\n\r\n            if (resp.data.length > 0) {\r\n              deferred.resolve();\r\n            } else {\r\n              deferred.reject();\r\n            }\r\n          }, this))\r\n          .fail(_.bind(function (resp) {\r\n            this.set('prevEnabledNodeLen', nodes.length);\r\n            this.set('prevNodeSelection', curSelection);\r\n            deferred.reject();\r\n          }, this));\r\n      return deferred.promise();\r\n    },\r\n    // check if work item should be opened in smart or standard UI\r\n    execute: function (status, options) {\r\n\r\n      var nodes     = CommandHelper.getAtLeastOneNode(status).models,\r\n          deferred  = $.Deferred(),\r\n          that      = this,\r\n          docIds    = this.getDocIds(nodes),\r\n          docNames   = this.getDocNames(nodes),\r\n          delimitedDocIds = this.getDelimitedString(docIds, \",\"),\r\n          containerId = status.container && status.container.get(\"id\"),\r\n          parent_id = containerId ? containerId : -1,\r\n          docArgs   = {DocIDs: docIds, ParentID: parent_id};\r\n\r\n      // init workflow in smart UI\r\n      require(['csui/utils/contexts/factories/connector', // Factory for the server connector\r\n        'csui/utils/contexts/factories/node'\r\n      ], function () {\r\n        ConnectorFactory = arguments[0];\r\n        NodeModelFactory = arguments[1];\r\n\r\n        options = options || {};\r\n        var context   = status.context || options && options.context,\r\n            connector = context.getObject(ConnectorFactory, options),\r\n            workflow  = new WorkflowModel(docArgs,\r\n                _.extend(options, {\r\n                  connector: connector\r\n                }));\r\n\r\n        // create a draft process\r\n        workflow.getDocumentWorkflows()\r\n            .done(_.bind(function (resp) {\r\n              var url = location.href;\r\n              if (resp.statusMsg) {\r\n                GlobalMessage.showMessage('error', resp.statusMsg);\r\n                deferred.reject();\r\n              } else {\r\n                var docModels = [], workflowType, workModelOptions;\r\n\r\n                workModelOptions = {\r\n                  'isDoc': true,\r\n                  'docModels': docModels,\r\n                  'mapsList': resp.data,\r\n                  'datafetched': true,\r\n                  'url_org': url,\r\n                  'parent_id': parent_id,\r\n                  'status': status,\r\n                  // created label to verify from start workflow or browser back button\r\n                  'isNewDraft': true,\r\n                  'doc_id': delimitedDocIds,\r\n                  'doc_names': docNames\r\n                };\r\n\r\n                if (resp.data.length === 1) {\r\n                  var wfMapModel, wfdata = resp.data[0],\r\n                    workflowModel = new WorkflowModel({\r\n                      workflow_id: wfdata.DataID,\r\n                      DocIDs: docIds\r\n                    },\r\n                      _.extend(options, {\r\n                        connector: connector\r\n                      }));\r\n                  wfMapModel = context.getModel(NodeModelFactory, { attributes: { id: wfdata.DataID } });\r\n\r\n                  workflowType = wfdata.WorkflowType;\r\n                  docModels = this._prepareDocModels(workflowType, nodes, connector);\r\n                  workModelOptions.docModels = docModels;\r\n\r\n                  wfMapModel.fetch()\r\n                    .done(_.bind(function (args) {\r\n                      var cmd = wfMapModel.actions.get('initiateworkflow'),\r\n                        cmdData = cmd ? JSON.parse(cmd.get(\"body\")) : false;\r\n\r\n                      if (cmdData && cmdData.showStartStep) {\r\n                        if (cmdData.initiateInSmartView && cmdData.initiatecmd && cmdData.initiatecmd === 'initiate_in_smartview') {\r\n                          workflowModel.createDraftProcess()\r\n                            .done(_.bind(function (draftResp) {\r\n                              workflowType = resp.workflow_type;\r\n                              workModelOptions.draft_id = draftResp.draftprocess_id;\r\n                              this._prepareWorkItem(context, workModelOptions);\r\n                              deferred.resolve();\r\n                            }, this))\r\n                            .fail(_.bind(function (resp) {\r\n                              deferred.reject(resp);\r\n                            }, this));\r\n\r\n                        } else {\r\n                          options.isDoc = true;\r\n                          options.doc_id = delimitedDocIds;\r\n                          options.doc_names = docNames;\r\n                          options.parent_id = parent_id;\r\n                          return that._navigateTo(wfMapModel, options);\r\n                        }\r\n                      }\r\n                      else {\r\n                        var options = { centerVertically: true, buttons: ModalAlert.buttons.OkCancel },\r\n                          message = _.str.sformat(lang.StartWorkflowSingleMessage, wfdata.Name);\r\n\r\n                        ModalAlert.confirmQuestion(message, lang.StartWorkflowTitle, options).always(_.bind(function (result) {\r\n                          if (result) {\r\n                            if (status.originatingView) {\r\n                              status.originatingView.blockActions();\r\n                            }\r\n\r\n                            // start the workflow\r\n                            workflowModel.startWorkflow()\r\n                              .done(_.bind(function (resp) {\r\n                                var successMsg = lang.SuccessInitiateMessage;\r\n\r\n                                if (resp && resp.custom_message) {\r\n                                  successMsg = resp.custom_message;\r\n                                }\r\n\r\n                                GlobalMessage.showMessage('success', successMsg);\r\n\r\n                                deferred.resolve();\r\n                              }, this))\r\n                              .fail(_.bind(function (error) {\r\n                                // starting a workflow failed, show message\r\n                                GlobalMessage.showMessage('error', error.responseJSON.error);\r\n                                deferred.reject();\r\n                              }, this))\r\n                              .always(function() {\r\n                                if (status.originatingView) {\r\n                                  status.originatingView.unblockActions();\r\n                                }\r\n                              });\r\n                          }\r\n                          else {\r\n                            deferred.resolve();\r\n                          }\r\n                        }, this));\r\n                        }\r\n\r\n                      }, this))\r\n                      .fail(_.bind(function (error) {\r\n                        if (error.responseJSON) {\r\n                          GlobalMessage.showMessage('error', error.responseJSON.error);\r\n                        }\r\n                      }, this));\r\n                }\r\n                else {\r\n                  docModels = this._prepareDocModels(workflowType, nodes, connector);\r\n                  workModelOptions.docModels = docModels;\r\n                  this._prepareWorkItem(context, workModelOptions);\r\n                }\r\n              }\r\n            }, that))\r\n            .fail(_.bind(function (error) {\r\n              // creation of the draft process failed, show message\r\n              if (error.responseJSON) {\r\n                GlobalMessage.showMessage('error', error.responseJSON.error);\r\n              }\r\n              deferred.reject();\r\n            }, this));\r\n\r\n        // set the map it to load the temp map\r\n\r\n      }, function (error) {\r\n        deferred.reject(error);\r\n      });\r\n\r\n      // Return deferred to react on issues/success in the caller\r\n      return deferred;\r\n    },\r\n\r\n    _prepareDocModels: function (workflowType, nodes, connector) {\r\n      var docModels = [], docModel;\r\n      if (nodes && nodes.length > 0) {\r\n        _.each(nodes, function (model) {\r\n          //For Signing workflows, we need to create a copy of the attachment\r\n          if (workflowType === \"101_1\") {\r\n            docModel = new NodeModel({\r\n              \"name\": model.attributes.name,\r\n              \"original_id\": model.attributes.id\r\n            }, { connector: connector });\r\n          } else {\r\n            docModel = new NodeModel({\r\n              \"type\": 1,\r\n              \"type_name\": \"Shortcut\",\r\n              \"container\": false,\r\n              \"name\": model.attributes.name,\r\n              \"original_id\": model.attributes.id,\r\n              \"original_id_expand\": model.attributes\r\n            }, { connector: connector });\r\n          }\r\n          docModels.push(docModel);\r\n        });\r\n      }\r\n      return docModels;\r\n    },\r\n\r\n    _prepareWorkItem: function (context, modelOptions) {\r\n\r\n      var workItem;\r\n\r\n      workItem = context.getModel(WorkitemModelFactory);\r\n      workItem.set(modelOptions);\r\n\r\n      return workItem;\r\n    },\r\n\r\n    getUrlQueryParameters: function (node, options) {\r\n      var urlParams;\r\n      if (options.isDoc === true) {\r\n        var params = {},\r\n            baseUrl     = options.connector.connection.url.replace('/api/v1', '');\r\n        params.func = 'wfinitiation.InitiateWorkflowMap';\r\n        params.ParentID = options.parent_id;\r\n        params.DocNames = options.doc_names;\r\n        params.WFMapsDataID = node.get('id');\r\n        params.nexturl = baseUrl + '/app' + (options.parent_id !== -1 ? '/nodes/' + params.ParentID: '');\r\n        urlParams = $.param(params);\r\n        var docIds = options.doc_id.split(\",\");\r\n        for (var docId in  docIds) {\r\n          urlParams += '&DocID='.concat(docIds[docId]);\r\n        }\r\n      } else {\r\n        urlParams = {};\r\n        urlParams.func = 'll';\r\n        urlParams.objAction = 'Initiate';\r\n        urlParams.objId = node.get('id');\r\n        urlParams.nexturl = location.href;\r\n      }\r\n\r\n      return urlParams;\r\n\r\n    }\r\n\r\n  });\r\n\r\n  return InitiateDocumentWorkflowCommand;\r\n\r\n});\n","csui.define('workflow/commands/open.workitem/open.workitem',['csui/lib/underscore',\r\n  'csui/lib/jquery',\r\n  'csui/utils/commandhelper',\r\n  'csui/utils/commands/open.classic.page',\r\n  'csui/utils/command.error',\r\n  'csui/utils/contexts/factories/connector',\r\n  'workflow/models/workitem/workitem.model.factory',\r\n], function (_, $, CommandHelper, OpenClassicPageCommand, CommandError, ConnectorFactory, WorkitemModelFactory) {\r\n  'use strict';\r\n\r\n  var OpenWorkItemCommand = OpenClassicPageCommand.extend({\r\n\r\n    defaults: {\r\n      signature: 'OpenWorkflowStep'\r\n    },\r\n\r\n    enabled: function (status) {\r\n      var node = CommandHelper.getJustOneNode(status);\r\n      return node && node.get('type') === 153;\r\n    },\r\n\r\n    // check if work item should be opened in smart or standard UI\r\n    execute: function (status, options) {\r\n      var node = CommandHelper.getJustOneNode(status);\r\n      if (node.get('workflow_open_in_smart_ui')) {\r\n        // smart UI\r\n        options = options || {};\r\n        var context   = status.context || options && options.context,\r\n            deferred  = $.Deferred(),\r\n            workItem = context.getModel(WorkitemModelFactory);\r\n\r\n        // set the work item ids in the model\r\n        workItem.set({\r\n          process_id: node.get('workflow_id'),\r\n          subprocess_id: node.get('workflow_subworkflow_id'),\r\n          task_id: node.get('workflow_subworkflow_task_id'),\r\n          url_org: location.href\r\n        });\r\n\r\n\r\n        // Return deferred to react on issues/success in the caller\r\n        return deferred;\r\n      } else {\r\n        // classic UI\r\n        return this._navigateTo(node, options);\r\n      }\r\n    },\r\n\r\n    // URL for standard UI\r\n    getUrlQueryParameters: function (node, options) {\r\n\r\n      return {\r\n        func: 'work.EditTask',\r\n        workid: node.get('workflow_id'),\r\n        subworkid: node.get('workflow_subworkflow_id'),\r\n        taskid: node.get('workflow_subworkflow_task_id'),\r\n        nexturl: location.href\r\n      };\r\n    }\r\n  });\r\n\r\n  return OpenWorkItemCommand;\r\n\r\n});\n","csui.define('workflow/commands/open.form/open.form',['csui/lib/underscore', 'csui/utils/commandhelper', 'csui/utils/commands/open.classic.page', 'csui/models/node.actions'\r\n], function (_, CommandHelper, OpenClassicPageCommand, NodeActionCollection) {\r\n  'use strict';\r\n\r\n  var OpenFormCommand = OpenClassicPageCommand.extend({\r\n\r\n    defaults: {\r\n      signature: 'openform',\r\n      command_key: ['openform'],\r\n      scope: 'single'\r\n    },\r\n\r\n    enabled: function (status) {\r\n      var node = CommandHelper.getJustOneNode(status);\r\n      // support both scenarios - default action only or a full node info\r\n      return node && (node.get('openable') || node.actions.get('openform'));\r\n    },\r\n\r\n    execute: function (status, options) {\r\n      return this._getActionParameters(status, options)\r\n          .then(_.bind(function (action) {\r\n            return this._openForm(status, options, action);\r\n          }, this));\r\n    },\r\n\r\n    _openForm: function (status, options, action) {\r\n      this.objAction = 'EditForm';\r\n      var node     = CommandHelper.getJustOneNode(status);\r\n      if (action && action.get('body')) {\r\n        //the body contains either 'ConfirmView' or 'EditForm' dependent of the permissions of the\r\n        // current User\r\n        this.objAction = action.get('body');\r\n      }\r\n      return this._navigateTo(node, options);\r\n    },\r\n\r\n    _getActionParameters: function (status, options) {\r\n      //\r\n      var node = CommandHelper.getJustOneNode(status);\r\n      var formActionCollection = new NodeActionCollection(undefined, {\r\n        connector: node.connector,\r\n        nodes: [ node.get('id') ],\r\n        commands: [ 'openform' ]\r\n      });\r\n      var originatingView = status.originatingView || options.originatingView;\r\n      originatingView && originatingView.blockActions && originatingView.blockActions();\r\n      return formActionCollection\r\n          .fetch()\r\n          .then(function () {\r\n            var action = formActionCollection\r\n                .get(node.get('id'))\r\n                .actions.get('openform');\r\n            return action;\r\n          })\r\n          .always(function () {\r\n            originatingView && originatingView.unblockActions && originatingView.unblockActions();\r\n          });\r\n    },\r\n\r\n    getUrlQueryParameters: function (node, options) {\r\n      return {\r\n        func: 'll',\r\n        objAction: this.objAction,\r\n        objId: node.get('id'),\r\n        nexturl: location.href\r\n      };\r\n    }\r\n\r\n  });\r\n\r\n  return OpenFormCommand;\r\n\r\n});\r\n\n","csui.define('workflow/perspective/routers/workflow.perspective.router',[\r\n  'csui/pages/start/perspective.router',\r\n  'csui/utils/contexts/factories/application.scope.factory',\r\n  'workflow/models/workitem/workitem.model.factory'\r\n], function (PerspectiveRouter, ApplicationScopeModelFactory,\r\n    WorkItemModelFactory) {\r\n  'use strict';\r\n\r\n  var WorkflowPerspectiveRouter = PerspectiveRouter.extend({\r\n\r\n    // defined routes, see workflow.perspective.router.md for more details\r\n    routes: {\r\n      'processes/:process_id/:subprocess_id/:task_id': 'openProcess',\r\n      'draftprocesses/:draftprocess_id': 'openDraftProcess',\r\n      'docworkflows/:doc_id/:parent_id': 'openDocumentProcess',\r\n      'docworkflows/:doc_id/:parent_id/draftprocesses/:draftprocess_id': 'openDocumentDraftProcess'\r\n    },\r\n\r\n    constructor: function WorkflowPerspectiveRouter(options) {\r\n      PerspectiveRouter.prototype.constructor.apply(this, arguments);\r\n\r\n      this.applicationScope = this.context.getModel(ApplicationScopeModelFactory);\r\n\r\n      this.workItem = this.context.getModel(WorkItemModelFactory);\r\n      this.listenTo(this.workItem, 'change:process_id', this._updateUrl);\r\n      this.listenTo(this.workItem, 'change:doc_id', this._updateUrl);\r\n    },\r\n\r\n    /**\r\n     * Called when the route is activated\r\n     * @param process_id Process id of the workflow\r\n     * @param subprocess_id Sub process od of the workflow\r\n     * @param task_id Task id of the workflow\r\n     */\r\n    openProcess: function (process_id, subprocess_id, task_id) {\r\n      //set the ids in the model to reload it\r\n      this.workItem.set({\r\n        process_id: parseInt(process_id),\r\n        subprocess_id: parseInt(subprocess_id),\r\n        task_id: parseInt(task_id),\r\n        isDraft: false,\r\n        url_org: this.validateURL(this._getUrl())\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Called when the route is activated\r\n     * @param draftprocess_id Draft process id of the workflow\r\n     */\r\n    openDraftProcess: function (draftprocess_id) {\r\n      //set the ids in the model to reload it\r\n      this.workItem.set({\r\n        process_id: parseInt(draftprocess_id),\r\n        isDraft: true,\r\n        url_org: this.validateURL(this._getUrl())\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Called when the route is activated\r\n     * @param doc_id docId to retrive list of workflows associated to document\r\n     * @param parent_id parentId to retrive  list of workflows associated to document\r\n     */\r\n    openDocumentProcess: function (doc_id, parent_id) {\r\n\r\n      var defaults = this.workItem.defaults;\r\n      this.workItem.reset({silent: true});\r\n      this.workItem.set(defaults, {silent: true});\r\n      //set the ids in the model to reload it\r\n      this.workItem.set({\r\n        parent_id: parseInt(parent_id),\r\n        isDoc: true,\r\n        doc_id: doc_id,\r\n        url_org: this.validateURL(this._getUrl())\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Called when the route is activated\r\n     * @param doc_id docId to retrive list of workflows associated to document\r\n     * @param parent_id parentId to retrive  list of workflows associated to document\r\n     * @param draftprocess_id Draft process id of the workflow\r\n     */\r\n    openDocumentDraftProcess: function (doc_id, parent_id, draftprocess_id) {\r\n      //set the ids in the model to reload it\r\n      this.workItem.set({\r\n        parent_id: parseInt(parent_id),\r\n        draft_id: parseInt(draftprocess_id),\r\n        isDocDraft: true,\r\n        doc_id: doc_id,\r\n        url_org: this.validateURL(this._getUrl())\r\n      });\r\n    },\r\n\r\n    onOtherRoute: function () {\r\n      // reset the model in the case a different route is activated\r\n      this.workItem.reset({silent: true});\r\n    },\r\n\r\n    _getUrl: function () {\r\n      //Constructing the url to navigate to the classic ui\r\n      var vars = {};\r\n      //Extracting the query string values from the url\r\n      window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,\r\n          function (m, key, value) {\r\n            vars[key] = value;\r\n          });\r\n      var originIndex = vars[\"origin_index\"],\r\n          nextUrl     = vars[\"nexturl\"],\r\n          base_url    = this.workItem.connector.connection.url.replace(\"/api/v1\", \"\"),\r\n          strURLArray = [\"func=Personal.Assignments\", \"func=work.Workflows&tabname=Assignments\"];\r\n      if (originIndex >= 0 && originIndex <= strURLArray.length - 1) {\r\n        return base_url + \"?\" + strURLArray[originIndex];\r\n      } else if (nextUrl) {\r\n        return decodeURIComponent(nextUrl);\r\n      } else if (document.referrer) {\r\n        var referrer = document.referrer;\r\n        if ((referrer.indexOf(\"/app/\") >= 0) || (referrer.indexOf(\"?func\") >= 0)) {\r\n          return document.referrer;\r\n        }\r\n        else {\r\n          return \"\";\r\n        }\r\n      }\r\n      else {\r\n        return \"\";\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Update the URL when a model is changed\r\n     * @private\r\n     */\r\n    _updateUrl: function () {\r\n      // get the workflow ids for the URL\r\n      var process_id    = this.workItem.get('process_id'),\r\n          subprocess_id = this.workItem.get('subprocess_id'),\r\n          task_id       = this.workItem.get('task_id'),\r\n          isDraft       = this.workItem.get('isDraft'),\r\n          isDocDraft    = this.workItem.get('isDocDraft'),\r\n          isDoc         = this.workItem.get('isDoc'),\r\n          mapsList      = this.workItem.get('mapsList'),\r\n          doc_id        = this.workItem.get('doc_id'),\r\n          parent_id     = this.workItem.get('parent_id'),\r\n          draftId       = this.workItem.get('draft_id');\r\n\r\n      if (!!process_id && !!doc_id) {\r\n        return;\r\n      }\r\n      if (!(doc_id || process_id) && this.applicationScope.id !== 'workflow') {\r\n        return;\r\n      }\r\n\r\n      var url = 'processes';\r\n\r\n      if (isDraft) {\r\n        // create the URL from the workflow ids\r\n        url = 'draftprocesses';\r\n        if (process_id) {\r\n          url += '/' + process_id;\r\n        }\r\n      } else if (isDocDraft || (mapsList && mapsList.length === 1)) {\r\n        url = 'docworkflows';\r\n        if (doc_id && parent_id && draftId) {\r\n          url += '/' + doc_id + '/' + parent_id + '/' + 'draftprocesses' + '/' +\r\n                 draftId;\r\n        }\r\n      } else if (isDoc) {\r\n        // create the URL from the workflow ids\r\n        url = 'docworkflows';\r\n        if (doc_id && parent_id) {\r\n          url += '/' + doc_id + '/' + parent_id;\r\n        }\r\n      } else {\r\n        // create the URL from the workflow ids\r\n        url = 'processes';\r\n        if (process_id) {\r\n          url += '/' + process_id + '/' + subprocess_id + '/' + task_id;\r\n        }\r\n      }\r\n      this._routeWithSlashes = false;\r\n      this.navigate(url);\r\n    },\r\n\r\n    validateURL: function (surl) {\r\n      var url = this.parseURL(surl);\r\n      var urlHostname = url.hostname.trim();\r\n\r\n      if (urlHostname === '') {\r\n        return surl;\r\n      }\r\n      else {\r\n        if (urlHostname.toUpperCase() === location.hostname.trim().toUpperCase()) {\r\n          return surl;\r\n        }\r\n        else\r\n        {\r\n          return \"\";\r\n        }\r\n      }\r\n    } ,\r\n\r\n    parseURL: function(url) {\r\n\r\n      var a =document.createElement('a');\r\n      a.href = url;\r\n\r\n      return {\r\n        source: url,\r\n        protocol: a.protocol.replace(':', ''),\r\n        hostname: a.hostname,\r\n        host: a.host,\r\n        port: a.port,\r\n        query: a.search,\r\n        params: (function () {\r\n          var ret = {},\r\n              seg = a.search.replace(/^\\?/, '').split('&'),\r\n              len = seg.length, i = 0, s;\r\n          for (; i < len; i++) {\r\n            if (!seg[i]) { continue; }\r\n            s = seg[i].split('=');\r\n            ret[s[0]] = s[1];\r\n          }\r\n          return ret;\r\n        })(),\r\n\r\n        hash: a.hash.replace('#', ''),\r\n\r\n        segments: a.pathname.replace(/^\\//, '').split('/')\r\n      };\r\n    }\r\n\r\n  });\r\n\r\n  return WorkflowPerspectiveRouter;\r\n\r\n});\r\n\n","csui.define('bundles/workflow-core',[\r\n  //factories\r\n  'workflow/models/workitem/workitem.model.factory',\r\n\r\n  // Commands\r\n  'workflow/commands/defaultactionitems',\r\n  'workflow/commands/initiate.workflow/initiate.workflow',\r\n  'workflow/commands/edit.workflow.map/edit.workflow.map',\r\n  'workflow/commands/initiate.document.workflow/initiate.document.workflow',\r\n  'workflow/commands/open.workitem/open.workitem',\r\n  'workflow/commands/open.form/open.form',\r\n\r\n  // Perspective router\r\n  'workflow/perspective/routers/workflow.perspective.router'\r\n], {});\r\n\r\n\r\n\n"]}