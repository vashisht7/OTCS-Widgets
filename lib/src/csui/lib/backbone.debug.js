/* Copyright (c) 2016-2017  OpenText Corp. All Rights Reserved. */

define(['module', 'csui/lib/underscore', 'csui/lib/backbone'
], function(module, _, Backbone) {
  'use strict';

  var config = module.config();

// Generated by CoffeeScript 1.10.0
// Edited not to look for Backbone and $ in window globals.
  var $ = Backbone.$, ConsoleLogger,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  $.fn.backbone = function(option) {
    var elem;
    if (option == null) {
      option = 'this';
    }
    switch (option) {
      case 'this':
        return this.data('_backbone_view') || null;
      case 'closest':
        elem = this;
        while (!elem.data('_backbone_view')) {
          elem = elem.parent();
          if (elem.size() === 0) {
            return null;
          }
        }
        return elem.data('_backbone_view');
      case 'parent':
        return this.parent().backbone('closest');
    }
  };

  ConsoleLogger = (function() {
    function ConsoleLogger() {}

    ConsoleLogger.prototype.lastTime = null;

    ConsoleLogger.prototype.log = function(type, object, details) {
      return console.log("[" + type + "]", details, ":");
    };

    return ConsoleLogger;

  })();

  Backbone.Debug = (function() {
    function Debug() {
      this._prettyInstanceName = bind(this._prettyInstanceName, this);
      this._hookConstructor = bind(this._hookConstructor, this);
      this._hookPrototype = bind(this._hookPrototype, this);
      this._hookMethod = bind(this._hookMethod, this);
      this._onSync = bind(this._onSync, this);
      this._onEvent = bind(this._onEvent, this);
      this._onViewBinding = bind(this._onViewBinding, this);
      this._onNewInstance = bind(this._onNewInstance, this);
      this._trackViewBinding = bind(this._trackViewBinding, this);
      this._hookSync = bind(this._hookSync, this);
      this._hookEvents = bind(this._hookEvents, this);
      this._trackObjects = bind(this._trackObjects, this);
      this.off = bind(this.off, this);
      this.on = bind(this.on, this);
      this.routers = bind(this.routers, this);
      this.views = bind(this.views, this);
      this.models = bind(this.models, this);
      this.collections = bind(this.collections, this);
      this._options = _.defaults({}, config, {
        'log:events': true,
        'log:evets:options': true,
        'log:sync': true,
        'log:instances': true,
        'log:views': true
      });
      this._objects = {
        Collection: {},
        Model: {},
        View: {},
        Router: {}
      };
      this.logger = new ConsoleLogger();
      this._trackObjects();
      this._hookEvents();
      this._hookSync();
      this._trackViewBinding();
    }

    Debug.prototype.collections = function() {
      return this._objects.Collection;
    };

    Debug.prototype.models = function() {
      return this._objects.Model;
    };

    Debug.prototype.views = function() {
      return this._objects.View;
    };

    Debug.prototype.routers = function() {
      return this._objects.Router;
    };

    Debug.prototype.on = function(option) {
      if (option != null) {
        this._options[option] = true;
      } else {
        for (option in this._options) {
          this._options[option] = true;
        }
      }
      return this;
    };

    Debug.prototype.off = function(option) {
      if (option != null) {
        this._options[option] = false;
      } else {
        for (option in this._options) {
          this._options[option] = false;
        }
      }
      return this;
    };

    Debug.prototype._trackObjects = function() {
      this._hookConstructor('Collection', this._onNewInstance);
      this._hookConstructor('Model', this._onNewInstance);
      this._hookConstructor('View', this._onNewInstance);
      return this._hookConstructor('Router', this._onNewInstance);
    };

    Debug.prototype._hookEvents = function() {
      this._hookPrototype('Collection', 'trigger', this._onEvent);
      this._hookPrototype('Model', 'trigger', this._onEvent);
      this._hookPrototype('View', 'trigger', this._onEvent);
      return this._hookPrototype('Router', 'trigger', this._onEvent);
    };

    Debug.prototype._hookSync = function() {
      return this._hookMethod('sync', this._onSync);
    };

    Debug.prototype._trackViewBinding = function() {
      return this._hookPrototype('View', 'setElement', this._onViewBinding);
    };

    Debug.prototype._onNewInstance = function(type, method, object) {
      var name;
      name = this._prettyInstanceName(object, type);
      this._objects[type][name] = object;
      if (this._options['log:instances']) {
        return this.logger.log('instance', name, type);
      }
    };

    Debug.prototype._onViewBinding = function(type, method, object) {
      var name;
      object.$el.data('_backbone_view', object);
      name = this._prettyInstanceName(object, type);
      if (this._options['log:views']) {
        return this.logger.log('view', name, object.el);
      }
    };

    Debug.prototype._onEvent = function(type, method, object, args) {
      if (this._options['log:events']) {
        var name = this._prettyInstanceName(object, type),
            event = args[0],
            value = '', options;
        if (event === 'change') {
          //value = args[1].toJSON();
          options = args[2];
        } else if (event.indexOf('change:') === 0) {
          value = args[2];
          options = args[3];
        } else if (event === 'add') {
          value = args[1].toJSON();
          options = args[3];
        } else if (event === 'remove') {
          value = args[2].toJSON();
          options = args[3];
        } else if (event === 'destroy') {
          value = args[1] && args[1].toJSON() || undefined;
          options = args[3];
        } else if (event === 'invalid') {
          value = args[2];
          options = args[3];
        } else if (event === 'sync') {
          value = args[2];
          options = args[3];
        } else if (event === 'error') {
          value = args[2];
        } else if (event === 'sort') {
          //value = args[1].models;
          options = args[2];
        } else if (event === 'reset') {
          //value = args[1].models;
          options = args[2];
        } else if (event === 'request') {
          value = args[2];
          options = args[3];
        } else if (event === 'route') {
          value = args[1];
          options = args[2];
        }
        var output = ["[event]", name, event];
        if (value !== undefined) {
          output.push(value);
        }
        if (this._options['log:evets:options'] && !_.isEmpty(options)) {
          output.push(options);
        }
        return console.log.apply(console, output);
      }
    };

    Debug.prototype._onSync = function(method, object, args) {
      if (this._options['log:sync']) {
        return this.logger.log('sync', args[1], args[0]);
      }
    };

    Debug.prototype._hookMethod = function(method, action) {
      var original;
      original = Backbone[method];
      return Backbone[method] = function() {
        var ret;
        ret = original.apply(this, arguments);
        action(method, this, arguments);
        return ret;
      };
    };

    Debug.prototype._hookPrototype = function(object, method, action) {
      var original;
      original = Backbone[object].prototype[method];
      return Backbone[object].prototype[method] = function() {
        var ret;
        ret = original.apply(this, arguments);
        action(object, method, this, arguments);
        return ret;
      };
    };

    Debug.prototype._hookConstructor = function(object, action) {
      var original;
      original = Backbone[object].prototype.constructor;
      return Backbone[object].prototype.constructor = eval("(function " + original.name + "() { var ret = original.apply(this, arguments); action(object, 'constructor', this, arguments); return ret; })");
    };

    Debug.prototype._prettyInstanceName = function(object, type) {
      var name;
      name = object.constructor.name || type;
      if (object.cid) {
        name = name + ":" + object.cid;
      }
      return name;
    };

    return Debug;

  })();

  Backbone.debug = new Backbone.Debug();

  return Backbone.debug;

});
